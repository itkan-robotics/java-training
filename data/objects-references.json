{
  "id": "objects-references",
  "title": "Objects and References",
  "sections": [
    {
      "type": "text",
      "title": "Understanding Object References",
      "content": "When you create an object in Java, the variable doesn't contain the object itself‚Äîit contains a <strong>reference</strong> to the object's location in memory. Think of it like a GPS coordinate that points to where your robot is parked in the garage. The coordinate isn't the robot, but it tells you exactly where to find it."
    },
    {
      "type": "code",
      "title": "Creating Object References:",
      "content": "public class FTCRobot {\n    private String teamName;\n    private int teamNumber;\n    private double batteryLevel;\n    \n    public FTCRobot(String name, int number) {\n        this.teamName = name;\n        this.teamNumber = number;\n        this.batteryLevel = 100.0;\n    }\n    \n    public void useBattery(double amount) {\n        this.batteryLevel -= amount;\n        if (this.batteryLevel < 0) {\n            this.batteryLevel = 0;\n        }\n    }\n    \n    public double getBatteryLevel() {\n        return this.batteryLevel;\n    }\n    \n    public String toString() {\n        return teamName + \" (Team \" + teamNumber + \") - Battery: \" + \n               String.format(\"%.1f\", batteryLevel) + \"%\";\n    }\n}\n\n// When you create an object, you get a reference to it\nFTCRobot robot = new FTCRobot(\"Lightning Bot\", 12345);\nSystem.out.println(robot);  // Lightning Bot (Team 12345) - Battery: 100.0%"
    },
    {
      "type": "text",
      "title": "Reference Assignment Copies the Reference",
      "content": "When you assign one object variable to another, you're not creating a new object‚Äîyou're copying the reference. Both variables now point to the same object in memory. This is like giving someone else the GPS coordinates to your robot; now both of you can find and control the same robot."
    },
    {
      "type": "code",
      "title": "Reference Assignment Example:",
      "content": "FTCRobot robot1 = new FTCRobot(\"Thunder Bot\", 54321);\nSystem.out.println(\"Original: \" + robot1);\n\n// This copies the REFERENCE, not the object\nFTCRobot robot2 = robot1;\n\n// Both variables point to the same object!\nrobot2.useBattery(25.0);  // Use battery through robot2\n\nSystem.out.println(\"robot1: \" + robot1);  // Shows 75% battery\nSystem.out.println(\"robot2: \" + robot2);  // Shows 75% battery\n\n// They're the same object, so changes affect both variables\nSystem.out.println(\"Same object? \" + (robot1 == robot2));  // true"
    },
    {
      "type": "text",
      "title": "The null Reference",
      "content": "A reference variable can be set to <code>null</code>, which means it doesn't point to any object. It's like having a GPS coordinate that points to nothing‚Äîthere's no robot there. Trying to use a null reference will cause a <strong>NullPointerException</strong>, one of the most common errors in Java programming."
    },
    {
      "type": "code",
      "title": "Working with null References:",
      "content": "FTCRobot robot = new FTCRobot(\"Storm Bot\", 98765);\nSystem.out.println(robot);  // Works fine\n\n// Set the reference to null\nrobot = null;\nSystem.out.println(robot);  // Prints: null\n\n// This will cause a NullPointerException!\n// robot.useBattery(10.0);  // ‚ùå Don't do this!\n\n// Always check for null before using an object\nif (robot != null) {\n    robot.useBattery(10.0);\n    System.out.println(\"Battery used successfully\");\n} else {\n    System.out.println(\"Robot reference is null - cannot use battery\");\n}\n\n// Safe way to create a new robot\nrobot = new FTCRobot(\"Phoenix Bot\", 11111);\nSystem.out.println(\"New robot created: \" + robot);"
    },
    {
      "type": "rules-box",
      "title": "NullPointerException Prevention:",
      "subtitle": "Essential Safety Checks:",
      "items": [
        "<strong>Always Check:</strong> Use if (object != null) before calling methods",
        "<strong>Initialize Variables:</strong> Give object variables initial values when possible",
        "<strong>Defensive Programming:</strong> Validate parameters in methods that receive objects",
        "<strong>Read Error Messages:</strong> NullPointerException tells you which line caused the error",
        "<strong>Use Debugging:</strong> Print object values to see which ones are null"
      ]
    },
    {
      "type": "text",
      "title": "Objects as Method Parameters",
      "content": "Objects can be passed as parameters to methods, just like primitive values. Since objects are passed by reference, the method receives a copy of the reference, not a copy of the object. This means the method can modify the original object."
    },
    {
      "type": "code",
      "title": "Objects as Parameters:",
      "content": "public class RobotMaintenance {\n    \n    // Method that takes a robot as a parameter\n    public static void performMaintenance(FTCRobot robot) {\n        if (robot == null) {\n            System.out.println(\"‚ùå Cannot perform maintenance on null robot\");\n            return;\n        }\n        \n        System.out.println(\"üîß Performing maintenance on: \" + robot);\n        \n        // Simulate maintenance - restore battery to full\n        robot = new FTCRobot(\"Maintained Bot\", 0);  // This creates a NEW object\n        // The original robot is unchanged because we changed the local reference\n        \n        System.out.println(\"‚úÖ Maintenance complete\");\n    }\n    \n    // Better maintenance method that actually modifies the robot\n    public static void rechargeBattery(FTCRobot robot) {\n        if (robot == null) {\n            System.out.println(\"‚ùå Cannot recharge null robot\");\n            return;\n        }\n        \n        System.out.println(\"üîã Recharging: \" + robot);\n        \n        // This modifies the original object by calling its methods\n        // We can't directly set batteryLevel because it's private\n        // But we can call methods that modify the object's state\n        \n        System.out.println(\"‚úÖ Battery recharged (simulated)\");\n    }\n    \n    // Method that checks robot battery and recommends action\n    public static void checkBatteryStatus(FTCRobot robot) {\n        if (robot == null) {\n            System.out.println(\"‚ùå Cannot check battery on null robot\");\n            return;\n        }\n        \n        double battery = robot.getBatteryLevel();\n        System.out.printf(\"üîã Battery level: %.1f%%\\n\", battery);\n        \n        if (battery < 20) {\n            System.out.println(\"‚ö†Ô∏è  LOW BATTERY - Charge immediately!\");\n        } else if (battery < 50) {\n            System.out.println(\"‚ö° Consider charging soon\");\n        } else {\n            System.out.println(\"‚úÖ Battery level is good\");\n        }\n    }\n}\n\n// Usage examples:\nFTCRobot competitionBot = new FTCRobot(\"Competition Bot\", 12345);\ncompetitionBot.useBattery(60.0);  // Use 60% battery\n\nRobotMaintenance.checkBatteryStatus(competitionBot);\nRobotMaintenance.rechargeBattery(competitionBot);\nRobotMaintenance.performMaintenance(competitionBot);\n\nSystem.out.println(\"Final robot state: \" + competitionBot);"
    },
    {
      "type": "text",
      "title": "Objects as Return Values",
      "content": "Methods can also return objects. This is useful for creating factory methods, cloning objects, or building new objects based on existing ones. The method returns a reference to the object, which can then be assigned to a variable."
    },
    {
      "type": "code",
      "title": "Methods Returning Objects:",
      "content": "public class RobotFactory {\n    private String manufacturer;\n    private int robotsBuilt;\n    \n    public RobotFactory(String manufacturer) {\n        this.manufacturer = manufacturer;\n        this.robotsBuilt = 0;\n    }\n    \n    // Method that returns a new robot object\n    public FTCRobot buildRobot(String teamName, int teamNumber) {\n        this.robotsBuilt++;\n        System.out.println(\"üè≠ Building robot #\" + robotsBuilt + \" for \" + teamName);\n        \n        // Create and return a new robot\n        FTCRobot newRobot = new FTCRobot(teamName, teamNumber);\n        return newRobot;\n    }\n    \n    // Method that creates a copy of an existing robot\n    public FTCRobot cloneRobot(FTCRobot original) {\n        if (original == null) {\n            System.out.println(\"‚ùå Cannot clone null robot\");\n            return null;\n        }\n        \n        System.out.println(\"ü§ñ Cloning robot: \" + original);\n        \n        // Create a new robot with similar properties\n        // Note: We can't access private fields directly, so we use available methods\n        FTCRobot clone = new FTCRobot(\"Clone Bot\", 99999);\n        \n        // In a real implementation, you'd copy all the properties\n        return clone;\n    }\n    \n    // Method that returns a robot with specific configuration\n    public FTCRobot buildCompetitionRobot(String teamName, int teamNumber) {\n        FTCRobot robot = this.buildRobot(teamName, teamNumber);\n        \n        // Perform competition-specific setup\n        System.out.println(\"‚öôÔ∏è  Configuring for competition...\");\n        \n        return robot;\n    }\n    \n    public int getRobotsBuilt() {\n        return this.robotsBuilt;\n    }\n}\n\n// Usage examples:\nRobotFactory factory = new RobotFactory(\"FTC Robotics Inc.\");\n\n// Create new robots using factory methods\nFTCRobot robot1 = factory.buildRobot(\"Lightning Bolts\", 12345);\nFTCRobot robot2 = factory.buildCompetitionRobot(\"Thunder Cats\", 54321);\nFTCRobot robot3 = factory.cloneRobot(robot1);\n\nSystem.out.println(\"\\nüìä Factory Status:\");\nSystem.out.println(\"Robots built: \" + factory.getRobotsBuilt());\nSystem.out.println(\"Robot 1: \" + robot1);\nSystem.out.println(\"Robot 2: \" + robot2);\nSystem.out.println(\"Robot 3: \" + robot3);"
    },
    {
      "type": "text",
      "title": "Object Equality and the equals() Method",
      "content": "By default, Java compares objects using reference equality (==), which checks if two variables point to the same object in memory. However, you often want to compare objects based on their content. This is where the <code>equals()</code> method comes in. You can override this method to define what makes two objects 'equal' based on their properties."
    },
    {
      "type": "code",
      "title": "Implementing equals() Method:",
      "content": "public class FTCRobot {\n    private String teamName;\n    private int teamNumber;\n    private double batteryLevel;\n    \n    public FTCRobot(String name, int number) {\n        this.teamName = name;\n        this.teamNumber = number;\n        this.batteryLevel = 100.0;\n    }\n    \n    // Override the equals method to compare robot content\n    @Override\n    public boolean equals(Object compared) {\n        // Check if they're the same object in memory\n        if (this == compared) {\n            return true;\n        }\n        \n        // Check if the compared object is null\n        if (compared == null) {\n            return false;\n        }\n        \n        // Check if the compared object is the right type\n        if (!(compared instanceof FTCRobot)) {\n            return false;\n        }\n        \n        // Cast to FTCRobot so we can access its properties\n        FTCRobot other = (FTCRobot) compared;\n        \n        // Compare the important properties\n        // Two robots are equal if they have the same team name and number\n        return this.teamName.equals(other.teamName) && \n               this.teamNumber == other.teamNumber;\n    }\n    \n    // Other methods...\n    public void useBattery(double amount) {\n        this.batteryLevel -= amount;\n        if (this.batteryLevel < 0) {\n            this.batteryLevel = 0;\n        }\n    }\n    \n    public String toString() {\n        return teamName + \" (Team \" + teamNumber + \") - Battery: \" + \n               String.format(\"%.1f\", batteryLevel) + \"%\";\n    }\n}\n\n// Testing object equality:\nFTCRobot robot1 = new FTCRobot(\"Lightning Bolts\", 12345);\nFTCRobot robot2 = new FTCRobot(\"Lightning Bolts\", 12345);  // Same team\nFTCRobot robot3 = new FTCRobot(\"Thunder Cats\", 54321);    // Different team\n\nSystem.out.println(\"Reference equality (==):\");\nSystem.out.println(\"robot1 == robot2: \" + (robot1 == robot2));  // false (different objects)\nSystem.out.println(\"robot1 == robot1: \" + (robot1 == robot1));  // true (same object)\n\nSystem.out.println(\"\\nContent equality (equals()):\");\nSystem.out.println(\"robot1.equals(robot2): \" + robot1.equals(robot2));  // true (same content)\nSystem.out.println(\"robot1.equals(robot3): \" + robot1.equals(robot3));  // false (different content)\nSystem.out.println(\"robot1.equals(null): \" + robot1.equals(null));      // false (null check)\n\n// Even if battery levels are different, they're still the same team\nrobot2.useBattery(50.0);\nSystem.out.println(\"\\nAfter using battery:\");\nSystem.out.println(\"robot1: \" + robot1);\nSystem.out.println(\"robot2: \" + robot2);\nSystem.out.println(\"Still equal? \" + robot1.equals(robot2));  // true (we ignore battery in equals)"
    },
    {
      "type": "text",
      "title": "Object Equality and Collections",
      "content": "The <code>equals()</code> method is crucial when working with collections like ArrayList. Methods like <code>contains()</code>, <code>indexOf()</code>, and <code>remove()</code> use the equals() method to find objects in the collection. Without a proper equals() implementation, these methods won't work as expected."
    },
    {
      "type": "code",
      "title": "Objects in Collections:",
      "content": "import java.util.ArrayList;\n\npublic class TeamRoster {\n    public static void main(String[] args) {\n        ArrayList<FTCRobot> robots = new ArrayList<>();\n        \n        // Create some robots\n        FTCRobot robot1 = new FTCRobot(\"Lightning Bolts\", 12345);\n        FTCRobot robot2 = new FTCRobot(\"Thunder Cats\", 54321);\n        FTCRobot robot3 = new FTCRobot(\"Storm Surge\", 98765);\n        \n        // Add robots to the roster\n        robots.add(robot1);\n        robots.add(robot2);\n        robots.add(robot3);\n        \n        System.out.println(\"üìã Team Roster:\");\n        for (int i = 0; i < robots.size(); i++) {\n            System.out.println((i + 1) + \". \" + robots.get(i));\n        }\n        \n        // Test contains() method - this uses equals()\n        FTCRobot searchRobot = new FTCRobot(\"Lightning Bolts\", 12345);\n        \n        if (robots.contains(searchRobot)) {\n            System.out.println(\"\\n‚úÖ Found Lightning Bolts in roster!\");\n        } else {\n            System.out.println(\"\\n‚ùå Lightning Bolts not found in roster\");\n        }\n        \n        // Test indexOf() method\n        int index = robots.indexOf(searchRobot);\n        if (index >= 0) {\n            System.out.println(\"Lightning Bolts is at position: \" + (index + 1));\n        }\n        \n        // Test with a robot not in the list\n        FTCRobot unknownRobot = new FTCRobot(\"Mystery Bot\", 00000);\n        if (robots.contains(unknownRobot)) {\n            System.out.println(\"Found Mystery Bot\");\n        } else {\n            System.out.println(\"‚ùå Mystery Bot is not in the roster\");\n        }\n        \n        // Remove a robot using equals()\n        boolean removed = robots.remove(searchRobot);\n        if (removed) {\n            System.out.println(\"\\nüóëÔ∏è  Removed Lightning Bolts from roster\");\n            System.out.println(\"Updated roster size: \" + robots.size());\n        }\n        \n        // Show that the original robot1 is still in memory\n        System.out.println(\"\\nOriginal robot1 still exists: \" + robot1);\n        System.out.println(\"Are they the same object? \" + (robot1 == searchRobot));  // false\n        System.out.println(\"Are they equal? \" + robot1.equals(searchRobot));        // true\n    }\n}"
    },
    {
      "type": "exercise-box",
      "title": "Try It Yourself:",
      "subtitle": "Practice with Objects and References",
      "content": "Test your understanding of object references, null handling, and object equality:",
      "tasks": [
        "Create a Sensor class with equals() method that compares sensor type and ID",
        "Build a Robot class that can be safely cloned with all its sensor references",
        "Design a Competition class that manages teams and handles null robot references safely",
        "Create a method that finds robots with low battery levels in a team roster"
      ],
      "answers": [
        {
          "task": "Create a Sensor class with equals() method that compares sensor type and ID",
          "code": "public class FTCSensor {\n    private String sensorType;\n    private String sensorId;\n    private double lastReading;\n    private boolean isConnected;\n    \n    public FTCSensor(String type, String id) {\n        this.sensorType = type;\n        this.sensorId = id;\n        this.lastReading = 0.0;\n        this.isConnected = true;\n    }\n    \n    @Override\n    public boolean equals(Object compared) {\n        // Same object reference\n        if (this == compared) {\n            return true;\n        }\n        \n        // Null check\n        if (compared == null) {\n            return false;\n        }\n        \n        // Type check\n        if (!(compared instanceof FTCSensor)) {\n            return false;\n        }\n        \n        // Cast and compare important properties\n        FTCSensor other = (FTCSensor) compared;\n        \n        // Two sensors are equal if they have same type and ID\n        return this.sensorType.equals(other.sensorType) && \n               this.sensorId.equals(other.sensorId);\n    }\n    \n    public void updateReading(double reading) {\n        this.lastReading = reading;\n    }\n    \n    public double getLastReading() {\n        return this.lastReading;\n    }\n    \n    public String getSensorType() {\n        return this.sensorType;\n    }\n    \n    public String getSensorId() {\n        return this.sensorId;\n    }\n    \n    public boolean isConnected() {\n        return this.isConnected;\n    }\n    \n    public void setConnected(boolean connected) {\n        this.isConnected = connected;\n    }\n    \n    @Override\n    public String toString() {\n        return sensorType + \" [\" + sensorId + \"] - \" + \n               String.format(\"%.2f\", lastReading) + \n               (isConnected ? \" (Connected)\" : \" (Disconnected)\");\n    }\n}\n\n// Usage example:\nFTCSensor ultrasonic1 = new FTCSensor(\"Ultrasonic\", \"US-001\");\nFTCSensor ultrasonic2 = new FTCSensor(\"Ultrasonic\", \"US-001\");  // Same type and ID\nFTCSensor gyro1 = new FTCSensor(\"Gyroscope\", \"GY-001\");\n\n// Test equality\nSystem.out.println(\"ultrasonic1.equals(ultrasonic2): \" + ultrasonic1.equals(ultrasonic2));  // true\nSystem.out.println(\"ultrasonic1.equals(gyro1): \" + ultrasonic1.equals(gyro1));              // false\nSystem.out.println(\"ultrasonic1 == ultrasonic2: \" + (ultrasonic1 == ultrasonic2));         // false\n\n// Test with different readings (should still be equal)\nultrasonic1.updateReading(25.5);\nultrasonic2.updateReading(30.2);\nSystem.out.println(\"After different readings:\");\nSystem.out.println(\"Still equal? \" + ultrasonic1.equals(ultrasonic2));  // true\nSystem.out.println(ultrasonic1);\nSystem.out.println(ultrasonic2);"
        },
        {
          "task": "Build a Robot class that can be safely cloned with all its sensor references",
          "code": "import java.util.ArrayList;\n\npublic class FTCRobotAdvanced {\n    private String teamName;\n    private int teamNumber;\n    private ArrayList<FTCSensor> sensors;\n    private double batteryLevel;\n    \n    public FTCRobotAdvanced(String name, int number) {\n        this.teamName = name;\n        this.teamNumber = number;\n        this.sensors = new ArrayList<>();\n        this.batteryLevel = 100.0;\n    }\n    \n    // Safe method to add a sensor\n    public void addSensor(FTCSensor sensor) {\n        if (sensor != null && !sensors.contains(sensor)) {\n            sensors.add(sensor);\n            System.out.println(\"‚úÖ Added sensor: \" + sensor.getSensorType() + \" [\" + sensor.getSensorId() + \"]\");\n        } else if (sensor == null) {\n            System.out.println(\"‚ùå Cannot add null sensor\");\n        } else {\n            System.out.println(\"‚ö†Ô∏è  Sensor already exists: \" + sensor.getSensorType() + \" [\" + sensor.getSensorId() + \"]\");\n        }\n    }\n    \n    // Safe method to get a sensor by type and ID\n    public FTCSensor getSensor(String type, String id) {\n        for (FTCSensor sensor : sensors) {\n            if (sensor != null && sensor.getSensorType().equals(type) && sensor.getSensorId().equals(id)) {\n                return sensor;\n            }\n        }\n        return null;  // Not found\n    }\n    \n    // Clone method that creates a deep copy\n    public FTCRobotAdvanced clone() {\n        System.out.println(\"ü§ñ Cloning robot: \" + this.teamName);\n        \n        // Create new robot with same basic properties\n        FTCRobotAdvanced clone = new FTCRobotAdvanced(this.teamName + \" (Clone)\", this.teamNumber);\n        clone.batteryLevel = this.batteryLevel;\n        \n        // Deep copy all sensors\n        for (FTCSensor sensor : this.sensors) {\n            if (sensor != null) {\n                // Create new sensor with same properties\n                FTCSensor clonedSensor = new FTCSensor(sensor.getSensorType(), sensor.getSensorId() + \"-CLONE\");\n                clonedSensor.updateReading(sensor.getLastReading());\n                clonedSensor.setConnected(sensor.isConnected());\n                clone.addSensor(clonedSensor);\n            }\n        }\n        \n        return clone;\n    }\n    \n    // Safe method to use battery\n    public void useBattery(double amount) {\n        if (amount > 0) {\n            this.batteryLevel = Math.max(0, this.batteryLevel - amount);\n        }\n    }\n    \n    // Safe method to get sensor count\n    public int getSensorCount() {\n        return sensors.size();\n    }\n    \n    // Safe method to get all sensors (returns copy to prevent external modification)\n    public ArrayList<FTCSensor> getAllSensors() {\n        ArrayList<FTCSensor> sensorCopy = new ArrayList<>();\n        for (FTCSensor sensor : sensors) {\n            if (sensor != null) {\n                sensorCopy.add(sensor);\n            }\n        }\n        return sensorCopy;\n    }\n    \n    @Override\n    public String toString() {\n        return teamName + \" (Team \" + teamNumber + \") - Battery: \" + \n               String.format(\"%.1f\", batteryLevel) + \"%, Sensors: \" + sensors.size();\n    }\n}\n\n// Usage example:\nFTCRobotAdvanced originalRobot = new FTCRobotAdvanced(\"Storm Surge\", 98765);\n\n// Add sensors safely\noriginalRobot.addSensor(new FTCSensor(\"Ultrasonic\", \"US-001\"));\noriginalRobot.addSensor(new FTCSensor(\"Gyroscope\", \"GY-001\"));\noriginalRobot.addSensor(null);  // Test null handling\n\n// Use some battery\noriginalRobot.useBattery(25.0);\n\nSystem.out.println(\"\\nOriginal robot: \" + originalRobot);\n\n// Clone the robot\nFTCRobotAdvanced clonedRobot = originalRobot.clone();\nSystem.out.println(\"Cloned robot: \" + clonedRobot);\n\n// Modify original robot\noriginalRobot.useBattery(30.0);\noriginalRobot.addSensor(new FTCSensor(\"Color\", \"CO-001\"));\n\nSystem.out.println(\"\\nAfter modifications:\");\nSystem.out.println(\"Original: \" + originalRobot);\nSystem.out.println(\"Clone: \" + clonedRobot);\nSystem.out.println(\"Are they the same object? \" + (originalRobot == clonedRobot));"
        }
      ]
    }
  ]
} 