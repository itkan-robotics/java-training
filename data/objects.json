{
  "id": "objects",
  "title": "Java Objects",
  "sections": [
    {
      "type": "text",
      "title": "Creating and Using Objects",
      "content": "Objects are <strong>instances</strong> of classes - they are the actual entities created from the class blueprint. You create objects using the <code>new</code> keyword followed by a constructor call. Each object has its own unique state (variable values) but shares the same behavior (methods) defined by its class."
    },
    {
      "type": "code",
      "title": "Object Instantiation:",
      "content": "// Creating objects from a class\nFTCRobot robot1 = new FTCRobot(\"CompetitionBot\", 12345);\nFTCRobot robot2 = new FTCRobot(\"PracticeBot\", 67890);\nFTCRobot robot3 = new FTCRobot(\"BackupBot\", 11111);\n\n// Each object has its own state\nrobot1.setBatteryLevel(95.0);\nrobot2.setBatteryLevel(60.0);\nrobot3.setBatteryLevel(100.0);\n\n// All objects share the same methods\nrobot1.activate();\nrobot2.activate();\nrobot3.runDiagnostics();\n\nSystem.out.println(robot1);  // Uses toString method\nSystem.out.println(robot2);\nSystem.out.println(robot3);"
    },
    {
      "type": "text",
      "title": "Object State and Behavior",
      "content": "Each object maintains its own <strong>state</strong> through its instance variables, while all objects of the same class share the same <strong>behavior</strong> through their methods. Think of it like multiple robots built from the same blueprint - they all have the same capabilities, but each has its own current settings and status."
    },
    {
      "type": "code",
      "title": "Multiple Objects Example:",
      "content": "public class RobotDemo {\n    public static void main(String[] args) {\n        // Create three different robot objects\n        FTCRobot speedBot = new FTCRobot(\"SpeedBot\", 1001);\n        FTCRobot strongBot = new FTCRobot(\"StrongBot\", 1002);\n        FTCRobot precisionBot = new FTCRobot(\"PrecisionBot\", 1003);\n        \n        // Each robot can have different configurations\n        speedBot.setMaxSpeed(100);\n        speedBot.setBatteryLevel(85);\n        \n        strongBot.setMaxSpeed(60);\n        strongBot.setBatteryLevel(95);\n        strongBot.setLiftCapacity(50);\n        \n        precisionBot.setMaxSpeed(40);\n        precisionBot.setBatteryLevel(90);\n        precisionBot.enablePrecisionMode(true);\n        \n        // All robots can perform the same actions\n        speedBot.activate();\n        strongBot.activate();\n        precisionBot.activate();\n        \n        // But their behavior might differ based on their state\n        speedBot.moveForward(10);    // Moves fast\n        strongBot.liftObject();      // Uses high lift capacity\n        precisionBot.moveToCoordinate(15.5, 22.3);  // Precise movement\n        \n        // Display each robot's current state\n        System.out.println(speedBot);\n        System.out.println(strongBot);\n        System.out.println(precisionBot);\n    }\n}"
    },
    {
      "type": "text",
      "title": "Understanding Object References",
      "content": "In Java, variables don't actually contain objects - they contain <strong>references</strong> to objects. A reference is like a remote control that points to an object in memory. This means multiple variables can reference the same object, and changing the object through one reference affects all other references to that same object."
    },
    {
      "type": "code",
      "title": "Object References Explained:",
      "content": "// Create one robot object\nFTCRobot mainRobot = new FTCRobot(\"TeamBot\", 12345);\n\n// Create another reference to the SAME robot object\nFTCRobot robotAlias = mainRobot;\n\n// Both variables point to the same object\nmainRobot.setBatteryLevel(75);\nSystem.out.println(robotAlias.getBatteryLevel());  // Prints 75!\n\n// Changes through either reference affect the same object\nrobotAlias.setMaxSpeed(80);\nSystem.out.println(mainRobot.getMaxSpeed());  // Prints 80!\n\n// Comparing references vs. creating new objects\nFTCRobot robot1 = new FTCRobot(\"Bot1\", 1111);\nFTCRobot robot2 = new FTCRobot(\"Bot2\", 2222);\nFTCRobot robot3 = robot1;  // Same reference as robot1\n\nSystem.out.println(robot1 == robot2);  // false (different objects)\nSystem.out.println(robot1 == robot3);  // true (same object)\nSystem.out.println(robot2 == robot3);  // false (different objects)\n\n// null reference - doesn't point to any object\nFTCRobot nullRobot = null;\nif (nullRobot != null) {\n    nullRobot.activate();  // This would cause NullPointerException!\n} else {\n    System.out.println(\"Robot reference is null\");\n}"
    },
    {
      "type": "rules-box",
      "title": "Object Reference Rules:",
      "subtitle": "Important Concepts to Remember:",
      "items": [
        "<strong>References vs Objects:</strong> Variables store references, not the actual objects",
        "<strong>Multiple References:</strong> Many variables can reference the same object",
        "<strong>Null References:</strong> A reference can be null (not pointing to any object)",
        "<strong>== vs .equals():</strong> == compares references, .equals() compares object content",
        "<strong>Shared State:</strong> Changes through any reference affect the same object"
      ]
    },
    {
      "type": "text",
      "title": "Objects as Method Parameters",
      "content": "Objects can be passed as parameters to methods. When you pass an object to a method, you're actually passing a reference to that object. This means the method can modify the object's state, and those changes will be visible outside the method."
    },
    {
      "type": "code",
      "title": "Objects as Parameters:",
      "content": "public class RobotManager {\n    \n    // Method that takes robot objects as parameters\n    public void initializeRobot(FTCRobot robot, String configuration) {\n        System.out.println(\"Initializing \" + robot.getName() + \" with \" + configuration);\n        \n        robot.setBatteryLevel(100);  // Modify the robot object\n        robot.activate();\n        \n        if (configuration.equals(\"competition\")) {\n            robot.setMaxSpeed(90);\n            robot.enableCompetitionMode(true);\n        } else if (configuration.equals(\"practice\")) {\n            robot.setMaxSpeed(60);\n            robot.enableSafetyLimits(true);\n        }\n        \n        System.out.println(\"Robot initialization complete\");\n    }\n    \n    // Method that compares two robot objects\n    public void compareRobots(FTCRobot robot1, FTCRobot robot2) {\n        System.out.println(\"Comparing robots:\");\n        System.out.println(robot1.getName() + \" vs \" + robot2.getName());\n        \n        if (robot1.getBatteryLevel() > robot2.getBatteryLevel()) {\n            System.out.println(robot1.getName() + \" has higher battery\");\n        } else if (robot1.getBatteryLevel() < robot2.getBatteryLevel()) {\n            System.out.println(robot2.getName() + \" has higher battery\");\n        } else {\n            System.out.println(\"Both robots have equal battery levels\");\n        }\n    }\n    \n    // Method that works with an array of robot objects\n    public void manageRobotTeam(FTCRobot[] robotTeam) {\n        System.out.println(\"Managing team of \" + robotTeam.length + \" robots:\");\n        \n        for (int i = 0; i < robotTeam.length; i++) {\n            FTCRobot robot = robotTeam[i];\n            \n            if (robot != null) {\n                if (robot.getBatteryLevel() < 30) {\n                    System.out.println(\"⚠️ \" + robot.getName() + \" needs charging!\");\n                    robot.returnToBase();\n                } else if (!robot.isActive()) {\n                    System.out.println(\"▶️ Activating \" + robot.getName());\n                    robot.activate();\n                } else {\n                    System.out.println(\"✅ \" + robot.getName() + \" is ready\");\n                }\n            } else {\n                System.out.println(\"❌ Robot slot \" + i + \" is empty (null)\");\n            }\n        }\n    }\n}"
    }
  ]
}
