{
  "id": "classes",
  "title": "Java Classes",
  "sections": [
    {
      "type": "text",
      "title": "Introduction to Object-Oriented Programming",
      "content": "Object-oriented programming is concerned with isolating concepts of a problem domain into separate entities and then using those entities to solve problems. In FTC robotics, we can think of concepts like 'Robot', 'Motor', 'Sensor', and 'GameController' as separate entities that work together to create a complete robot system."
    },
    {
      "type": "text",
      "title": "Classes and Objects: The Blueprint Analogy",
      "content": "A <strong>class</strong> defines the attributes of objects (the information related to them) and their commands (their methods). Think of a class as a blueprint for a house. The blueprint specifies what kinds of houses can be built from it - the number of rooms, the materials, the layout. Similarly, a class specifies what kinds of objects can be created from it."
    },
    {
      "type": "code",
      "title": "Real-World Example:",
      "content": "// Just like ArrayList is a class provided by Java:\nArrayList<Integer> integers = new ArrayList<>();\nintegers.add(15);\nintegers.add(34);\nintegers.add(65);\nintegers.add(111);\nSystem.out.println(integers.size());\n\n// We can create our own classes for robotics:\nFTCRobot competitionBot = new FTCRobot(\"TeamBot\");\ncompetitionBot.initializeHardware();\ncompetitionBot.startAutonomous();"
    },
    {
      "type": "text",
      "title": "The Relationship Between a Class and an Object",
      "content": "Individual objects are all created based on the same class blueprint - they're <strong>instances</strong> of the same class. The states of individual objects (their attributes like motor power, sensor readings, team number) may all vary, however. Each object has its own unique state while sharing the same structure defined by the class."
    },
    {
      "type": "text",
      "title": "Creating Our Own Classes",
      "content": "A class specifies what objects instantiated from it are like. The object's <strong>instance variables</strong> specify the internal state of the object, and the object's <strong>methods</strong> specify what the object does. Let's create a class to represent an FTC robot team member."
    },
    {
      "type": "code",
      "title": "Basic Class Structure:",
      "content": "public class TeamMember {\n    // Instance variables (attributes)\n    private String name;\n    private int age;\n    private String role;\n    \n    // Constructor\n    public TeamMember(String memberName) {\n        this.name = memberName;\n        this.age = 0;\n        this.role = \"Student\";\n    }\n    \n    // Methods (behaviors)\n    public void assignRole(String newRole) {\n        this.role = newRole;\n        System.out.println(name + \" is now the \" + newRole);\n    }\n    \n    public String getName() {\n        return this.name;\n    }\n}"
    },
    {
      "type": "text",
      "title": "Instance Variables and Encapsulation",
      "content": "Variables defined inside a class are called <strong>instance variables</strong>, object fields, or object attributes. Each variable is preceded by the keyword <code>private</code>, which means the variables are 'hidden' inside the object. This is known as <strong>encapsulation</strong> - a fundamental principle of object-oriented programming."
    }
  ]
}
