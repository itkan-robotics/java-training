{
  "title": "Advanced FRC Topics",
  "sections": [
    {
      "type": "text",
      "title": "Advanced FRC Programming Concepts",
      "content": "This lesson covers advanced topics that are essential for competitive FRC robotics, including advanced control systems, optimization techniques, and competition strategies."
    },
    {
      "type": "text",
      "title": "Advanced PID Control",
      "content": "Beyond basic PID control, advanced techniques include feedforward control, cascaded PID loops, and adaptive control systems."
    },
    {
      "type": "code",
      "title": "Feedforward Control Implementation",
      "content": "public class AdvancedPIDController {\n    private PIDController m_positionController;\n    private SimpleMotorFeedforward m_feedforward;\n    private double m_lastSetpoint = 0;\n    \n    public AdvancedPIDController(double kP, double kI, double kD, \n                                double kS, double kV, double kA) {\n        m_positionController = new PIDController(kP, kI, kD);\n        m_feedforward = new SimpleMotorFeedforward(kS, kV, kA);\n    }\n    \n    public double calculate(double measurement, double setpoint) {\n        // Calculate PID output\n        double pidOutput = m_positionController.calculate(measurement, setpoint);\n        \n        // Calculate feedforward output\n        double velocity = (setpoint - m_lastSetpoint) / 0.02; // 20ms timestep\n        double feedforwardOutput = m_feedforward.calculate(velocity);\n        \n        m_lastSetpoint = setpoint;\n        \n        // Combine PID and feedforward\n        return pidOutput + feedforwardOutput;\n    }\n    \n    public void reset() {\n        m_positionController.reset();\n        m_lastSetpoint = 0;\n    }\n}"
    },
    {
      "type": "text",
      "title": "Cascaded PID Control",
      "content": "Cascaded PID control uses multiple PID loops in series, where the output of one loop becomes the setpoint for another. This is commonly used for position control with velocity feedback."
    },
    {
      "type": "code",
      "title": "Cascaded PID Example",
      "content": "public class CascadedPIDController {\n    private PIDController m_velocityController;\n    private PIDController m_positionController;\n    private double m_velocitySetpoint = 0;\n    \n    public CascadedPIDController(double posKp, double posKi, double posKd,\n                                double velKp, double velKi, double velKd) {\n        m_positionController = new PIDController(posKp, posKi, posKd);\n        m_velocityController = new PIDController(velKp, velKi, velKd);\n    }\n    \n    public double calculate(double positionMeasurement, double velocityMeasurement, \n                           double positionSetpoint) {\n        // Outer loop: position controller\n        m_velocitySetpoint = m_positionController.calculate(positionMeasurement, positionSetpoint);\n        \n        // Inner loop: velocity controller\n        double output = m_velocityController.calculate(velocityMeasurement, m_velocitySetpoint);\n        \n        return output;\n    }\n    \n    public void reset() {\n        m_positionController.reset();\n        m_velocityController.reset();\n        m_velocitySetpoint = 0;\n    }\n}"
    },
    {
      "type": "text",
      "title": "State Machines",
      "content": "State machines are essential for complex autonomous routines and mechanism control. They provide a structured way to handle multiple states and transitions."
    },
    {
      "type": "code",
      "title": "State Machine Implementation",
      "content": "public enum IntakeState {\n    IDLE,\n    INTAKING,\n    EJECTING,\n    HOLDING\n}\n\npublic class IntakeStateMachine {\n    private IntakeState m_currentState = IntakeState.IDLE;\n    private Timer m_stateTimer = new Timer();\n    private double m_intakeSpeed = 0.0;\n    \n    public void update(boolean intakeButton, boolean ejectButton, boolean hasGamePiece) {\n        switch (m_currentState) {\n            case IDLE:\n                if (intakeButton) {\n                    m_currentState = IntakeState.INTAKING;\n                    m_stateTimer.reset();\n                    m_stateTimer.start();\n                }\n                m_intakeSpeed = 0.0;\n                break;\n                \n            case INTAKING:\n                m_intakeSpeed = 0.8;\n                if (hasGamePiece || m_stateTimer.get() > 3.0) {\n                    m_currentState = IntakeState.HOLDING;\n                    m_stateTimer.reset();\n                }\n                break;\n                \n            case EJECTING:\n                m_intakeSpeed = -0.6;\n                if (m_stateTimer.get() > 1.0) {\n                    m_currentState = IntakeState.IDLE;\n                }\n                break;\n                \n            case HOLDING:\n                m_intakeSpeed = 0.1; // Slow hold speed\n                if (ejectButton) {\n                    m_currentState = IntakeState.EJECTING;\n                    m_stateTimer.reset();\n                    m_stateTimer.start();\n                }\n                break;\n        }\n        \n        // Apply motor power\n        m_intakeMotor.set(m_intakeSpeed);\n    }\n    \n    public IntakeState getCurrentState() {\n        return m_currentState;\n    }\n}"
    },
    {
      "type": "text",
      "title": "Advanced Autonomous Programming",
      "content": "Advanced autonomous programming involves complex decision-making, dynamic path planning, and adaptive strategies based on game conditions."
    },
    {
      "type": "code",
      "title": "Dynamic Autonomous Example",
      "content": "public class AdvancedAutonomous extends TimedRobot {\n    private enum AutoState {\n        INIT,\n        SCORE_PIECE,\n        PICKUP_PIECE,\n        NAVIGATE_TO_ZONE,\n        BALANCE,\n        END\n    }\n    \n    private AutoState m_currentState = AutoState.INIT;\n    private Timer m_stateTimer = new Timer();\n    private boolean m_hasGamePiece = false;\n    private int m_piecesScored = 0;\n    private double m_allianceColor = 1.0; // 1.0 for red, -1.0 for blue\n    \n    @Override\n    public void autonomousInit() {\n        m_stateTimer.reset();\n        m_stateTimer.start();\n        \n        // Determine alliance color from FMS\n        m_allianceColor = DriverStation.getAlliance() == Alliance.Red ? 1.0 : -1.0;\n    }\n    \n    @Override\n    public void autonomousPeriodic() {\n        double time = m_stateTimer.get();\n        \n        switch (m_currentState) {\n            case INIT:\n                // Initialize systems\n                m_drivetrain.resetEncoders();\n                m_arm.setPosition(0);\n                m_currentState = AutoState.SCORE_PIECE;\n                break;\n                \n            case SCORE_PIECE:\n                if (m_hasGamePiece) {\n                    // Score the piece\n                    m_arm.setPosition(90);\n                    m_intake.eject();\n                    m_piecesScored++;\n                    m_hasGamePiece = false;\n                    \n                    if (m_piecesScored >= 2) {\n                        m_currentState = AutoState.BALANCE;\n                    } else {\n                        m_currentState = AutoState.PICKUP_PIECE;\n                    }\n                } else {\n                    m_currentState = AutoState.PICKUP_PIECE;\n                }\n                break;\n                \n            case PICKUP_PIECE:\n                // Navigate to pickup location\n                if (m_drivetrain.driveToPoint(new Translation2d(2.0 * m_allianceColor, 0))) {\n                    m_intake.intake();\n                    if (m_intake.hasGamePiece()) {\n                        m_hasGamePiece = true;\n                        m_currentState = AutoState.SCORE_PIECE;\n                    }\n                }\n                break;\n                \n            case BALANCE:\n                // Navigate to charging station and balance\n                if (m_drivetrain.driveToPoint(new Translation2d(0, 0))) {\n                    if (m_drivetrain.balance()) {\n                        m_currentState = AutoState.END;\n                    }\n                }\n                break;\n                \n            case END:\n                // Autonomous complete\n                m_drivetrain.stop();\n                break;\n        }\n        \n        // Safety timeout\n        if (time > 15.0) {\n            m_currentState = AutoState.END;\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Optimization Techniques",
      "content": "Optimization is crucial for competitive robotics. This includes code optimization, mechanical optimization, and strategic optimization."
    },
    {
      "type": "code",
      "title": "Code Optimization Examples",
      "content": "public class OptimizedRobot extends TimedRobot {\n    // Use constants instead of magic numbers\n    private static final double DRIVE_SPEED = 0.8;\n    private static final double TURN_SPEED = 0.6;\n    private static final double DEADZONE = 0.1;\n    \n    // Cache frequently used objects\n    private final Timer m_timer = new Timer();\n    private final SendableChooser<String> m_autoChooser = new SendableChooser<>();\n    \n    // Use efficient data structures\n    private final Map<String, Command> m_commands = new HashMap<>();\n    private final List<Subsystem> m_subsystems = new ArrayList<>();\n    \n    // Optimize calculations\n    private double m_lastLeftPower = 0.0;\n    private double m_lastRightPower = 0.0;\n    \n    public void optimizedDrive(double leftStick, double rightStick) {\n        // Apply deadzone efficiently\n        leftStick = Math.abs(leftStick) < DEADZONE ? 0.0 : leftStick;\n        rightStick = Math.abs(rightStick) < DEADZONE ? 0.0 : rightStick;\n        \n        // Only update motors if values changed significantly\n        double leftPower = leftStick * DRIVE_SPEED;\n        double rightPower = rightStick * DRIVE_SPEED;\n        \n        if (Math.abs(leftPower - m_lastLeftPower) > 0.01) {\n            m_leftMotor.set(leftPower);\n            m_lastLeftPower = leftPower;\n        }\n        \n        if (Math.abs(rightPower - m_lastRightPower) > 0.01) {\n            m_rightMotor.set(rightPower);\n            m_lastRightPower = rightPower;\n        }\n    }\n    \n    // Use efficient loops\n    public void updateAllSubsystems() {\n        for (Subsystem subsystem : m_subsystems) {\n            subsystem.periodic();\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Competition Strategies",
      "content": "Competition strategies involve understanding game rules, optimizing for scoring, and adapting to different match conditions."
    },
    {
      "type": "rules-box",
      "title": "Key Competition Strategies",
      "items": [
        "<strong>Scoring Optimization:</strong> Maximize points per unit time",
        "<strong>Defense Strategies:</strong> Effective defensive play and counter-strategies",
        "<strong>Alliance Coordination:</strong> Work effectively with alliance partners",
        "<strong>Adaptive Play:</strong> Adjust strategy based on opponent and match conditions",
        "<strong>Endgame Optimization:</strong> Maximize endgame scoring opportunities"
      ],
      "subtitle": "Essential strategies for competitive success:"
    },
    {
      "type": "code",
      "title": "Strategy Implementation Example",
      "content": "public class CompetitionStrategy {\n    private enum Strategy {\n        SCORE_FOCUSED,\n        DEFENSIVE,\n        BALANCED,\n        ENDGAME_FOCUSED\n    }\n    \n    private Strategy m_currentStrategy = Strategy.BALANCED;\n    private int m_allianceScore = 0;\n    private int m_opponentScore = 0;\n    private double m_timeRemaining = 0.0;\n    \n    public void updateStrategy(int allianceScore, int opponentScore, double timeRemaining) {\n        m_allianceScore = allianceScore;\n        m_opponentScore = opponentScore;\n        m_timeRemaining = timeRemaining;\n        \n        // Determine strategy based on game state\n        if (timeRemaining < 30.0) {\n            // Endgame - focus on final scoring opportunities\n            m_currentStrategy = Strategy.ENDGAME_FOCUSED;\n        } else if (allianceScore > opponentScore + 20) {\n            // Leading by significant margin - play defensively\n            m_currentStrategy = Strategy.DEFENSIVE;\n        } else if (allianceScore < opponentScore - 10) {\n            // Behind - focus on scoring\n            m_currentStrategy = Strategy.SCORE_FOCUSED;\n        } else {\n            // Close game - balanced approach\n            m_currentStrategy = Strategy.BALANCED;\n        }\n    }\n    \n    public void executeStrategy() {\n        switch (m_currentStrategy) {\n            case SCORE_FOCUSED:\n                // Prioritize scoring over defense\n                m_autonomous.setScoringPriority(true);\n                m_defense.setAggressiveness(0.3);\n                break;\n                \n            case DEFENSIVE:\n                // Focus on preventing opponent scoring\n                m_autonomous.setScoringPriority(false);\n                m_defense.setAggressiveness(0.8);\n                break;\n                \n            case BALANCED:\n                // Equal focus on scoring and defense\n                m_autonomous.setScoringPriority(true);\n                m_defense.setAggressiveness(0.5);\n                break;\n                \n            case ENDGAME_FOCUSED:\n                // Focus on endgame scoring opportunities\n                m_autonomous.setEndgameMode(true);\n                m_defense.setAggressiveness(0.2);\n                break;\n        }\n    }\n}"
    },
    {
      "type": "exercise-box",
      "title": "Advanced Topics Practice",
      "description": "Implement advanced features in your robot code.",
      "tasks": [
        "Implement feedforward control for a mechanism",
        "Create a state machine for complex autonomous routines",
        "Optimize your robot code for performance",
        "Develop competition strategies for your game",
        "Implement adaptive control systems",
        "Test and validate advanced features in simulation"
      ],
      "content": "// Advanced topics to explore:\n// 1. Feedforward control for better tracking\n// 2. State machines for complex behaviors\n// 3. Code optimization for performance\n// 4. Competition strategy implementation\n// 5. Advanced autonomous programming\n// 6. Adaptive control systems\n\n// Remember to test thoroughly and document your implementations!"
    }
  ]
}
