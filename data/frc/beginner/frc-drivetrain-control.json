{
  "title": "Drivetrain Control and Motor Controllers",
  "sections": [
    {
      "type": "text",
      "title": "Understanding FRC Drivetrains",
      "content": "The drivetrain is the foundation of your robot's movement. In FRC, you'll work with different types of drivetrains and motor controllers. Understanding how to program these effectively is crucial for successful robot operation."
    },
    {
      "type": "rules-box",
      "title": "Common FRC Drivetrain Types",
      "items": [
        "<strong>Tank Drive:</strong> Left and right sides controlled independently",
        "<strong>Arcade Drive:</strong> Forward/backward and turning controlled by separate sticks",
        "<strong>Mecanum Drive:</strong> Four-wheel drive with special wheels for omnidirectional movement",
        "<strong>Swerve Drive:</strong> Each wheel can rotate and drive independently",
        "<strong>X-Drive:</strong> Four wheels arranged in an X pattern"
      ],
      "subtitle": "FRC robots typically use one of these drivetrain configurations:"
    },
    {
      "type": "text",
      "title": "Motor Controllers in FRC",
      "content": "FRC teams use different motor controllers depending on their preferences and requirements. The two most common manufacturers are REV Robotics and CTRE (Cross The Road Electronics)."
    },
    {
      "type": "rules-box",
      "title": "Popular Motor Controllers",
      "items": [
        "<strong>REV Spark MAX:</strong> Modern, feature-rich controller with built-in PID",
        "<strong>CTRE Talon FX:</strong> High-performance controller with advanced features",
        "<strong>CTRE Victor SPX:</strong> Reliable controller for basic applications",
        "<strong>REV Spark:</strong> Simple controller for basic motor control",
        "<strong>PWM Controllers:</strong> Basic controllers for simple applications"
      ],
      "subtitle": "Common motor controllers used in FRC:"
    },
    {
      "type": "text",
      "title": "REV Spark MAX Implementation",
      "content": "The REV Spark MAX is a popular choice for FRC teams due to its modern features and ease of use. It supports both PWM and CAN communication."
    },
    {
      "type": "code",
      "title": "REV Spark MAX Drivetrain",
      "content": "package frc.robot.subsystems;\n\nimport com.revrobotics.CANSparkMax;\nimport com.revrobotics.CANSparkMaxLowLevel.MotorType;\nimport edu.wpi.first.wpilibj.drive.DifferentialDrive;\nimport edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\n\npublic class Drivetrain {\n    // Motor controllers (using CAN)\n    private final CANSparkMax m_leftFront = new CANSparkMax(1, MotorType.kBrushless);\n    private final CANSparkMax m_leftBack = new CANSparkMax(2, MotorType.kBrushless);\n    private final CANSparkMax m_rightFront = new CANSparkMax(3, MotorType.kBrushless);\n    private final CANSparkMax m_rightBack = new CANSparkMax(4, MotorType.kBrushless);\n    \n    // Drivetrain\n    private final DifferentialDrive m_drive;\n    \n    // Configuration\n    private static final double DEADZONE = 0.1;\n    private static final double MAX_SPEED = 1.0;\n    \n    public Drivetrain() {\n        // Configure motor controllers\n        m_leftBack.follow(m_leftFront);\n        m_rightBack.follow(m_rightFront);\n        \n        // Set motor inversions\n        m_rightFront.setInverted(true);\n        m_rightBack.setInverted(true);\n        \n        // Create drivetrain\n        m_drive = new DifferentialDrive(m_leftFront, m_rightFront);\n        \n        // Configure safety\n        m_drive.setSafetyEnabled(true);\n        m_drive.setExpiration(0.1);\n        \n        // Set current limits\n        m_leftFront.setSmartCurrentLimit(40);\n        m_rightFront.setSmartCurrentLimit(40);\n        \n        SmartDashboard.putString(\"Drivetrain Status\", \"REV Spark MAX Initialized\");\n    }\n    \n    public void arcadeDrive(double forward, double turn) {\n        // Apply deadzone\n        forward = applyDeadzone(forward);\n        turn = applyDeadzone(turn);\n        \n        // Limit speed\n        forward = Math.max(-MAX_SPEED, Math.min(MAX_SPEED, forward));\n        turn = Math.max(-MAX_SPEED, Math.min(MAX_SPEED, turn));\n        \n        // Drive the robot\n        m_drive.arcadeDrive(forward, turn);\n        \n        // Update dashboard\n        SmartDashboard.putNumber(\"Forward Speed\", forward);\n        SmartDashboard.putNumber(\"Turn Speed\", turn);\n        SmartDashboard.putNumber(\"Left Current\", m_leftFront.getOutputCurrent());\n        SmartDashboard.putNumber(\"Right Current\", m_rightFront.getOutputCurrent());\n    }\n    \n    public void tankDrive(double left, double right) {\n        // Apply deadzone\n        left = applyDeadzone(left);\n        right = applyDeadzone(right);\n        \n        // Limit speed\n        left = Math.max(-MAX_SPEED, Math.min(MAX_SPEED, left));\n        right = Math.max(-MAX_SPEED, Math.min(MAX_SPEED, right));\n        \n        // Drive the robot\n        m_drive.tankDrive(left, right);\n        \n        // Update dashboard\n        SmartDashboard.putNumber(\"Left Speed\", left);\n        SmartDashboard.putNumber(\"Right Speed\", right);\n    }\n    \n    public void stop() {\n        m_drive.stopMotor();\n        SmartDashboard.putString(\"Drivetrain Status\", \"Stopped\");\n    }\n    \n    private double applyDeadzone(double value) {\n        if (Math.abs(value) < DEADZONE) {\n            return 0.0;\n        }\n        return value;\n    }\n}"
    },
    {
      "type": "text",
      "title": "CTRE Talon FX Implementation",
      "content": "The CTRE Talon FX is another popular choice, especially for teams that need high performance and advanced features like motion profiling."
    },
    {
      "type": "code",
      "title": "CTRE Talon FX Drivetrain",
      "content": "package frc.robot.subsystems;\n\nimport com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;\nimport com.ctre.phoenix.motorcontrol.NeutralMode;\nimport edu.wpi.first.wpilibj.drive.DifferentialDrive;\nimport edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\n\npublic class Drivetrain {\n    // Motor controllers (using CAN)\n    private final WPI_TalonFX m_leftFront = new WPI_TalonFX(1);\n    private final WPI_TalonFX m_leftBack = new WPI_TalonFX(2);\n    private final WPI_TalonFX m_rightFront = new WPI_TalonFX(3);\n    private final WPI_TalonFX m_rightBack = new WPI_TalonFX(4);\n    \n    // Drivetrain\n    private final DifferentialDrive m_drive;\n    \n    // Configuration\n    private static final double DEADZONE = 0.1;\n    private static final double MAX_SPEED = 1.0;\n    \n    public Drivetrain() {\n        // Configure motor controllers\n        m_leftBack.follow(m_leftFront);\n        m_rightBack.follow(m_rightFront);\n        \n        // Set motor inversions\n        m_rightFront.setInverted(true);\n        m_rightBack.setInverted(true);\n        \n        // Set neutral mode\n        m_leftFront.setNeutralMode(NeutralMode.Brake);\n        m_leftBack.setNeutralMode(NeutralMode.Brake);\n        m_rightFront.setNeutralMode(NeutralMode.Brake);\n        m_rightBack.setNeutralMode(NeutralMode.Brake);\n        \n        // Create drivetrain\n        m_drive = new DifferentialDrive(m_leftFront, m_rightFront);\n        \n        // Configure safety\n        m_drive.setSafetyEnabled(true);\n        m_drive.setExpiration(0.1);\n        \n        // Set current limits\n        m_leftFront.configSupplyCurrentLimit(new SupplyCurrentLimitConfiguration(true, 40, 40, 0.1));\n        m_rightFront.configSupplyCurrentLimit(new SupplyCurrentLimitConfiguration(true, 40, 40, 0.1));\n        \n        SmartDashboard.putString(\"Drivetrain Status\", \"CTRE Talon FX Initialized\");\n    }\n    \n    public void arcadeDrive(double forward, double turn) {\n        // Apply deadzone\n        forward = applyDeadzone(forward);\n        turn = applyDeadzone(turn);\n        \n        // Limit speed\n        forward = Math.max(-MAX_SPEED, Math.min(MAX_SPEED, forward));\n        turn = Math.max(-MAX_SPEED, Math.min(MAX_SPEED, turn));\n        \n        // Drive the robot\n        m_drive.arcadeDrive(forward, turn);\n        \n        // Update dashboard\n        SmartDashboard.putNumber(\"Forward Speed\", forward);\n        SmartDashboard.putNumber(\"Turn Speed\", turn);\n        SmartDashboard.putNumber(\"Left Current\", m_leftFront.getStatorCurrent());\n        SmartDashboard.putNumber(\"Right Current\", m_rightFront.getStatorCurrent());\n    }\n    \n    public void tankDrive(double left, double right) {\n        // Apply deadzone\n        left = applyDeadzone(left);\n        right = applyDeadzone(right);\n        \n        // Limit speed\n        left = Math.max(-MAX_SPEED, Math.min(MAX_SPEED, left));\n        right = Math.max(-MAX_SPEED, Math.min(MAX_SPEED, right));\n        \n        // Drive the robot\n        m_drive.tankDrive(left, right);\n        \n        // Update dashboard\n        SmartDashboard.putNumber(\"Left Speed\", left);\n        SmartDashboard.putNumber(\"Right Speed\", right);\n    }\n    \n    public void stop() {\n        m_drive.stopMotor();\n        SmartDashboard.putString(\"Drivetrain Status\", \"Stopped\");\n    }\n    \n    private double applyDeadzone(double value) {\n        if (Math.abs(value) < DEADZONE) {\n            return 0.0;\n        }\n        return value;\n    }\n}"
    },
    {
      "type": "text",
      "title": "Mecanum Drive Implementation",
      "content": "Mecanum drive allows for omnidirectional movement, including strafing (moving sideways). This requires special mecanum wheels and more complex control logic."
    },
    {
      "type": "code",
      "title": "Mecanum Drive with REV Spark MAX",
      "content": "package frc.robot.subsystems;\n\nimport com.revrobotics.CANSparkMax;\nimport com.revrobotics.CANSparkMaxLowLevel.MotorType;\nimport edu.wpi.first.wpilibj.drive.MecanumDrive;\nimport edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\n\npublic class Drivetrain {\n    // Motor controllers\n    private final CANSparkMax m_frontLeft = new CANSparkMax(1, MotorType.kBrushless);\n    private final CANSparkMax m_frontRight = new CANSparkMax(2, MotorType.kBrushless);\n    private final CANSparkMax m_rearLeft = new CANSparkMax(3, MotorType.kBrushless);\n    private final CANSparkMax m_rearRight = new CANSparkMax(4, MotorType.kBrushless);\n    \n    // Drivetrain\n    private final MecanumDrive m_drive;\n    \n    // Configuration\n    private static final double DEADZONE = 0.1;\n    private static final double MAX_SPEED = 1.0;\n    \n    public Drivetrain() {\n        // Set motor inversions for mecanum\n        m_frontRight.setInverted(true);\n        m_rearRight.setInverted(true);\n        \n        // Create mecanum drive\n        m_drive = new MecanumDrive(m_frontLeft, m_rearLeft, m_frontRight, m_rearRight);\n        \n        // Configure safety\n        m_drive.setSafetyEnabled(true);\n        m_drive.setExpiration(0.1);\n        \n        // Set current limits\n        m_frontLeft.setSmartCurrentLimit(40);\n        m_frontRight.setSmartCurrentLimit(40);\n        m_rearLeft.setSmartCurrentLimit(40);\n        m_rearRight.setSmartCurrentLimit(40);\n        \n        SmartDashboard.putString(\"Drivetrain Status\", \"Mecanum Drive Initialized\");\n    }\n    \n    public void mecanumDrive(double forward, double strafe, double turn) {\n        // Apply deadzone\n        forward = applyDeadzone(forward);\n        strafe = applyDeadzone(strafe);\n        turn = applyDeadzone(turn);\n        \n        // Limit speed\n        forward = Math.max(-MAX_SPEED, Math.min(MAX_SPEED, forward));\n        strafe = Math.max(-MAX_SPEED, Math.min(MAX_SPEED, strafe));\n        turn = Math.max(-MAX_SPEED, Math.min(MAX_SPEED, turn));\n        \n        // Drive the robot\n        m_drive.driveCartesian(strafe, forward, turn);\n        \n        // Update dashboard\n        SmartDashboard.putNumber(\"Forward Speed\", forward);\n        SmartDashboard.putNumber(\"Strafe Speed\", strafe);\n        SmartDashboard.putNumber(\"Turn Speed\", turn);\n    }\n    \n    public void stop() {\n        m_drive.stopMotor();\n        SmartDashboard.putString(\"Drivetrain Status\", \"Stopped\");\n    }\n    \n    private double applyDeadzone(double value) {\n        if (Math.abs(value) < DEADZONE) {\n            return 0.0;\n        }\n        return value;\n    }\n}"
    },
    {
      "type": "text",
      "title": "Speed Control and Scaling",
      "content": "Adding speed control allows drivers to switch between different speed modes for precision and power. This is especially useful for different game situations."
    },
    {
      "type": "code",
      "title": "Speed Control Implementation",
      "content": "public class Drivetrain {\n    // ... existing motor controller declarations ...\n    \n    // Speed control\n    private double m_speedMultiplier = 1.0;\n    private static final double SLOW_SPEED = 0.3;\n    private static final double MEDIUM_SPEED = 0.7;\n    private static final double FAST_SPEED = 1.0;\n    \n    public void setSpeedMode(SpeedMode mode) {\n        switch (mode) {\n            case SLOW:\n                m_speedMultiplier = SLOW_SPEED;\n                break;\n            case MEDIUM:\n                m_speedMultiplier = MEDIUM_SPEED;\n                break;\n            case FAST:\n                m_speedMultiplier = FAST_SPEED;\n                break;\n        }\n        SmartDashboard.putString(\"Speed Mode\", mode.toString());\n    }\n    \n    public void arcadeDrive(double forward, double turn) {\n        // Apply speed scaling\n        forward *= m_speedMultiplier;\n        turn *= m_speedMultiplier;\n        \n        // Apply deadzone\n        forward = applyDeadzone(forward);\n        turn = applyDeadzone(turn);\n        \n        // Drive the robot\n        m_drive.arcadeDrive(forward, turn);\n        \n        // Update dashboard\n        SmartDashboard.putNumber(\"Speed Multiplier\", m_speedMultiplier);\n        SmartDashboard.putNumber(\"Forward Speed\", forward);\n        SmartDashboard.putNumber(\"Turn Speed\", turn);\n    }\n    \n    public enum SpeedMode {\n        SLOW, MEDIUM, FAST\n    }\n}"
    },
    {
      "type": "text",
      "title": "Drive Mode Selection",
      "content": "Many FRC robots support multiple drive modes. Implementing a drive mode selector allows drivers to choose the most appropriate control scheme for different situations."
    },
    {
      "type": "code",
      "title": "Drive Mode Selector",
      "content": "public class Drivetrain {\n    // ... existing motor controller declarations ...\n    \n    // Drive mode\n    private DriveMode m_driveMode = DriveMode.ARCADE;\n    \n    public void setDriveMode(DriveMode mode) {\n        m_driveMode = mode;\n        SmartDashboard.putString(\"Drive Mode\", mode.toString());\n    }\n    \n    public void drive(double forward, double turn, double left, double right) {\n        switch (m_driveMode) {\n            case ARCADE:\n                arcadeDrive(forward, turn);\n                break;\n            case TANK:\n                tankDrive(left, right);\n                break;\n            case CURVATURE:\n                curvatureDrive(forward, turn);\n                break;\n        }\n    }\n    \n    private void curvatureDrive(double forward, double turn) {\n        // Curvature drive for better turning control\n        boolean isQuickTurn = Math.abs(turn) > 0.5;\n        m_drive.curvatureDrive(forward, turn, isQuickTurn);\n    }\n    \n    public enum DriveMode {\n        ARCADE, TANK, CURVATURE\n    }\n}"
    },
    {
      "type": "rules-box",
      "title": "Drivetrain Best Practices",
      "items": [
        "<strong>Always use deadzones:</strong> Prevents motor drift from controller noise",
        "<strong>Set current limits:</strong> Protects motors and electronics from damage",
        "<strong>Use safety timeouts:</strong> Ensures motors stop if communication is lost",
        "<strong>Test motor directions:</strong> Verify all motors turn in the correct direction",
        "<strong>Calibrate speed:</strong> Adjust speed multipliers for your robot's characteristics",
        "<strong>Monitor current draw:</strong> Watch for excessive current that could indicate problems"
      ],
      "subtitle": "Follow these guidelines for reliable drivetrain operation:"
    },
    {
      "type": "exercise-box",
      "title": "Drivetrain Practice",
      "description": "Implement and test different drivetrain configurations and control schemes.",
      "tasks": [
        "Create a basic differential drive with your preferred motor controllers",
        "Implement arcade drive with proper deadzone and speed limiting",
        "Add tank drive as an alternative control scheme",
        "Implement speed control with different multipliers",
        "Add a drive mode selector (arcade/tank/curvature)",
        "If you have mecanum wheels, implement mecanum drive",
        "Add comprehensive SmartDashboard outputs for debugging",
        "Test different speed modes and drive configurations",
        "Add current monitoring and safety features",
        "Create a simple autonomous drive sequence"
      ],
      "code": "// Example OI integration for drive mode selection:\n\n// In your OI class:\npublic boolean getDriveModeToggle() {\n    return m_driverController.getStartButtonPressed();\n}\n\npublic boolean getSpeedModeSlow() {\n    return m_driverController.getLeftBumper();\n}\n\npublic boolean getSpeedModeFast() {\n    return m_driverController.getRightBumper();\n}\n\n// In your Robot class teleopPeriodic():\n// Handle drive mode selection\nif (m_oi.getDriveModeToggle()) {\n    if (m_drivetrain.getDriveMode() == DriveMode.ARCADE) {\n        m_drivetrain.setDriveMode(DriveMode.TANK);\n    } else {\n        m_drivetrain.setDriveMode(DriveMode.ARCADE);\n    }\n}\n\n// Handle speed mode selection\nif (m_oi.getSpeedModeSlow()) {\n    m_drivetrain.setSpeedMode(SpeedMode.SLOW);\n} else if (m_oi.getSpeedModeFast()) {\n    m_drivetrain.setSpeedMode(SpeedMode.FAST);\n} else {\n    m_drivetrain.setSpeedMode(SpeedMode.MEDIUM);\n}\n\n// Drive the robot\nif (m_drivetrain.getDriveMode() == DriveMode.ARCADE) {\n    m_drivetrain.arcadeDrive(m_oi.getLeftY(), m_oi.getRightX());\n} else {\n    m_drivetrain.tankDrive(m_oi.getLeftY(), m_oi.getRightY());\n}"
    }
  ]
}