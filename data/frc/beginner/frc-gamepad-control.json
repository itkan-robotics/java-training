{
  "title": "Gamepad Control and Input Handling",
  "sections": [
    {
      "type": "text",
      "title": "Understanding FRC Controller Input",
      "content": "FRC robots are controlled using gamepads, typically Xbox controllers. Understanding how to read and process controller input is essential for creating responsive and intuitive robot control systems."
    },
    {
      "type": "rules-box",
      "title": "FRC Controller Setup",
      "items": [
        "<strong>Xbox Controllers:</strong> Most common, reliable, and well-supported",
        "<strong>Driver Station:</strong> Software that connects controllers to the robot",
        "<strong>Multiple Controllers:</strong> Often use separate controllers for driver and operator",
        "<strong>Button Mapping:</strong> Strategic assignment of functions to controller inputs"
      ],
      "subtitle": "FRC teams typically use:"
    },
    {
      "type": "text",
      "title": "Xbox Controller Basics",
      "content": "The Xbox controller provides several types of input that you can use to control your robot. Understanding these inputs helps you design effective control schemes."
    },
    {
      "type": "code",
      "title": "Xbox Controller Input Types",
      "content": "// Analog inputs (return values from -1.0 to 1.0)\n// Left stick\ncontroller.getLeftX();      // Left/right movement\ncontroller.getLeftY();      // Up/down movement (inverted)\n\n// Right stick\ncontroller.getRightX();     // Left/right movement\ncontroller.getRightY();     // Up/down movement (inverted)\n\n// Triggers (return values from 0.0 to 1.0)\ncontroller.getLeftTriggerAxis();   // Left trigger\ncontroller.getRightTriggerAxis();  // Right trigger\n\n// Digital inputs (return true/false)\ncontroller.getAButton();           // A button\ncontroller.getBButton();           // B button\ncontroller.getXButton();           // X button\ncontroller.getYButton();           // Y button\n\n// Bumpers\ncontroller.getLeftBumper();        // Left bumper\ncontroller.getRightBumper();       // Right bumper\n\n// D-pad\ncontroller.getPOV();               // Returns angle (0-360 degrees)\n\n// Start/Back buttons\ncontroller.getStartButton();       // Start button\ncontroller.getBackButton();        // Back button\n\n// Stick buttons\ncontroller.getLeftStickButton();   // Left stick press\ncontroller.getRightStickButton();  // Right stick press"
    },
    {
      "type": "text",
      "title": "Creating an Operator Interface",
      "content": "The Operator Interface (OI) class centralizes all controller input handling. This makes your code more organized and easier to modify."
    },
    {
      "type": "code",
      "title": "Basic OI Class",
      "content": "package frc.robot;\n\nimport edu.wpi.first.wpilibj.XboxController;\nimport edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\n\npublic class OI {\n    // Controllers\n    private final XboxController m_driverController = new XboxController(0);\n    private final XboxController m_operatorController = new XboxController(1);\n    \n    // Deadzone\n    private static final double DEADZONE = 0.1;\n    \n    public OI() {\n        SmartDashboard.putString(\"OI Status\", \"Initialized\");\n    }\n    \n    // Driver controls\n    public double getDriverLeftY() {\n        return applyDeadzone(-m_driverController.getLeftY());\n    }\n    \n    public double getDriverRightX() {\n        return applyDeadzone(m_driverController.getRightX());\n    }\n    \n    public double getDriverLeftX() {\n        return applyDeadzone(m_driverController.getLeftX());\n    }\n    \n    public double getDriverRightY() {\n        return applyDeadzone(-m_driverController.getRightY());\n    }\n    \n    // Operator controls\n    public double getOperatorLeftY() {\n        return applyDeadzone(-m_operatorController.getLeftY());\n    }\n    \n    public double getOperatorRightY() {\n        return applyDeadzone(-m_operatorController.getRightY());\n    }\n    \n    // Button controls\n    public boolean getDriverA() {\n        return m_driverController.getAButton();\n    }\n    \n    public boolean getDriverB() {\n        return m_driverController.getBButton();\n    }\n    \n    public boolean getOperatorA() {\n        return m_operatorController.getAButton();\n    }\n    \n    public boolean getOperatorB() {\n        return m_operatorController.getBButton();\n    }\n    \n    // Trigger controls\n    public double getDriverLeftTrigger() {\n        return m_driverController.getLeftTriggerAxis();\n    }\n    \n    public double getDriverRightTrigger() {\n        return m_driverController.getRightTriggerAxis();\n    }\n    \n    // Bumper controls\n    public boolean getDriverLeftBumper() {\n        return m_driverController.getLeftBumper();\n    }\n    \n    public boolean getDriverRightBumper() {\n        return m_driverController.getRightBumper();\n    }\n    \n    // D-pad controls\n    public int getDriverPOV() {\n        return m_driverController.getPOV();\n    }\n    \n    // Utility methods\n    private double applyDeadzone(double value) {\n        if (Math.abs(value) < DEADZONE) {\n            return 0.0;\n        }\n        return value;\n    }\n    \n    // Update dashboard with controller status\n    public void updateDashboard() {\n        SmartDashboard.putNumber(\"Driver Left Y\", getDriverLeftY());\n        SmartDashboard.putNumber(\"Driver Right X\", getDriverRightX());\n        SmartDashboard.putBoolean(\"Driver A\", getDriverA());\n        SmartDashboard.putBoolean(\"Driver B\", getDriverB());\n        SmartDashboard.putNumber(\"Operator Left Y\", getOperatorLeftY());\n        SmartDashboard.putBoolean(\"Operator A\", getOperatorA());\n    }\n}"
    },
    {
      "type": "text",
      "title": "Advanced Input Processing",
      "content": "Beyond basic input reading, you can implement advanced features like button debouncing, toggle controls, and input scaling for better robot control."
    },
    {
      "type": "code",
      "title": "Advanced OI Features",
      "content": "public class OI {\n    // ... existing controller declarations ...\n    \n    // Toggle states\n    private boolean m_driveModeToggle = false;\n    private boolean m_speedModeToggle = false;\n    private boolean m_lastDriveModeButton = false;\n    private boolean m_lastSpeedModeButton = false;\n    \n    // Input scaling\n    private double m_inputScaling = 1.0;\n    \n    // Toggle methods\n    public boolean getDriveModeToggle() {\n        boolean currentButton = m_driverController.getStartButton();\n        if (currentButton && !m_lastDriveModeButton) {\n            m_driveModeToggle = !m_driveModeToggle;\n        }\n        m_lastDriveModeButton = currentButton;\n        return m_driveModeToggle;\n    }\n    \n    public boolean getSpeedModeToggle() {\n        boolean currentButton = m_driverController.getBackButton();\n        if (currentButton && !m_lastSpeedModeButton) {\n            m_speedModeToggle = !m_speedModeToggle;\n        }\n        m_lastSpeedModeButton = currentButton;\n        return m_speedModeToggle;\n    }\n    \n    // Scaled input methods\n    public double getScaledDriverLeftY() {\n        return getDriverLeftY() * m_inputScaling;\n    }\n    \n    public double getScaledDriverRightX() {\n        return getDriverRightX() * m_inputScaling;\n    }\n    \n    // Set input scaling\n    public void setInputScaling(double scaling) {\n        m_inputScaling = Math.max(0.0, Math.min(1.0, scaling));\n    }\n    \n    // Button press detection (only true on first press)\n    public boolean getDriverAPressed() {\n        return m_driverController.getAButtonPressed();\n    }\n    \n    public boolean getDriverBReleased() {\n        return m_driverController.getBButtonReleased();\n    }\n    \n    // D-pad direction methods\n    public boolean getDriverPOVUp() {\n        return m_driverController.getPOV() == 0;\n    }\n    \n    public boolean getDriverPOVDown() {\n        return m_driverController.getPOV() == 180;\n    }\n    \n    public boolean getDriverPOVLeft() {\n        return m_driverController.getPOV() == 270;\n    }\n    \n    public boolean getDriverPOVRight() {\n        return m_driverController.getPOV() == 90;\n    }\n}"
    },
    {
      "type": "text",
      "title": "Control Scheme Design",
      "content": "Designing an effective control scheme is crucial for robot performance. Consider ergonomics, driver preferences, and the specific requirements of your robot's mechanisms."
    },
    {
      "type": "code",
      "title": "Example Control Scheme",
      "content": "public class OI {\n    // ... existing controller declarations ...\n    \n    // Drivetrain controls (Driver)\n    public double getDriveForward() {\n        return getDriverLeftY();\n    }\n    \n    public double getDriveTurn() {\n        return getDriverRightX();\n    }\n    \n    public double getDriveStrafe() {\n        return getDriverLeftX();\n    }\n    \n    // Speed control (Driver)\n    public boolean getSlowMode() {\n        return m_driverController.getLeftBumper();\n    }\n    \n    public boolean getFastMode() {\n        return m_driverController.getRightBumper();\n    }\n    \n    // Arm controls (Operator)\n    public double getArmManual() {\n        return getOperatorLeftY();\n    }\n    \n    public boolean getArmUp() {\n        return m_operatorController.getRightBumper();\n    }\n    \n    public boolean getArmDown() {\n        return m_operatorController.getLeftBumper();\n    }\n    \n    // Arm position presets (Operator)\n    public boolean getArmGround() {\n        return m_operatorController.getAButton();\n    }\n    \n    public boolean getArmLowScore() {\n        return m_operatorController.getBButton();\n    }\n    \n    public boolean getArmHighScore() {\n        return m_operatorController.getXButton();\n    }\n    \n    // Intake controls (Operator)\n    public boolean getIntakeIn() {\n        return m_operatorController.getRightTriggerAxis() > 0.5;\n    }\n    \n    public boolean getIntakeOut() {\n        return m_operatorController.getLeftTriggerAxis() > 0.5;\n    }\n    \n    // Autonomous controls (Driver)\n    public boolean getAutoStart() {\n        return getDriverAPressed();\n    }\n    \n    // Emergency stop (Both controllers)\n    public boolean getEmergencyStop() {\n        return m_driverController.getStartButton() && m_operatorController.getStartButton();\n    }\n}"
    },
    {
      "type": "text",
      "title": "Input Validation and Safety",
      "content": "Implementing input validation and safety features helps prevent accidents and ensures reliable robot operation."
    },
    {
      "type": "code",
      "title": "Safety Features",
      "content": "public class OI {\n    // ... existing controller declarations ...\n    \n    // Safety features\n    private boolean m_emergencyStop = false;\n    private double m_lastValidInput = 0.0;\n    private static final double MAX_INPUT_CHANGE = 0.5; // Maximum change per cycle\n    \n    // Input validation\n    public double getValidatedInput(double rawInput) {\n        // Check for emergency stop\n        if (m_emergencyStop) {\n            return 0.0;\n        }\n        \n        // Limit rate of change\n        double maxChange = MAX_INPUT_CHANGE;\n        double minChange = -MAX_INPUT_CHANGE;\n        \n        double change = rawInput - m_lastValidInput;\n        if (change > maxChange) {\n            change = maxChange;\n        } else if (change < minChange) {\n            change = minChange;\n        }\n        \n        double validatedInput = m_lastValidInput + change;\n        m_lastValidInput = validatedInput;\n        \n        return validatedInput;\n    }\n    \n    // Emergency stop handling\n    public boolean checkEmergencyStop() {\n        // Check for emergency stop conditions\n        boolean emergencyStopPressed = m_driverController.getStartButton() && \n                                      m_operatorController.getStartButton();\n        \n        if (emergencyStopPressed) {\n            m_emergencyStop = true;\n            SmartDashboard.putString(\"Safety Status\", \"EMERGENCY STOP ACTIVATED\");\n        }\n        \n        return m_emergencyStop;\n    }\n    \n    // Reset emergency stop\n    public void resetEmergencyStop() {\n        m_emergencyStop = false;\n        SmartDashboard.putString(\"Safety Status\", \"Normal Operation\");\n    }\n    \n    // Safe input methods\n    public double getSafeDriveForward() {\n        return getValidatedInput(getDriveForward());\n    }\n    \n    public double getSafeDriveTurn() {\n        return getValidatedInput(getDriveTurn());\n    }\n}"
    },
    {
      "type": "text",
      "title": "Multi-Controller Coordination",
      "content": "When using multiple controllers, it's important to coordinate their inputs and avoid conflicts. Clear role separation helps prevent confusion."
    },
    {
      "type": "code",
      "title": "Multi-Controller Setup",
      "content": "public class OI {\n    // ... existing controller declarations ...\n    \n    // Controller roles\n    public enum ControllerRole {\n        DRIVER, OPERATOR, BOTH\n    }\n    \n    // Check if controller is connected\n    public boolean isDriverConnected() {\n        return m_driverController.isConnected();\n    }\n    \n    public boolean isOperatorConnected() {\n        return m_operatorController.isConnected();\n    }\n    \n    // Fallback controls (if one controller is disconnected)\n    public double getFallbackDriveForward() {\n        if (isDriverConnected()) {\n            return getDriveForward();\n        } else if (isOperatorConnected()) {\n            return getOperatorLeftY();\n        }\n        return 0.0;\n    }\n    \n    public double getFallbackDriveTurn() {\n        if (isDriverConnected()) {\n            return getDriveTurn();\n        } else if (isOperatorConnected()) {\n            return getOperatorRightX();\n        }\n        return 0.0;\n    }\n    \n    // Update dashboard with controller status\n    @Override\n    public void updateDashboard() {\n        super.updateDashboard();\n        \n        SmartDashboard.putBoolean(\"Driver Connected\", isDriverConnected());\n        SmartDashboard.putBoolean(\"Operator Connected\", isOperatorConnected());\n        SmartDashboard.putBoolean(\"Emergency Stop\", m_emergencyStop);\n        SmartDashboard.putNumber(\"Input Scaling\", m_inputScaling);\n        \n        // Show active control scheme\n        if (m_emergencyStop) {\n            SmartDashboard.putString(\"Control Status\", \"EMERGENCY STOP\");\n        } else if (!isDriverConnected() && !isOperatorConnected()) {\n            SmartDashboard.putString(\"Control Status\", \"NO CONTROLLERS\");\n        } else if (!isDriverConnected()) {\n            SmartDashboard.putString(\"Control Status\", \"OPERATOR ONLY\");\n        } else if (!isOperatorConnected()) {\n            SmartDashboard.putString(\"Control Status\", \"DRIVER ONLY\");\n        } else {\n            SmartDashboard.putString(\"Control Status\", \"DUAL CONTROLLER\");\n        }\n    }\n}"
    },
    {
      "type": "rules-box",
      "title": "Controller Best Practices",
      "items": [
        "<strong>Use deadzones:</strong> Prevent unwanted movement from controller drift",
        "<strong>Implement toggles:</strong> Use button toggles for mode switching",
        "<strong>Add safety features:</strong> Include emergency stop and input validation",
        "<strong>Test with drivers:</strong> Get feedback from actual robot drivers",
        "<strong>Document controls:</strong> Create a control scheme diagram for your team",
        "<strong>Plan for failures:</strong> Handle controller disconnection gracefully"
      ],
      "subtitle": "Follow these guidelines for effective controller programming:"
    },
    {
      "type": "exercise-box",
      "title": "Controller Practice",
      "description": "Implement comprehensive controller input handling with advanced features.",
      "tasks": [
        "Create a basic OI class with driver and operator controllers",
        "Implement deadzone and input scaling",
        "Add button toggle functionality for drive modes",
        "Create a comprehensive control scheme for your robot",
        "Implement emergency stop functionality",
        "Add input validation and rate limiting",
        "Handle controller disconnection gracefully",
        "Create SmartDashboard outputs for controller status",
        "Test different control schemes with your team",
        "Document your control scheme for team reference"
      ],
      "content": "// Example integration in Robot class:\n\n@Override\npublic void teleopPeriodic() {\n    // Check for emergency stop\n    if (m_oi.checkEmergencyStop()) {\n        // Stop all subsystems\n        m_drivetrain.stop();\n        m_arm.stop();\n        m_intake.stop();\n        return;\n    }\n    \n    // Handle drive mode toggles\n    if (m_oi.getDriveModeToggle()) {\n        // Switch between arcade and tank drive\n        m_currentDriveMode = (m_currentDriveMode == DriveMode.ARCADE) ? \n                             DriveMode.TANK : DriveMode.ARCADE;\n    }\n    \n    // Handle speed mode toggles\n    if (m_oi.getSpeedModeToggle()) {\n        // Switch between speed modes\n        m_currentSpeedMode = (m_currentSpeedMode == SpeedMode.NORMAL) ? \n                             SpeedMode.SLOW : SpeedMode.NORMAL;\n    }\n    \n    // Drive the robot based on current mode\n    switch (m_currentDriveMode) {\n        case ARCADE:\n            m_drivetrain.arcadeDrive(\n                m_oi.getSafeDriveForward(), \n                m_oi.getSafeDriveTurn()\n            );\n            break;\n        case TANK:\n            m_drivetrain.tankDrive(\n                m_oi.getDriverLeftY(), \n                m_oi.getDriverRightY()\n            );\n            break;\n    }\n    \n    // Handle operator controls\n    if (m_oi.getArmUp()) {\n        m_arm.moveUp();\n    } else if (m_oi.getArmDown()) {\n        m_arm.moveDown();\n    } else {\n        m_arm.stop();\n    }\n    \n    // Update dashboard\n    m_oi.updateDashboard();\n}"
    }
  ]
}
