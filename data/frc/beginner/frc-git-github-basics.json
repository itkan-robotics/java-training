{
  "title": "Git and GitHub Basics for FRC",
  "sections": [
    {
      "type": "text",
      "title": "Why Version Control Matters",
      "content": "Version control is essential for FRC teams. It allows multiple programmers to work on the same codebase, tracks changes over time, and provides a safety net when things go wrong. Git is the most popular version control system, and GitHub is a platform for hosting Git repositories."
    },
    {
      "type": "rules-box",
      "title": "Benefits of Git for FRC",
      "items": [
        "<strong>Team Collaboration:</strong> Multiple programmers can work simultaneously",
        "<strong>Change Tracking:</strong> See what changed, when, and by whom",
        "<strong>Backup:</strong> Your code is safely stored in the cloud",
        "<strong>Rollback:</strong> Easily revert to previous working versions",
        "<strong>Branching:</strong> Test new features without affecting main code",
        "<strong>Code Review:</strong> Team members can review changes before merging"
      ],
      "subtitle": "Using Git and GitHub provides several advantages:"
    },
    {
      "type": "text",
      "title": "Setting Up Git",
      "content": "Before you can use Git, you need to install it and configure your identity. Git is usually included with the WPILib installer, but you may need to configure it."
    },
    {
      "type": "code",
      "title": "Git Configuration",
      "content": "// Open a terminal or command prompt and run:\n\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n\n// Verify your configuration:\ngit config --list"
    },
    {
      "type": "text",
      "title": "Creating a GitHub Repository",
      "content": "GitHub is where you'll store your robot code. Creating a repository is the first step to getting your code online."
    },
    {
      "type": "code",
      "title": "GitHub Repository Setup",
      "content": "1. Go to github.com and sign in (or create an account)\n2. Click the '+' icon and select 'New repository'\n3. Name your repository (e.g., 'frc-team-1234-2024')\n4. Make it private (recommended for FRC teams)\n5. Don't initialize with README (we'll do this locally)\n6. Click 'Create repository'\n\nNote: Use a descriptive name that includes your team number and year."
    },
    {
      "type": "text",
      "title": "Initializing Your Robot Project with Git",
      "content": "Once you have a GitHub repository, you need to connect your local robot project to it. This allows you to push your code to GitHub and pull changes from other team members."
    },
    {
      "type": "code",
      "title": "Connecting Local Project to GitHub",
      "content": "// In your robot project directory:\n\ngit init\ngit add .\ngit commit -m \"Initial commit - basic robot structure\"\n\ngit branch -M main\ngit remote add origin https://github.com/yourusername/frc-team-1234-2024.git\ngit push -u origin main\n\n// Verify the connection:\ngit remote -v"
    },
    {
      "type": "text",
      "title": "Basic Git Workflow",
      "content": "The basic Git workflow involves three main steps: staging changes, committing them, and pushing to GitHub. Understanding this workflow is crucial for effective team collaboration."
    },
    {
      "type": "code",
      "title": "Daily Git Workflow",
      "content": "// 1. Check what files have changed\ngit status\n\n// 2. Add files to staging area\ngit add .                    // Add all changes\ngit add src/main/java/       // Add specific directory\ngit add Robot.java           // Add specific file\n\n// 3. Commit your changes\ngit commit -m \"Added drivetrain control\"\n\n// 4. Push to GitHub\ngit push\n\n// 5. Pull changes from other team members\ngit pull"
    },
    {
      "type": "text",
      "title": "Understanding Git Status",
      "content": "The `git status` command shows you the current state of your repository. It tells you which files have been modified, which are staged for commit, and which are untracked."
    },
    {
      "type": "code",
      "title": "Git Status Examples",
      "content": "// Example 1: Clean working directory\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nnothing to commit, working tree clean\n\n// Example 2: Modified files\nOn branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   src/main/java/frc/robot/Robot.java\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n// Example 3: Staged changes\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        modified:   src/main/java/frc/robot/Robot.java\n\n// Example 4: Untracked files\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        src/main/java/frc/robot/subsystems/Drivetrain.java"
    },
    {
      "type": "text",
      "title": "Writing Good Commit Messages",
      "content": "Good commit messages help your team understand what changes were made and why. They're especially important when debugging or reviewing code."
    },
    {
      "type": "code",
      "title": "Commit Message Guidelines",
      "content": "// Good commit messages:\ngit commit -m \"Add tank drive control to Robot.java\"\ngit commit -m \"Fix motor inversion in drivetrain\"\ngit commit -m \"Update autonomous sequence for new game elements\"\ngit commit -m \"Add PID controller for arm positioning\"\n\n// Bad commit messages:\ngit commit -m \"stuff\"\ngit commit -m \"fixed it\"\ngit commit -m \"update\"\ngit commit -m \"changes\"\n\n// Use present tense and be specific about what changed."
    },
    {
      "type": "text",
      "title": "Working with Branches",
      "content": "Branches allow you to work on new features without affecting the main codebase. This is especially useful when multiple team members are working on different features."
    },
    {
      "type": "code",
      "title": "Branch Operations",
      "content": "// Create and switch to a new branch\ngit checkout -b feature/autonomous-routine\n\n// List all branches\ngit branch\n\n// Switch between branches\ngit checkout main\ngit checkout feature/autonomous-routine\n\n// Merge a branch back to main\ngit checkout main\ngit merge feature/autonomous-routine\n\n// Delete a branch after merging\ngit branch -d feature/autonomous-routine"
    },
    {
      "type": "text",
      "title": "Handling Conflicts",
      "content": "Conflicts occur when two people modify the same part of the code. Git will mark conflicts in the file, and you need to resolve them manually."
    },
    {
      "type": "code",
      "title": "Resolving Merge Conflicts",
      "content": "// When a conflict occurs, Git marks it like this:\n<<<<<<< HEAD\n    // Your local changes\n    leftMotor.set(0.5);\n=======\n    // Changes from remote\n    leftMotor.set(0.7);\n>>>>>>> origin/main\n\n// To resolve:\n// 1. Edit the file to remove conflict markers\n// 2. Choose which version to keep (or combine them)\n// 3. Save the file\n// 4. Add and commit the resolved file\n\ngit add Robot.java\ngit commit -m \"Resolve merge conflict in Robot.java\""
    },
    {
      "type": "text",
      "title": "Using .gitignore",
      "content": "The `.gitignore` file tells Git which files to ignore. This is important for FRC projects to avoid committing build artifacts and temporary files."
    },
    {
      "type": "code",
      "title": "FRC .gitignore Example",
      "content": "# Build directories\nbuild/\n.gradle/\n\n# IDE files\n.vscode/\n.idea/\n*.iml\n\n# OS files\n.DS_Store\nThumbs.db\n\n# Log files\n*.log\n\n# Temporary files\n*.tmp\n*.temp\n\n# Robot-specific files\nrobotConfig.txt\n\n# AdvantageKit logs\nlogs/\n\n# Simulation files\nsimulation/\n\n# Deploy artifacts\n*.jar\n*.exe"
    },
    {
      "type": "rules-box",
      "title": "Team Collaboration Best Practices",
      "items": [
        "<strong>Pull before you push:</strong> Always get the latest changes first",
        "<strong>Use descriptive branch names:</strong> feature/autonomous, bugfix/motor-inversion",
        "<strong>Commit frequently:</strong> Small, focused commits are better than large ones",
        "<strong>Test before committing:</strong> Make sure your code works",
        "<strong>Communicate with your team:</strong> Let others know what you're working on",
        "<strong>Use pull requests:</strong> For important changes, create a pull request for review"
      ],
      "subtitle": "Follow these guidelines for effective team collaboration:"
    },
    {
      "type": "exercise-box",
      "title": "Git Practice",
      "description": "Complete these exercises to get familiar with Git and GitHub workflow.",
      "tasks": [
        "Set up Git with your name and email",
        "Create a GitHub repository for your team",
        "Initialize your robot project with Git",
        "Make a small change to your robot code",
        "Commit and push the change to GitHub",
        "Create a new branch for a feature",
        "Make changes on the branch and merge back to main",
        "Practice resolving a simple merge conflict",
        "Set up a proper .gitignore file for your project",
        "Invite team members to your GitHub repository"
      ],
      "code": "// Example workflow for adding a simple feature:\n\n// 1. Create a feature branch\ngit checkout -b feature/smart-dashboard\n\n// 2. Make your changes to Robot.java\n// Add SmartDashboard outputs\n\n// 3. Check status\ngit status\n\n// 4. Add and commit\ngit add .\ngit commit -m \"Add SmartDashboard telemetry for robot status\"\n\n// 5. Push the branch\ngit push -u origin feature/smart-dashboard\n\n// 6. Switch back to main and merge\ngit checkout main\ngit merge feature/smart-dashboard\n\n// 7. Push the merged changes\ngit push\n\n// 8. Clean up\ngit branch -d feature/smart-dashboard"
    }
  ]
}