{
  "title": "Basic Sensors and Feedback",
  "sections": [
    {
      "type": "text",
      "title": "Understanding FRC Sensors",
      "content": "Sensors provide feedback about your robot's position, movement, and environment. Understanding how to use sensors effectively is crucial for creating autonomous behaviors and precise robot control."
    },
    {
      "type": "rules-box",
      "title": "Common FRC Sensors",
      "items": [
        "<strong>Encoders:</strong> Measure motor rotation and distance traveled",
        "<strong>Gyroscopes:</strong> Measure robot orientation and rotation",
        "<strong>Limit Switches:</strong> Detect when mechanisms reach end positions",
        "<strong>Potentiometers:</strong> Measure angular position of mechanisms",
        "<strong>Ultrasonic Sensors:</strong> Measure distance to objects",
        "<strong>Color Sensors:</strong> Detect game elements and field features"
      ],
      "subtitle": "FRC robots typically use these sensors:"
    },
    {
      "type": "text",
      "title": "Encoders",
      "content": "Encoders are the most common sensors in FRC. They measure how much a motor has rotated, allowing you to track position, speed, and distance traveled."
    },
    {
      "type": "code",
      "title": "Basic Encoder Implementation",
      "content": "package frc.robot.subsystems;\n\nimport edu.wpi.first.wpilibj.Encoder;\nimport edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\n\npublic class Drivetrain {\n    // Motor controllers\n    private final CANSparkMax m_leftMotor = new CANSparkMax(1, MotorType.kBrushless);\n    private final CANSparkMax m_rightMotor = new CANSparkMax(2, MotorType.kBrushless);\n    \n    // Encoders\n    private final Encoder m_leftEncoder = new Encoder(0, 1); // DIO ports 0 and 1\n    private final Encoder m_rightEncoder = new Encoder(2, 3); // DIO ports 2 and 3\n    \n    // Encoder configuration\n    private static final double WHEEL_DIAMETER_INCHES = 6.0;\n    private static final double GEAR_RATIO = 10.71; // Example gear ratio\n    private static final double ENCODER_PULSES_PER_REVOLUTION = 4096; // For quadrature encoder\n    \n    public Drivetrain() {\n        // Configure encoders\n        m_leftEncoder.setDistancePerPulse(\n            (Math.PI * WHEEL_DIAMETER_INCHES) / (GEAR_RATIO * ENCODER_PULSES_PER_REVOLUTION)\n        );\n        m_rightEncoder.setDistancePerPulse(\n            (Math.PI * WHEEL_DIAMETER_INCHES) / (GEAR_RATIO * ENCODER_PULSES_PER_REVOLUTION)\n        );\n        \n        // Set encoder direction (may need to be reversed)\n        m_leftEncoder.setReverseDirection(false);\n        m_rightEncoder.setReverseDirection(true);\n        \n        // Reset encoders to zero\n        resetEncoders();\n        \n        SmartDashboard.putString(\"Drivetrain Status\", \"Encoders Initialized\");\n    }\n    \n    public void resetEncoders() {\n        m_leftEncoder.reset();\n        m_rightEncoder.reset();\n    }\n    \n    public double getLeftDistance() {\n        return m_leftEncoder.getDistance();\n    }\n    \n    public double getRightDistance() {\n        return m_rightEncoder.getDistance();\n    }\n    \n    public double getAverageDistance() {\n        return (getLeftDistance() + getRightDistance()) / 2.0;\n    }\n    \n    public double getLeftSpeed() {\n        return m_leftEncoder.getRate();\n    }\n    \n    public double getRightSpeed() {\n        return m_rightEncoder.getRate();\n    }\n    \n    public double getAverageSpeed() {\n        return (getLeftSpeed() + getRightSpeed()) / 2.0;\n    }\n    \n    public void updateDashboard() {\n        SmartDashboard.putNumber(\"Left Distance (inches)\", getLeftDistance());\n        SmartDashboard.putNumber(\"Right Distance (inches)\", getRightDistance());\n        SmartDashboard.putNumber(\"Average Distance (inches)\", getAverageDistance());\n        SmartDashboard.putNumber(\"Left Speed (in/s)\", getLeftSpeed());\n        SmartDashboard.putNumber(\"Right Speed (in/s)\", getRightSpeed());\n        SmartDashboard.putNumber(\"Average Speed (in/s)\", getAverageSpeed());\n    }\n}"
    },
    {
      "type": "text",
      "title": "Gyroscopes",
      "content": "Gyroscopes measure the robot's orientation and rotation rate. They're essential for maintaining straight paths and executing precise turns."
    },
    {
      "type": "code",
      "title": "Gyroscope Implementation",
      "content": "package frc.robot.subsystems;\n\nimport edu.wpi.first.wpilibj.ADXRS450_Gyro;\nimport edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\n\npublic class Drivetrain {\n    // ... existing motor and encoder declarations ...\n    \n    // Gyroscope\n    private final ADXRS450_Gyro m_gyro = new ADXRS450_Gyro();\n    \n    public Drivetrain() {\n        // ... existing initialization ...\n        \n        // Calibrate gyro (this takes a few seconds)\n        SmartDashboard.putString(\"Gyro Status\", \"Calibrating...\");\n        m_gyro.calibrate();\n        SmartDashboard.putString(\"Gyro Status\", \"Calibrated\");\n    }\n    \n    public void resetGyro() {\n        m_gyro.reset();\n    }\n    \n    public double getGyroAngle() {\n        return m_gyro.getAngle(); // Returns angle in degrees\n    }\n    \n    public double getGyroRate() {\n        return m_gyro.getRate(); // Returns rotation rate in degrees/second\n    }\n    \n    public double getGyroRadians() {\n        return Math.toRadians(getGyroAngle());\n    }\n    \n    // Helper method to normalize angle to -180 to +180 degrees\n    public double normalizeAngle(double angle) {\n        while (angle > 180) {\n            angle -= 360;\n        }\n        while (angle < -180) {\n            angle += 360;\n        }\n        return angle;\n    }\n    \n    // Turn to a specific angle\n    public void turnToAngle(double targetAngle) {\n        double currentAngle = normalizeAngle(getGyroAngle());\n        double error = normalizeAngle(targetAngle - currentAngle);\n        \n        // Simple proportional control (we'll cover PID later)\n        double turnSpeed = error * 0.02; // Proportional gain\n        \n        // Limit turn speed\n        turnSpeed = Math.max(-0.5, Math.min(0.5, turnSpeed));\n        \n        // Apply minimum speed to overcome friction\n        if (Math.abs(turnSpeed) > 0 && Math.abs(turnSpeed) < 0.1) {\n            turnSpeed = Math.signum(turnSpeed) * 0.1;\n        }\n        \n        // Drive the robot\n        m_drive.arcadeDrive(0, turnSpeed);\n    }\n    \n    @Override\n    public void updateDashboard() {\n        // ... existing encoder dashboard updates ...\n        \n        SmartDashboard.putNumber(\"Gyro Angle (degrees)\", getGyroAngle());\n        SmartDashboard.putNumber(\"Gyro Rate (deg/s)\", getGyroRate());\n        SmartDashboard.putNumber(\"Gyro Angle (radians)\", getGyroRadians());\n    }\n}"
    },
    {
      "type": "text",
      "title": "Limit Switches",
      "content": "Limit switches are simple sensors that detect when mechanisms reach their end positions. They're essential for safety and precise positioning."
    },
    {
      "type": "code",
      "title": "Limit Switch Implementation",
      "content": "package frc.robot.subsystems;\n\nimport edu.wpi.first.wpilibj.DigitalInput;\nimport edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\n\npublic class Arm {\n    // Motor controller\n    private final CANSparkMax m_armMotor = new CANSparkMax(3, MotorType.kBrushless);\n    \n    // Limit switches\n    private final DigitalInput m_lowerLimitSwitch = new DigitalInput(4); // DIO port 4\n    private final DigitalInput m_upperLimitSwitch = new DigitalInput(5); // DIO port 5\n    \n    // Arm state\n    private boolean m_atLowerLimit = false;\n    private boolean m_atUpperLimit = false;\n    \n    public Arm() {\n        // Configure motor\n        m_armMotor.setInverted(false);\n        m_armMotor.setSmartCurrentLimit(30);\n        \n        SmartDashboard.putString(\"Arm Status\", \"Initialized\");\n    }\n    \n    public void moveUp() {\n        // Check upper limit switch before moving up\n        if (!m_atUpperLimit) {\n            m_armMotor.set(0.5);\n        } else {\n            m_armMotor.set(0);\n        }\n    }\n    \n    public void moveDown() {\n        // Check lower limit switch before moving down\n        if (!m_atLowerLimit) {\n            m_armMotor.set(-0.5);\n        } else {\n            m_armMotor.set(0);\n        }\n    }\n    \n    public void stop() {\n        m_armMotor.set(0);\n    }\n    \n    public boolean isAtLowerLimit() {\n        return m_lowerLimitSwitch.get(); // Returns true when pressed\n    }\n    \n    public boolean isAtUpperLimit() {\n        return m_upperLimitSwitch.get(); // Returns true when pressed\n    }\n    \n    public void update() {\n        // Update limit switch states\n        m_atLowerLimit = isAtLowerLimit();\n        m_atUpperLimit = isAtUpperLimit();\n        \n        // Stop motor if at limits\n        if (m_atLowerLimit && m_armMotor.get() < 0) {\n            m_armMotor.set(0);\n        }\n        if (m_atUpperLimit && m_armMotor.get() > 0) {\n            m_armMotor.set(0);\n        }\n    }\n    \n    public void updateDashboard() {\n        SmartDashboard.putBoolean(\"Lower Limit Switch\", m_atLowerLimit);\n        SmartDashboard.putBoolean(\"Upper Limit Switch\", m_atUpperLimit);\n        SmartDashboard.putNumber(\"Arm Motor Speed\", m_armMotor.get());\n    }\n}"
    },
    {
      "type": "text",
      "title": "Potentiometers",
      "content": "Potentiometers measure angular position and are commonly used for arms and other rotating mechanisms. They provide continuous position feedback."
    },
    {
      "type": "code",
      "title": "Potentiometer Implementation",
      "content": "package frc.robot.subsystems;\n\nimport edu.wpi.first.wpilibj.AnalogInput;\nimport edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\n\npublic class Arm {\n    // ... existing motor and limit switch declarations ...\n    \n    // Potentiometer\n    private final AnalogInput m_potentiometer = new AnalogInput(0); // Analog port 0\n    \n    // Potentiometer configuration\n    private static final double POT_VOLTAGE_AT_0_DEGREES = 0.0; // Voltage at 0 degrees\n    private static final double POT_VOLTAGE_AT_90_DEGREES = 5.0; // Voltage at 90 degrees\n    private static final double POT_ANGLE_OFFSET = 0.0; // Offset in degrees\n    \n    public Arm() {\n        // ... existing initialization ...\n        \n        // Configure potentiometer\n        m_potentiometer.setAverageBits(4); // Average 16 samples for stability\n        \n        SmartDashboard.putString(\"Arm Status\", \"Potentiometer Initialized\");\n    }\n    \n    public double getPotentiometerVoltage() {\n        return m_potentiometer.getAverageVoltage();\n    }\n    \n    public double getArmAngle() {\n        double voltage = getPotentiometerVoltage();\n        \n        // Convert voltage to angle\n        double angle = ((voltage - POT_VOLTAGE_AT_0_DEGREES) / \n                       (POT_VOLTAGE_AT_90_DEGREES - POT_VOLTAGE_AT_0_DEGREES)) * 90.0;\n        \n        // Apply offset\n        angle += POT_ANGLE_OFFSET;\n        \n        return angle;\n    }\n    \n    public double getArmAngleRadians() {\n        return Math.toRadians(getArmAngle());\n    }\n    \n    // Move arm to specific angle\n    public void moveToAngle(double targetAngle) {\n        double currentAngle = getArmAngle();\n        double error = targetAngle - currentAngle;\n        \n        // Simple proportional control\n        double speed = error * 0.02; // Proportional gain\n        \n        // Limit speed\n        speed = Math.max(-0.5, Math.min(0.5, speed));\n        \n        // Apply minimum speed\n        if (Math.abs(speed) > 0 && Math.abs(speed) < 0.1) {\n            speed = Math.signum(speed) * 0.1;\n        }\n        \n        // Check limit switches\n        if (speed > 0 && m_atUpperLimit) {\n            speed = 0;\n        }\n        if (speed < 0 && m_atLowerLimit) {\n            speed = 0;\n        }\n        \n        m_armMotor.set(speed);\n    }\n    \n    // Check if arm is at target angle (within tolerance)\n    public boolean isAtAngle(double targetAngle, double tolerance) {\n        return Math.abs(getArmAngle() - targetAngle) < tolerance;\n    }\n    \n    @Override\n    public void updateDashboard() {\n        // ... existing dashboard updates ...\n        \n        SmartDashboard.putNumber(\"Potentiometer Voltage\", getPotentiometerVoltage());\n        SmartDashboard.putNumber(\"Arm Angle (degrees)\", getArmAngle());\n        SmartDashboard.putNumber(\"Arm Angle (radians)\", getArmAngleRadians());\n    }\n}"
    },
    {
      "type": "text",
      "title": "Ultrasonic Sensors",
      "content": "Ultrasonic sensors measure distance to objects by sending sound waves and measuring the time for them to return. They're useful for detecting game elements and avoiding obstacles."
    },
    {
      "type": "code",
      "title": "Ultrasonic Sensor Implementation",
      "content": "package frc.robot.subsystems;\n\nimport edu.wpi.first.wpilibj.Ultrasonic;\nimport edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\n\npublic class Intake {\n    // Motor controller\n    private final CANSparkMax m_intakeMotor = new CANSparkMax(4, MotorType.kBrushless);\n    \n    // Ultrasonic sensor\n    private final Ultrasonic m_ultrasonic = new Ultrasonic(6, 7); // Trigger on DIO 6, Echo on DIO 7\n    \n    // Configuration\n    private static final double BALL_DETECTION_DISTANCE = 5.0; // inches\n    private static final double OBSTACLE_DETECTION_DISTANCE = 12.0; // inches\n    \n    public Intake() {\n        // Configure motor\n        m_intakeMotor.setInverted(false);\n        m_intakeMotor.setSmartCurrentLimit(20);\n        \n        // Configure ultrasonic sensor\n        m_ultrasonic.setAutomaticMode(true); // Enable automatic mode\n        \n        SmartDashboard.putString(\"Intake Status\", \"Ultrasonic Initialized\");\n    }\n    \n    public double getDistance() {\n        return m_ultrasonic.getRangeInches();\n    }\n    \n    public boolean isBallDetected() {\n        return getDistance() < BALL_DETECTION_DISTANCE;\n    }\n    \n    public boolean isObstacleDetected() {\n        return getDistance() < OBSTACLE_DETECTION_DISTANCE;\n    }\n    \n    public void intake() {\n        // Only run intake if no obstacle is detected\n        if (!isObstacleDetected()) {\n            m_intakeMotor.set(0.7);\n        } else {\n            m_intakeMotor.set(0);\n        }\n    }\n    \n    public void outtake() {\n        m_intakeMotor.set(-0.7);\n    }\n    \n    public void stop() {\n        m_intakeMotor.set(0);\n    }\n    \n    public void updateDashboard() {\n        SmartDashboard.putNumber(\"Ultrasonic Distance (inches)\", getDistance());\n        SmartDashboard.putBoolean(\"Ball Detected\", isBallDetected());\n        SmartDashboard.putBoolean(\"Obstacle Detected\", isObstacleDetected());\n        SmartDashboard.putNumber(\"Intake Motor Speed\", m_intakeMotor.get());\n    }\n}"
    },
    {
      "type": "text",
      "title": "Sensor Integration",
      "content": "Combining multiple sensors provides comprehensive feedback about your robot's state. This enables more sophisticated autonomous behaviors and precise control."
    },
    {
      "type": "code",
      "title": "Integrated Sensor System",
      "content": "public class Robot extends TimedRobot {\n    // ... existing subsystem declarations ...\n    \n    // Sensor data structure\n    public static class SensorData {\n        public double leftDistance;\n        public double rightDistance;\n        public double gyroAngle;\n        public double armAngle;\n        public boolean ballDetected;\n        public boolean atLowerLimit;\n        public boolean atUpperLimit;\n        public double ultrasonicDistance;\n    }\n    \n    private SensorData m_sensorData = new SensorData();\n    \n    @Override\n    public void robotPeriodic() {\n        // Update all sensor data\n        updateSensorData();\n        \n        // Update dashboards\n        m_drivetrain.updateDashboard();\n        m_arm.updateDashboard();\n        m_intake.updateDashboard();\n        \n        // Update integrated sensor display\n        updateIntegratedDashboard();\n    }\n    \n    private void updateSensorData() {\n        m_sensorData.leftDistance = m_drivetrain.getLeftDistance();\n        m_sensorData.rightDistance = m_drivetrain.getRightDistance();\n        m_sensorData.gyroAngle = m_drivetrain.getGyroAngle();\n        m_sensorData.armAngle = m_arm.getArmAngle();\n        m_sensorData.ballDetected = m_intake.isBallDetected();\n        m_sensorData.atLowerLimit = m_arm.isAtLowerLimit();\n        m_sensorData.atUpperLimit = m_arm.isAtUpperLimit();\n        m_sensorData.ultrasonicDistance = m_intake.getDistance();\n    }\n    \n    private void updateIntegratedDashboard() {\n        SmartDashboard.putString(\"Robot Status\", \"All Sensors Active\");\n        SmartDashboard.putNumber(\"Total Distance Traveled\", m_sensorData.leftDistance);\n        SmartDashboard.putNumber(\"Robot Heading\", m_sensorData.gyroAngle);\n        SmartDashboard.putString(\"Arm Position\", String.format(\"%.1f°\", m_sensorData.armAngle));\n        SmartDashboard.putString(\"Game Element Status\", \n            m_sensorData.ballDetected ? \"Ball Detected\" : \"No Ball\");\n    }\n    \n    // Example autonomous behavior using multiple sensors\n    private void runSensorBasedAutonomous() {\n        double matchTime = DriverStation.getMatchTime();\n        \n        if (matchTime > 13.0) {\n            // Drive forward while maintaining straight path\n            double gyroError = m_sensorData.gyroAngle; // Assuming 0 is straight\n            double turnCorrection = gyroError * 0.02;\n            m_drivetrain.arcadeDrive(0.5, turnCorrection);\n            \n        } else if (matchTime > 11.0) {\n            // Turn to face target\n            m_drivetrain.turnToAngle(90);\n            \n        } else if (matchTime > 9.0) {\n            // Move arm to scoring position\n            if (!m_sensorData.atUpperLimit) {\n                m_arm.moveToAngle(45);\n            }\n            \n        } else if (matchTime > 7.0) {\n            // Intake if ball is detected\n            if (m_sensorData.ballDetected) {\n                m_intake.intake();\n            }\n            \n        } else {\n            // Stop everything\n            m_drivetrain.stop();\n            m_arm.stop();\n            m_intake.stop();\n        }\n    }\n}"
    },
    {
      "type": "rules-box",
      "title": "Sensor Best Practices",
      "items": [
        "<strong>Calibrate sensors:</strong> Always calibrate sensors before use",
        "<strong>Handle sensor failures:</strong> Implement fallback behaviors when sensors fail",
        "<strong>Filter noisy data:</strong> Use averaging or filtering for stable readings",
        "<strong>Validate sensor data:</strong> Check for reasonable values before using data",
        "<strong>Update frequently:</strong> Read sensors every robot loop for responsive control",
        "<strong>Document sensor setup:</strong> Keep records of sensor configurations and calibrations"
      ],
      "subtitle": "Follow these guidelines for effective sensor usage:"
    },
    {
      "type": "exercise-box",
      "title": "Sensor Practice",
      "description": "Implement and test various sensors on your robot.",
      "tasks": [
        "Add encoders to your drivetrain and calibrate them",
        "Implement a gyroscope and test straight-line driving",
        "Add limit switches to your arm or elevator",
        "Install a potentiometer and create position control",
        "Add an ultrasonic sensor for obstacle detection",
        "Create a comprehensive sensor dashboard",
        "Implement sensor-based autonomous behaviors",
        "Add error handling for sensor failures",
        "Test sensor accuracy and reliability",
        "Create a sensor calibration routine"
      ],
      "content": "// Example sensor calibration routine:\n\npublic void calibrateSensors() {\n    SmartDashboard.putString(\"Calibration Status\", \"Starting...\");\n    \n    // Reset encoders\n    m_drivetrain.resetEncoders();\n    SmartDashboard.putString(\"Calibration Status\", \"Encoders Reset\");\n    \n    // Calibrate gyro\n    m_drivetrain.resetGyro();\n    SmartDashboard.putString(\"Calibration Status\", \"Gyro Reset\");\n    \n    // Test limit switches\n    boolean lowerLimitWorking = m_arm.isAtLowerLimit();\n    boolean upperLimitWorking = m_arm.isAtUpperLimit();\n    \n    SmartDashboard.putBoolean(\"Lower Limit Working\", lowerLimitWorking);\n    SmartDashboard.putBoolean(\"Upper Limit Working\", upperLimitWorking);\n    \n    // Test potentiometer\n    double potValue = m_arm.getArmAngle();\n    SmartDashboard.putNumber(\"Potentiometer Reading\", potValue);\n    \n    // Test ultrasonic\n    double ultrasonicValue = m_intake.getDistance();\n    SmartDashboard.putNumber(\"Ultrasonic Reading\", ultrasonicValue);\n    \n    SmartDashboard.putString(\"Calibration Status\", \"Complete\");\n}\n\n// Call this in robotInit() or testInit()\n@Override\npublic void testInit() {\n    calibrateSensors();\n}"
    }
  ]
}
