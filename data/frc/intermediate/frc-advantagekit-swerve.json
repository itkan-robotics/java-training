{
  "title": "AdvantageKit Swerve Drive Tuning",
  "sections": [
    {
      "type": "text",
      "title": "Introduction to AdvantageKit Swerve",
      "content": "AdvantageKit is a comprehensive library that provides advanced swerve drive implementations for FRC. It includes built-in odometry, path following, and advanced control algorithms that make swerve drive more accessible and powerful."
    },
    {
      "type": "rules-box",
      "title": "Why Use AdvantageKit Swerve?",
      "items": [
        "<strong>Built-in Odometry:</strong> Automatic pose estimation and tracking",
        "<strong>Advanced Control:</strong> Sophisticated control algorithms for smooth movement",
        "<strong>Path Following:</strong> Integrated path following with PathPlanner",
        "<strong>Multiple Configurations:</strong> Support for various swerve configurations",
        "<strong>Simulation Support:</strong> Built-in simulation for testing",
        "<strong>Active Development:</strong> Regular updates and community support"
      ],
      "subtitle": "AdvantageKit swerve provides:"
    },
    {
      "type": "text",
      "title": "Swerve Drive Basics",
      "content": "Swerve drive allows each wheel to rotate independently, enabling the robot to move in any direction while rotating. This provides superior maneuverability compared to traditional differential drive."
    },
    {
      "type": "list",
      "title": "Swerve Drive Components",
      "items": [
        "<strong>Swerve Modules:</strong> Each corner has a module with drive and steer motors",
        "<strong>Drive Motors:</strong> Control the speed of each wheel",
        "<strong>Steer Motors:</strong> Control the direction each wheel points",
        "<strong>Encoders:</strong> Provide feedback for position and velocity control",
        "<strong>Gyroscope:</strong> Measures robot orientation for field-relative control"
      ]
    },
    {
      "type": "text",
      "title": "AdvantageKit Setup",
      "content": "Setting up AdvantageKit requires adding dependencies and configuring your project."
    },
    {
      "type": "code",
      "title": "AdvantageKit Dependencies",
      "content": "// Add to build.gradle\nrepositories {\n    maven {\n        url \"https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit\"\n        credentials {\n            username = \"GITHUB_USERNAME\"\n            password = \"GITHUB_TOKEN\"\n        }\n    }\n}\n\ndependencies {\n    implementation \"com.mechanicaladvantage:AdvantageKit:2024.1.1-beta-3\"\n}"
    },
    {
      "type": "code",
      "title": "Basic Swerve Module Configuration",
      "content": "import com.mechanicaladvantage.swerve.SwerveModule;\nimport com.mechanicaladvantage.swerve.SwerveModuleConfiguration;\nimport com.ctre.phoenix.motorcontrol.can.TalonFX;\nimport com.ctre.phoenix.sensors.CANCoder;\n\npublic class SwerveModuleSubsystem extends SubsystemBase {\n  private final SwerveModule m_module;\n  \n  public SwerveModuleSubsystem(int driveMotorId, int steerMotorId, int encoderId, double encoderOffset) {\n    // Create motor controllers\n    TalonFX driveMotor = new TalonFX(driveMotorId);\n    TalonFX steerMotor = new TalonFX(steerMotorId);\n    CANCoder encoder = new CANCoder(encoderId);\n    \n    // Configure swerve module\n    SwerveModuleConfiguration config = new SwerveModuleConfiguration(\n      driveMotor,\n      steerMotor,\n      encoder,\n      encoderOffset,\n      0.5,  // Wheel diameter in meters\n      6.75, // Drive gear ratio\n      12.8, // Steer gear ratio\n      2048, // Drive encoder resolution\n      2048, // Steer encoder resolution\n      true, // Drive motor inverted\n      false // Steer motor inverted\n    );\n    \n    m_module = new SwerveModule(config);\n  }\n  \n  public void setDesiredState(SwerveModuleState desiredState) {\n    m_module.setDesiredState(desiredState);\n  }\n  \n  public SwerveModuleState getState() {\n    return m_module.getState();\n  }\n  \n  public SwerveModulePosition getPosition() {\n    return m_module.getPosition();\n  }\n}"
    },
    {
      "type": "text",
      "title": "Swerve Drive Subsystem",
      "content": "The main swerve drive subsystem coordinates all four modules and provides high-level control."
    },
    {
      "type": "code",
      "title": "AdvantageKit Swerve Drive Subsystem",
      "content": "import com.mechanicaladvantage.swerve.SwerveDrive;\nimport com.mechanicaladvantage.swerve.SwerveDriveConfiguration;\nimport edu.wpi.first.math.geometry.Pose2d;\nimport edu.wpi.first.math.geometry.Rotation2d;\nimport edu.wpi.first.math.kinematics.ChassisSpeeds;\nimport edu.wpi.first.math.kinematics.SwerveDriveKinematics;\nimport edu.wpi.first.math.kinematics.SwerveDriveOdometry;\nimport edu.wpi.first.math.kinematics.SwerveModulePosition;\nimport edu.wpi.first.wpilibj.ADXRS450_Gyro;\nimport edu.wpi.first.wpilibj2.command.SubsystemBase;\n\npublic class AdvantageKitSwerveSubsystem extends SubsystemBase {\n  // Swerve modules\n  private final SwerveModuleSubsystem m_frontLeft;\n  private final SwerveModuleSubsystem m_frontRight;\n  private final SwerveModuleSubsystem m_backLeft;\n  private final SwerveModuleSubsystem m_backRight;\n  \n  // Swerve drive\n  private final SwerveDrive m_swerveDrive;\n  \n  // Sensors\n  private final ADXRS450_Gyro m_gyro;\n  \n  // Odometry\n  private final SwerveDriveOdometry m_odometry;\n  \n  public AdvantageKitSwerveSubsystem() {\n    // Create swerve modules\n    m_frontLeft = new SwerveModuleSubsystem(1, 2, 1, 0.0);\n    m_frontRight = new SwerveModuleSubsystem(3, 4, 2, 0.0);\n    m_backLeft = new SwerveModuleSubsystem(5, 6, 3, 0.0);\n    m_backRight = new SwerveModuleSubsystem(7, 8, 4, 0.0);\n    \n    // Create gyro\n    m_gyro = new ADXRS450_Gyro();\n    m_gyro.calibrate();\n    \n    // Create swerve drive configuration\n    SwerveDriveConfiguration config = new SwerveDriveConfiguration(\n      m_frontLeft,\n      m_frontRight,\n      m_backLeft,\n      m_backRight,\n      0.7, // Track width in meters\n      0.7, // Wheel base in meters\n      4.5, // Max speed in m/s\n      3.0, // Max acceleration in m/s²\n      3.5, // Max angular velocity in rad/s\n      3.0  // Max angular acceleration in rad/s²\n    );\n    \n    m_swerveDrive = new SwerveDrive(config);\n    \n    // Create odometry\n    m_odometry = new SwerveDriveOdometry(\n      m_swerveDrive.getKinematics(),\n      m_gyro.getRotation2d(),\n      getModulePositions()\n    );\n  }\n  \n  public void drive(ChassisSpeeds speeds) {\n    m_swerveDrive.drive(speeds);\n  }\n  \n  public void driveFieldRelative(ChassisSpeeds speeds) {\n    m_swerveDrive.driveFieldRelative(speeds);\n  }\n  \n  public void setModuleStates(SwerveModuleState[] states) {\n    m_swerveDrive.setModuleStates(states);\n  }\n  \n  public SwerveModuleState[] getModuleStates() {\n    return m_swerveDrive.getModuleStates();\n  }\n  \n  public SwerveModulePosition[] getModulePositions() {\n    return new SwerveModulePosition[] {\n      m_frontLeft.getPosition(),\n      m_frontRight.getPosition(),\n      m_backLeft.getPosition(),\n      m_backRight.getPosition()\n    };\n  }\n  \n  public Pose2d getPose() {\n    return m_odometry.getPoseMeters();\n  }\n  \n  public void resetPose(Pose2d pose) {\n    m_odometry.resetPosition(m_gyro.getRotation2d(), getModulePositions(), pose);\n  }\n  \n  public void resetGyro() {\n    m_gyro.reset();\n  }\n  \n  @Override\n  public void periodic() {\n    // Update odometry\n    m_odometry.update(m_gyro.getRotation2d(), getModulePositions());\n    \n    // Update swerve drive\n    m_swerveDrive.periodic();\n  }\n}"
    },
    {
      "type": "text",
      "title": "Swerve Drive Tuning",
      "content": "Tuning a swerve drive involves several steps to ensure optimal performance. This process is critical for achieving smooth, accurate movement."
    },
    {
      "type": "list",
      "title": "Tuning Steps",
      "items": [
        "<strong>Module Calibration:</strong> Calibrate each module's encoder offset",
        "<strong>Drive PID Tuning:</strong> Tune drive motor PID for consistent speed",
        "<strong>Steer PID Tuning:</strong> Tune steer motor PID for accurate positioning",
        "<strong>Kinematics Verification:</strong> Verify module positions and orientations",
        "<strong>Odometry Tuning:</strong> Calibrate odometry for accurate pose estimation",
        "<strong>Path Following Tuning:</strong> Tune path following parameters"
      ]
    },
    {
      "type": "code",
      "title": "Module Calibration",
      "content": "public class SwerveModuleCalibration extends SubsystemBase {\n  private final SwerveModuleSubsystem m_module;\n  private final String m_moduleName;\n  \n  public SwerveModuleCalibration(SwerveModuleSubsystem module, String name) {\n    m_module = module;\n    m_moduleName = name;\n  }\n  \n  public void calibrateModule() {\n    // This is a simplified calibration process\n    // In practice, you'd use a more sophisticated method\n    \n    // Drive the steer motor to find the encoder offset\n    double currentAngle = m_module.getState().angle.getDegrees();\n    double targetAngle = 0.0;\n    \n    // Calculate the offset needed to make 0 degrees point forward\n    double offset = targetAngle - currentAngle;\n    \n    // Apply the offset\n    m_module.setEncoderOffset(offset);\n    \n    SmartDashboard.putNumber(m_moduleName + \" Offset\", offset);\n  }\n  \n  public void testModule() {\n    // Test the module by commanding different states\n    double time = Timer.getFPGATimestamp();\n    \n    // Command a rotating pattern\n    double angle = (time * 90) % 360; // Rotate 90 degrees per second\n    double speed = 0.5; // 50% speed\n    \n    SwerveModuleState testState = new SwerveModuleState(speed, Rotation2d.fromDegrees(angle));\n    m_module.setDesiredState(testState);\n    \n    // Display test data\n    SwerveModuleState actualState = m_module.getState();\n    SmartDashboard.putNumber(m_moduleName + \" Target Angle\", angle);\n    SmartDashboard.putNumber(m_moduleName + \" Actual Angle\", actualState.angle.getDegrees());\n    SmartDashboard.putNumber(m_moduleName + \" Target Speed\", speed);\n    SmartDashboard.putNumber(m_moduleName + \" Actual Speed\", actualState.speedMetersPerSecond);\n  }\n}"
    },
    {
      "type": "text",
      "title": "Swerve Drive Commands",
      "content": "Commands for swerve drive control can be simple teleop commands or complex autonomous sequences."
    },
    {
      "type": "code",
      "title": "Swerve Drive Commands",
      "content": "import edu.wpi.first.wpilibj2.command.CommandBase;\nimport edu.wpi.first.wpilibj.XboxController;\nimport edu.wpi.first.math.kinematics.ChassisSpeeds;\n\npublic class SwerveTeleopCommand extends CommandBase {\n  private final AdvantageKitSwerveSubsystem m_swerve;\n  private final XboxController m_controller;\n  private final boolean m_fieldRelative;\n  \n  public SwerveTeleopCommand(AdvantageKitSwerveSubsystem swerve, XboxController controller, boolean fieldRelative) {\n    m_swerve = swerve;\n    m_controller = controller;\n    m_fieldRelative = fieldRelative;\n    \n    addRequirements(swerve);\n  }\n  \n  @Override\n  public void execute() {\n    // Get controller inputs\n    double forward = -m_controller.getLeftY();\n    double strafe = m_controller.getLeftX();\n    double rotation = m_controller.getRightX();\n    \n    // Apply deadband\n    forward = Math.abs(forward) < 0.1 ? 0 : forward;\n    strafe = Math.abs(strafe) < 0.1 ? 0 : strafe;\n    rotation = Math.abs(rotation) < 0.1 ? 0 : rotation;\n    \n    // Create chassis speeds\n    ChassisSpeeds speeds = new ChassisSpeeds(forward, strafe, rotation);\n    \n    // Drive the robot\n    if (m_fieldRelative) {\n      m_swerve.driveFieldRelative(speeds);\n    } else {\n      m_swerve.drive(speeds);\n    }\n  }\n  \n  @Override\n  public boolean isFinished() {\n    return false; // Default command runs forever\n  }\n}\n\npublic class SwervePathFollowingCommand extends CommandBase {\n  private final AdvantageKitSwerveSubsystem m_swerve;\n  private final PathPlannerPath m_path;\n  private final Timer m_timer;\n  \n  public SwervePathFollowingCommand(AdvantageKitSwerveSubsystem swerve, PathPlannerPath path) {\n    m_swerve = swerve;\n    m_path = path;\n    m_timer = new Timer();\n    \n    addRequirements(swerve);\n  }\n  \n  @Override\n  public void initialize() {\n    // Reset timer and odometry\n    m_timer.reset();\n    m_timer.start();\n    \n    // Reset pose to path start\n    m_swerve.resetPose(m_path.getStartingDifferentialPose());\n  }\n  \n  @Override\n  public void execute() {\n    // Get the desired state at current time\n    PathPlannerTrajectory.State desiredState = m_path.getTrajectory().sample(m_timer.get());\n    \n    // Convert to chassis speeds\n    ChassisSpeeds speeds = desiredState.getChassisSpeeds();\n    \n    // Drive the robot\n    m_swerve.drive(speeds);\n  }\n  \n  @Override\n  public boolean isFinished() {\n    return m_timer.get() >= m_path.getTrajectory().getTotalTimeSeconds();\n  }\n  \n  @Override\n  public void end(boolean interrupted) {\n    // Stop the robot\n    m_swerve.drive(new ChassisSpeeds());\n  }\n}"
    },
    {
      "type": "text",
      "title": "Advanced Swerve Features",
      "content": "AdvantageKit provides several advanced features for sophisticated swerve drive control."
    },
    {
      "type": "list",
      "title": "Advanced Features",
      "items": [
        "<strong>X-Stance:</strong> Lock wheels in X pattern for stability",
        "<strong>Auto-Alignment:</strong> Automatically align to field elements",
        "<strong>Trajectory Optimization:</strong> Optimize paths for swerve characteristics",
        "<strong>Simulation Integration:</strong> Test swerve behavior in simulation",
        "<strong>Advanced Odometry:</strong> Multiple sensor fusion for better pose estimation"
      ]
    },
    {
      "type": "code",
      "title": "Advanced Swerve Features Example",
      "content": "public class AdvancedSwerveFeatures {\n  \n  public void enableXStance(AdvantageKitSwerveSubsystem swerve) {\n    // Lock wheels in X pattern for stability\n    SwerveModuleState[] xStates = {\n      new SwerveModuleState(0, Rotation2d.fromDegrees(45)),\n      new SwerveModuleState(0, Rotation2d.fromDegrees(-45)),\n      new SwerveModuleState(0, Rotation2d.fromDegrees(-45)),\n      new SwerveModuleState(0, Rotation2d.fromDegrees(45))\n    };\n    \n    swerve.setModuleStates(xStates);\n  }\n  \n  public Command createAutoAlignmentCommand(AdvantageKitSwerveSubsystem swerve, double targetAngle) {\n    return new CommandBase() {\n      @Override\n      public void execute() {\n        // Calculate angle error\n        double currentAngle = swerve.getPose().getRotation().getDegrees();\n        double angleError = targetAngle - currentAngle;\n        \n        // Normalize angle error\n        while (angleError > 180) angleError -= 360;\n        while (angleError < -180) angleError += 360;\n        \n        // Simple proportional control\n        double rotationSpeed = angleError * 0.01;\n        rotationSpeed = Math.max(-0.5, Math.min(0.5, rotationSpeed));\n        \n        // Drive robot to align\n        swerve.drive(new ChassisSpeeds(0, 0, rotationSpeed));\n      }\n      \n      @Override\n      public boolean isFinished() {\n        double currentAngle = swerve.getPose().getRotation().getDegrees();\n        double angleError = Math.abs(targetAngle - currentAngle);\n        return angleError < 2.0; // Within 2 degrees\n      }\n      \n      @Override\n      public void end(boolean interrupted) {\n        swerve.drive(new ChassisSpeeds());\n      }\n    };\n  }\n}"
    },
    {
      "type": "text",
      "title": "Swerve Drive Troubleshooting",
      "content": "Swerve drives can be complex to debug. Understanding common issues helps with troubleshooting."
    },
    {
      "type": "list",
      "title": "Common Issues",
      "items": [
        "<strong>Module Drift:</strong> Modules not maintaining position - check steer PID tuning",
        "<strong>Inconsistent Speed:</strong> Drive motors not maintaining speed - check drive PID tuning",
        "<strong>Poor Odometry:</strong> Robot position inaccurate - check encoder offsets and kinematics",
        "<strong>Jittery Movement:</strong> Jerky robot movement - check PID gains and mechanical issues",
        "<strong>Path Following Issues:</strong> Robot not following paths accurately - check odometry and control gains"
      ]
    },
    {
      "type": "code",
      "title": "Swerve Diagnostics",
      "content": "public class SwerveDiagnostics extends SubsystemBase {\n  private final AdvantageKitSwerveSubsystem m_swerve;\n  \n  public SwerveDiagnostics(AdvantageKitSwerveSubsystem swerve) {\n    m_swerve = swerve;\n  }\n  \n  @Override\n  public void periodic() {\n    // Display diagnostic information\n    SwerveModuleState[] states = m_swerve.getModuleStates();\n    \n    SmartDashboard.putNumber(\"FL Angle\", states[0].angle.getDegrees());\n    SmartDashboard.putNumber(\"FR Angle\", states[1].angle.getDegrees());\n    SmartDashboard.putNumber(\"BL Angle\", states[2].angle.getDegrees());\n    SmartDashboard.putNumber(\"BR Angle\", states[3].angle.getDegrees());\n    \n    SmartDashboard.putNumber(\"FL Speed\", states[0].speedMetersPerSecond);\n    SmartDashboard.putNumber(\"FR Speed\", states[1].speedMetersPerSecond);\n    SmartDashboard.putNumber(\"BL Speed\", states[2].speedMetersPerSecond);\n    SmartDashboard.putNumber(\"BR Speed\", states[3].speedMetersPerSecond);\n    \n    Pose2d pose = m_swerve.getPose();\n    SmartDashboard.putNumber(\"Robot X\", pose.getX());\n    SmartDashboard.putNumber(\"Robot Y\", pose.getY());\n    SmartDashboard.putNumber(\"Robot Angle\", pose.getRotation().getDegrees());\n  }\n  \n  public void runModuleTest() {\n    // Test each module individually\n    // This would involve commanding each module to specific states\n    // and monitoring their response\n  }\n}"
    },
    {
      "type": "rules-box",
      "title": "Best Practices",
      "items": [
        "Calibrate modules thoroughly before first use",
        "Tune PID controllers systematically",
        "Test in simulation before hardware deployment",
        "Use field-relative control for intuitive driving",
        "Monitor module performance during operation",
        "Document calibration and tuning procedures"
      ],
      "subtitle": "Follow these guidelines for effective swerve drive implementation:"
    },
    {
      "type": "exercise-box",
      "title": "Practice Exercise",
      "description": "Set up AdvantageKit swerve drive and implement basic control and path following.",
      "tasks": [
        "Install AdvantageKit dependencies in your project",
        "Create swerve module subsystems for all four corners",
        "Build the main swerve drive subsystem",
        "Implement teleop control with field-relative driving",
        "Add basic path following capabilities",
        "Test and tune the swerve drive system"
      ],
      "code": "// Complete AdvantageKit swerve example\npublic class AdvantageKitSwerveRobotContainer {\n  private final AdvantageKitSwerveSubsystem m_swerve;\n  private final XboxController m_driver;\n  \n  public AdvantageKitSwerveRobotContainer() {\n    m_swerve = new AdvantageKitSwerveSubsystem();\n    m_driver = new XboxController(0);\n    \n    // Set default command\n    m_swerve.setDefaultCommand(new SwerveTeleopCommand(m_swerve, m_driver, true));\n  }\n  \n  public Command getAutonomousCommand() {\n    // Load path and create command\n    PathPlannerPath path = PathPlannerPath.fromPathFile(\"SwervePath\");\n    return new SwervePathFollowingCommand(m_swerve, path);\n  }\n}\n\npublic class SwerveTeleopCommand extends CommandBase {\n  private final AdvantageKitSwerveSubsystem m_swerve;\n  private final XboxController m_controller;\n  \n  public SwerveTeleopCommand(AdvantageKitSwerveSubsystem swerve, XboxController controller) {\n    m_swerve = swerve;\n    m_controller = controller;\n    addRequirements(swerve);\n  }\n  \n  @Override\n  public void execute() {\n    double forward = -m_controller.getLeftY();\n    double strafe = m_controller.getLeftX();\n    double rotation = m_controller.getRightX();\n    \n    // Apply deadband\n    forward = Math.abs(forward) < 0.1 ? 0 : forward;\n    strafe = Math.abs(strafe) < 0.1 ? 0 : strafe;\n    rotation = Math.abs(rotation) < 0.1 ? 0 : rotation;\n    \n    // Drive field-relative\n    m_swerve.driveFieldRelative(new ChassisSpeeds(forward, strafe, rotation));\n  }\n  \n  @Override\n  public boolean isFinished() {\n    return false;\n  }\n}"
    },
    {
      "type": "text",
      "title": "Next Steps",
      "content": "Now that you understand AdvantageKit swerve drive, you're ready to move to the advanced level where you'll learn about AdvantageScope, advanced logging, and simulation."
    }
  ]
}