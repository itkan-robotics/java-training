{
  "title": "PathPlanner and Autonomous Path Following",
  "sections": [
    {
      "type": "text",
      "title": "Introduction to PathPlanner",
      "content": "PathPlanner is a powerful tool for creating complex autonomous paths in FRC. It provides a visual interface for designing paths, generates optimal trajectories, and integrates with WPILib for autonomous execution. This lesson covers how to use PathPlanner effectively."
    },
    {
      "type": "rules-box",
      "title": "What is PathPlanner?",
      "items": [
        "<strong>Visual Path Design:</strong> Drag-and-drop interface for creating paths",
        "<strong>Automatic Trajectory Generation:</strong> Converts paths into optimal trajectories",
        "<strong>Event Markers:</strong> Trigger actions at specific points along the path",
        "<strong>Multiple Path Support:</strong> Create and switch between different autonomous routines",
        "<strong>Real-time Simulation:</strong> Test paths before deploying to hardware",
        "<strong>WPILib Integration:</strong> Seamless integration with command-based programming"
      ],
      "subtitle": "PathPlanner provides:"
    },
    {
      "type": "text",
      "title": "Setting Up PathPlanner",
      "content": "PathPlanner requires specific setup in your WPILib project to work properly."
    },
    {
      "type": "list",
      "title": "Setup Steps",
      "items": [
        "Download PathPlanner from <a href='https://pathplanner.dev/' target='_blank'>pathplanner.dev</a>",
        "Add PathPlanner dependencies to your build.gradle file",
        "Configure your robot's drivetrain characteristics",
        "Set up the PathPlanner server in your robot code",
        "Create the PathPlanner configuration file"
      ]
    },
    {
      "type": "code",
      "title": "PathPlanner Dependencies",
      "content": "// Add to build.gradle\nrepositories {\n    maven {\n        url \"https://maven.pkg.github.com/mjansen4857/pathplanner\"\n        credentials {\n            username = \"GITHUB_USERNAME\"\n            password = \"GITHUB_TOKEN\"\n        }\n    }\n}\n\ndependencies {\n    implementation \"com.pathplanner:pathplannerlib:2024.1.1-beta-3\"\n}"
    },
    {
      "type": "code",
      "title": "PathPlanner Configuration",
      "content": "// Create pathplanner-config.json in src/main/deploy\n{\n  \"maxVelocity\": 4.5,\n  \"maxAcceleration\": 3.0,\n  \"maxAngularVelocity\": 3.5,\n  \"maxAngularAcceleration\": 3.0,\n  \"trackWidth\": 0.7,\n  \"wheelBase\": 0.7,\n  \"driveBaseType\": \"DIFFERENTIAL\",\n  \"wheelDiameter\": 0.1016,\n  \"wheelGearRatio\": 10.71,\n  \"encoderResolution\": 2048,\n  \"encoderDirection\": \"FORWARD\",\n  \"gyroType\": \"PIGEON2\",\n  \"gyroMountingDirection\": \"FORWARD\",\n  \"gyroMountingPitch\": 0,\n  \"gyroMountingRoll\": 0,\n  \"gyroMountingYaw\": 0\n}"
    },
    {
      "type": "text",
      "title": "PathPlanner Subsystem Setup",
      "content": "Your drivetrain subsystem needs to be configured to work with PathPlanner's trajectory following."
    },
    {
      "type": "code",
      "title": "PathPlanner Drivetrain Subsystem",
      "content": "import com.pathplanner.lib.auto.AutoBuilder;\nimport com.pathplanner.lib.util.HolonomicPathFollowerConfig;\nimport com.pathplanner.lib.util.PIDConstants;\nimport com.pathplanner.lib.util.ReplanningConfig;\nimport edu.wpi.first.math.geometry.Pose2d;\nimport edu.wpi.first.math.kinematics.ChassisSpeeds;\nimport edu.wpi.first.wpilibj2.command.SubsystemBase;\n\npublic class PathPlannerDrivetrainSubsystem extends SubsystemBase {\n  // Hardware\n  private final PWMSparkMax m_leftMotor = new PWMSparkMax(0);\n  private final PWMSparkMax m_rightMotor = new PWMSparkMax(1);\n  private final DifferentialDrive m_robotDrive = new DifferentialDrive(m_leftMotor, m_rightMotor);\n  \n  // Sensors\n  private final Encoder m_leftEncoder = new Encoder(0, 1);\n  private final Encoder m_rightEncoder = new Encoder(2, 3);\n  private final ADXRS450_Gyro m_gyro = new ADXRS450_Gyro();\n  \n  // PathPlanner components\n  private final DifferentialDriveOdometry m_odometry;\n  \n  public PathPlannerDrivetrainSubsystem() {\n    // Configure hardware\n    m_rightMotor.setInverted(true);\n    m_leftEncoder.setDistancePerPulse(1.0 / 2048.0);\n    m_rightEncoder.setDistancePerPulse(1.0 / 2048.0);\n    m_gyro.calibrate();\n    \n    // Create odometry\n    m_odometry = new DifferentialDriveOdometry(m_gyro.getRotation2d());\n    \n    // Configure PathPlanner\n    AutoBuilder.configureHolonomic(\n      this::getPose, // Robot pose supplier\n      this::resetPose, // Method to reset odometry\n      this::getRobotRelativeSpeeds, // ChassisSpeeds supplier\n      this::drive, // Method to drive the robot\n      new HolonomicPathFollowerConfig(\n        new PIDConstants(5.0, 0.0, 0.0), // Translation PID constants\n        new PIDConstants(5.0, 0.0, 0.0), // Rotation PID constants\n        4.5, // Max module speed, in m/s\n        0.4, // Drive base radius in meters\n        new ReplanningConfig() // Default path replanning config\n      ),\n      () -> {\n        // Boolean supplier that controls when the path will be mirrored for the red alliance\n        var alliance = DriverStation.getAlliance();\n        return alliance.isPresent() ? alliance.get() == DriverStation.Alliance.RedAlliance : false;\n      },\n      this // Reference to this subsystem to set requirements\n    );\n  }\n  \n  public Pose2d getPose() {\n    return m_odometry.getPoseMeters();\n  }\n  \n  public void resetPose(Pose2d pose) {\n    m_odometry.resetPosition(m_gyro.getRotation2d(), m_leftEncoder.getDistance(), m_rightEncoder.getDistance(), pose);\n  }\n  \n  public ChassisSpeeds getRobotRelativeSpeeds() {\n    return new ChassisSpeeds(\n      (m_leftEncoder.getRate() + m_rightEncoder.getRate()) / 2.0,\n      0.0,\n      m_gyro.getRate()\n    );\n  }\n  \n  public void drive(ChassisSpeeds speeds) {\n    // Convert ChassisSpeeds to differential drive\n    DifferentialDriveWheelSpeeds wheelSpeeds = new DifferentialDriveKinematics(0.7).toWheelSpeeds(speeds);\n    \n    double leftSpeed = wheelSpeeds.leftMetersPerSecond / 4.5; // Normalize to max speed\n    double rightSpeed = wheelSpeeds.rightMetersPerSecond / 4.5;\n    \n    m_robotDrive.tankDrive(leftSpeed, rightSpeed);\n  }\n  \n  @Override\n  public void periodic() {\n    // Update odometry\n    m_odometry.update(m_gyro.getRotation2d(), m_leftEncoder.getDistance(), m_rightEncoder.getDistance());\n  }\n}"
    },
    {
      "type": "text",
      "title": "Creating Paths in PathPlanner",
      "content": "PathPlanner provides a visual interface for creating autonomous paths. Understanding how to use this interface is key to creating effective autonomous routines."
    },
    {
      "type": "list",
      "title": "Path Creation Steps",
      "items": [
        "<strong>Open PathPlanner:</strong> Launch the PathPlanner application",
        "<strong>Load Configuration:</strong> Load your robot's configuration file",
        "<strong>Create New Path:</strong> Start with a new path or load existing ones",
        "<strong>Add Waypoints:</strong> Click to add waypoints and drag to position them",
        "<strong>Set Constraints:</strong> Configure velocity and acceleration limits",
        "<strong>Add Events:</strong> Place event markers for actions at specific points",
        "<strong>Test Path:</strong> Use the simulation to verify the path works",
        "<strong>Export Path:</strong> Save the path for use in your robot code"
      ]
    },
    {
      "type": "text",
      "title": "PathPlanner Commands",
      "content": "PathPlanner generates commands that can be used directly in your autonomous routines."
    },
    {
      "type": "code",
      "title": "PathPlanner Command Usage",
      "content": "import com.pathplanner.lib.auto.AutoBuilder;\nimport com.pathplanner.lib.path.PathPlannerPath;\nimport edu.wpi.first.wpilibj2.command.Command;\nimport edu.wpi.first.wpilibj2.command.SequentialCommandGroup;\n\npublic class PathPlannerRobotContainer {\n  private final PathPlannerDrivetrainSubsystem m_drivetrain;\n  private final ArmSubsystem m_arm;\n  private final IntakeSubsystem m_intake;\n  \n  public PathPlannerRobotContainer() {\n    m_drivetrain = new PathPlannerDrivetrainSubsystem();\n    m_arm = new ArmSubsystem();\n    m_intake = new IntakeSubsystem();\n  }\n  \n  public Command getAutonomousCommand() {\n    // Load paths from PathPlanner\n    PathPlannerPath path1 = PathPlannerPath.fromPathFile(\"Path1\");\n    PathPlannerPath path2 = PathPlannerPath.fromPathFile(\"Path2\");\n    \n    // Create commands from paths\n    Command followPath1 = AutoBuilder.followPath(path1);\n    Command followPath2 = AutoBuilder.followPath(path2);\n    \n    // Create a complex autonomous sequence\n    return new SequentialCommandGroup(\n      // Start intake\n      new RunIntakeCommand(m_intake, 0.8),\n      \n      // Follow first path while intaking\n      new ParallelCommandGroup(\n        followPath1,\n        new RunIntakeCommand(m_intake, 0.8)\n      ),\n      \n      // Stop intake and raise arm\n      new SequentialCommandGroup(\n        new StopIntakeCommand(m_intake),\n        new MoveArmCommand(m_arm, 90.0)\n      ),\n      \n      // Follow second path to scoring position\n      followPath2,\n      \n      // Score and return\n      new SequentialCommandGroup(\n        new ScoreCommand(m_arm),\n        new MoveArmCommand(m_arm, 0.0)\n      )\n    );\n  }\n}"
    },
    {
      "type": "text",
      "title": "Path Events and Actions",
      "content": "PathPlanner allows you to trigger actions at specific points along the path using event markers."
    },
    {
      "type": "code",
      "title": "Path Events Example",
      "content": "public class PathPlannerWithEvents {\n  \n  public Command getAutonomousCommand() {\n    // Load path with events\n    PathPlannerPath path = PathPlannerPath.fromPathFile(\"ComplexPath\");\n    \n    // Create commands for events\n    Command startIntake = new RunIntakeCommand(m_intake, 0.8);\n    Command stopIntake = new StopIntakeCommand(m_intake);\n    Command raiseArm = new MoveArmCommand(m_arm, 90.0);\n    Command lowerArm = new MoveArmCommand(m_arm, 0.0);\n    Command score = new ScoreCommand(m_arm);\n    \n    // Create event map\n    Map<String, Command> eventMap = new HashMap<>();\n    eventMap.put(\"startIntake\", startIntake);\n    eventMap.put(\"stopIntake\", stopIntake);\n    eventMap.put(\"raiseArm\", raiseArm);\n    eventMap.put(\"lowerArm\", lowerArm);\n    eventMap.put(\"score\", score);\n    \n    // Create autonomous command with events\n    return AutoBuilder.buildAuto(\"ComplexPath\", eventMap);\n  }\n}"
    },
    {
      "type": "text",
      "title": "Multiple Autonomous Routines",
      "content": "PathPlanner makes it easy to create and switch between multiple autonomous routines."
    },
    {
      "type": "code",
      "title": "Multiple Autonomous Routines",
      "content": "public class MultipleAutonomousRoutines {\n  \n  public Command getAutonomousCommand() {\n    // Get the selected autonomous routine from SmartDashboard\n    String autoName = SmartDashboard.getString(\"Auto Selector\", \"Default\");\n    \n    switch (autoName) {\n      case \"Simple Forward\":\n        return AutoBuilder.buildAuto(\"SimpleForward\");\n        \n      case \"Collect and Score\":\n        return createCollectAndScoreAuto();\n        \n      case \"Complex Routine\":\n        return createComplexAuto();\n        \n      case \"Defense\":\n        return createDefenseAuto();\n        \n      default:\n        return AutoBuilder.buildAuto(\"Default\");\n    }\n  }\n  \n  private Command createCollectAndScoreAuto() {\n    Map<String, Command> eventMap = new HashMap<>();\n    eventMap.put(\"startIntake\", new RunIntakeCommand(m_intake, 0.8));\n    eventMap.put(\"stopIntake\", new StopIntakeCommand(m_intake));\n    eventMap.put(\"score\", new ScoreCommand(m_arm));\n    \n    return AutoBuilder.buildAuto(\"CollectAndScore\", eventMap);\n  }\n  \n  private Command createComplexAuto() {\n    // More complex autonomous with multiple paths and events\n    return new SequentialCommandGroup(\n      AutoBuilder.buildAuto(\"Path1\"),\n      new WaitCommand(0.5),\n      AutoBuilder.buildAuto(\"Path2\"),\n      new ScoreCommand(m_arm)\n    );\n  }\n  \n  private Command createDefenseAuto() {\n    // Autonomous focused on defensive play\n    return AutoBuilder.buildAuto(\"DefensePath\");\n  }\n}"
    },
    {
      "type": "text",
      "title": "Path Tuning and Optimization",
      "content": "Creating effective paths requires tuning and optimization based on your robot's characteristics and the game requirements."
    },
    {
      "type": "list",
      "title": "Tuning Considerations",
      "items": [
        "<strong>Robot Constraints:</strong> Ensure paths respect your robot's physical limitations",
        "<strong>Game Strategy:</strong> Design paths that support your team's game strategy",
        "<strong>Alliance Coordination:</strong> Consider how paths work with alliance partners",
        "<strong>Field Conditions:</strong> Account for field variations and obstacles",
        "<strong>Timing:</strong> Optimize paths for time efficiency",
        "<strong>Reliability:</strong> Test paths under various conditions"
      ]
    },
    {
      "type": "code",
      "title": "Path Tuning Interface",
      "content": "public class PathTuningSubsystem extends SubsystemBase {\n  \n  public void setupPathTuning() {\n    // Add tuning controls to SmartDashboard\n    SmartDashboard.putNumber(\"Path Max Velocity\", 4.5);\n    SmartDashboard.putNumber(\"Path Max Acceleration\", 3.0);\n    SmartDashboard.putNumber(\"Translation P\", 5.0);\n    SmartDashboard.putNumber(\"Translation I\", 0.0);\n    SmartDashboard.putNumber(\"Translation D\", 0.0);\n    SmartDashboard.putNumber(\"Rotation P\", 5.0);\n    SmartDashboard.putNumber(\"Rotation I\", 0.0);\n    SmartDashboard.putNumber(\"Rotation D\", 0.0);\n    \n    // Add path selection\n    SmartDashboard.putString(\"Selected Path\", \"Path1\");\n    SmartDashboard.putBoolean(\"Run Path\", false);\n  }\n  \n  public Command getTuningCommand() {\n    // Read tuning parameters\n    double maxVelocity = SmartDashboard.getNumber(\"Path Max Velocity\", 4.5);\n    double maxAcceleration = SmartDashboard.getNumber(\"Path Max Acceleration\", 3.0);\n    \n    // Load selected path\n    String pathName = SmartDashboard.getString(\"Selected Path\", \"Path1\");\n    PathPlannerPath path = PathPlannerPath.fromPathFile(pathName);\n    \n    // Create command with current tuning\n    return AutoBuilder.followPath(path);\n  }\n}"
    },
    {
      "type": "text",
      "title": "Advanced PathPlanner Features",
      "content": "PathPlanner offers several advanced features for complex autonomous scenarios."
    },
    {
      "type": "list",
      "title": "Advanced Features",
      "items": [
        "<strong>Path Groups:</strong> Combine multiple paths into single autonomous routines",
        "<strong>Dynamic Paths:</strong> Generate paths based on real-time conditions",
        "<strong>Path Mirroring:</strong> Automatically mirror paths for different alliances",
        "<strong>Custom Constraints:</strong> Define custom velocity and acceleration profiles",
        "<strong>Path Optimization:</strong> Automatic optimization of path smoothness and efficiency"
      ]
    },
    {
      "type": "rules-box",
      "title": "Best Practices",
      "items": [
        "Start with simple paths and gradually increase complexity",
        "Test paths thoroughly in simulation before hardware",
        "Use event markers for precise timing of actions",
        "Create multiple autonomous routines for different scenarios",
        "Document your paths and their intended use",
        "Coordinate with your team on autonomous strategy"
      ],
      "subtitle": "Follow these guidelines for effective PathPlanner usage:"
    },
    {
      "type": "exercise-box",
      "title": "Practice Exercise",
      "description": "Set up PathPlanner and create a complete autonomous routine with multiple paths and events.",
      "tasks": [
        "Install and configure PathPlanner in your project",
        "Create a basic drivetrain subsystem with PathPlanner integration",
        "Design a simple path in PathPlanner (forward and turn)",
        "Create a more complex path with event markers",
        "Build an autonomous command that uses multiple paths",
        "Test your autonomous routine in simulation"
      ],
      "content": "// Complete PathPlanner setup example\npublic class PathPlannerRobotContainer {\n  private final PathPlannerDrivetrainSubsystem m_drivetrain;\n  private final ArmSubsystem m_arm;\n  private final IntakeSubsystem m_intake;\n  \n  public PathPlannerRobotContainer() {\n    m_drivetrain = new PathPlannerDrivetrainSubsystem();\n    m_arm = new ArmSubsystem();\n    m_intake = new IntakeSubsystem();\n    \n    // Configure PathPlanner\n    configurePathPlanner();\n  }\n  \n  private void configurePathPlanner() {\n    // Set up autonomous selector\n    AutoBuilder.buildAuto(\"Simple Forward\");\n    AutoBuilder.buildAuto(\"Collect and Score\");\n    AutoBuilder.buildAuto(\"Complex Routine\");\n  }\n  \n  public Command getAutonomousCommand() {\n    // Get selected autonomous from SmartDashboard\n    String autoName = SmartDashboard.getString(\"Auto Selector\", \"Simple Forward\");\n    \n    switch (autoName) {\n      case \"Simple Forward\":\n        return AutoBuilder.buildAuto(\"SimpleForward\");\n        \n      case \"Collect and Score\":\n        Map<String, Command> eventMap = new HashMap<>();\n        eventMap.put(\"startIntake\", new RunIntakeCommand(m_intake, 0.8));\n        eventMap.put(\"stopIntake\", new StopIntakeCommand(m_intake));\n        eventMap.put(\"score\", new ScoreCommand(m_arm));\n        return AutoBuilder.buildAuto(\"CollectAndScore\", eventMap);\n        \n      case \"Complex Routine\":\n        return new SequentialCommandGroup(\n          AutoBuilder.buildAuto(\"Path1\"),\n          new WaitCommand(0.5),\n          AutoBuilder.buildAuto(\"Path2\"),\n          new ScoreCommand(m_arm)\n        );\n        \n      default:\n        return AutoBuilder.buildAuto(\"SimpleForward\");\n    }\n  }\n}\n\npublic class PathPlannerDrivetrainSubsystem extends SubsystemBase {\n  // ... hardware declarations ...\n  \n  public PathPlannerDrivetrainSubsystem() {\n    // ... hardware configuration ...\n    \n    // Configure PathPlanner\n    AutoBuilder.configureHolonomic(\n      this::getPose,\n      this::resetPose,\n      this::getRobotRelativeSpeeds,\n      this::drive,\n      new HolonomicPathFollowerConfig(\n        new PIDConstants(5.0, 0.0, 0.0),\n        new PIDConstants(5.0, 0.0, 0.0),\n        4.5,\n        0.4,\n        new ReplanningConfig()\n      ),\n      () -> {\n        var alliance = DriverStation.getAlliance();\n        return alliance.isPresent() ? alliance.get() == DriverStation.Alliance.RedAlliance : false;\n      },\n      this\n    );\n  }\n  \n  // ... rest of subsystem implementation ...\n}"
    },
    {
      "type": "text",
      "title": "Next Steps",
      "content": "Now that you understand PathPlanner, you're ready to learn about AdvantageKit swerve tuning, which combines advanced drivetrain control with path following capabilities."
    }
  ]
}
