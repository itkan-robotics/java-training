{
  "title": "Commands and Scheduler Implementation",
  "sections": [
    {
      "type": "text",
      "title": "Command Structure: Intake Motor Example",
      "content": "<p>Commands in SolversLib are built around four lifecycle methods: <code>initialize()</code>, <code>execute()</code>, <code>isFinished()</code>, and <code>end(boolean interrupted)</code>. Below is a command that sets an intake motor to a desired speed, broken up by each method with explanations.</p>"
    },
    {
      "type": "code",
      "title": "initialize(): Prepare the Command",
      "content": "// Called once when the command is scheduled\n@Override\npublic void initialize() {\n    // Set up any initial state or log\n    System.out.println(\"IntakeSpeedCommand: Initializing\");\n}"
    },
    {
      "type": "code",
      "title": "execute(): Run the Main Logic",
      "content": "// Called repeatedly while the command is active\n@Override\npublic void execute() {\n    intakeSubsystem.setSpeed(desiredSpeed);\n    // You can add telemetry or checks here\n}"
    },
    {
      "type": "code",
      "title": "isFinished(): Decide When to End",
      "content": "// Called repeatedly to check if the command should finish\n@Override\npublic boolean isFinished() {\n    // This command runs until interrupted, so always return false\n    return false;\n}"
    },
    {
      "type": "code",
      "title": "end(boolean interrupted): Cleanup",
      "content": "// Called once when the command ends or is interrupted\n@Override\npublic void end(boolean interrupted) {\n    intakeSubsystem.setSpeed(0); // Stop the intake\n    if (interrupted) {\n        System.out.println(\"IntakeSpeedCommand: Interrupted\");\n    } else {\n        System.out.println(\"IntakeSpeedCommand: Completed\");\n    }\n}"
    },
    {
      "type": "text",
      "title": "Complete IntakeSpeedCommand Example",
      "content": "<p>Here is the full code for a command that sets an intake motor to a desired speed. This example brings together all four lifecycle methods in one file, showing how a typical command is structured in SolversLib.</p>"
    },
    {
      "type": "code",
      "title": "Full IntakeSpeedCommand.java",
      "content": "import com.seattlesolvers.solverslib.command.CommandBase;\n\npublic class IntakeSpeedCommand extends CommandBase {\n    private final IntakeSubsystem intakeSubsystem;\n    private final double desiredSpeed;\n    \n    public IntakeSpeedCommand(IntakeSubsystem intakeSubsystem, double desiredSpeed) {\n        this.intakeSubsystem = intakeSubsystem;\n        this.desiredSpeed = desiredSpeed;\n        addRequirements(intakeSubsystem);\n    }\n    \n    @Override\n    public void initialize() {\n        System.out.println(\"IntakeSpeedCommand: Initializing\");\n    }\n    \n    @Override\n    public void execute() {\n        intakeSubsystem.setSpeed(desiredSpeed);\n    }\n    \n    @Override\n    public boolean isFinished() {\n        return false; // Runs until interrupted\n    }\n    \n    @Override\n    public void end(boolean interrupted) {\n        intakeSubsystem.setSpeed(0);\n        if (interrupted) {\n            System.out.println(\"IntakeSpeedCommand: Interrupted\");\n        } else {\n            System.out.println(\"IntakeSpeedCommand: Completed\");\n        }\n    }\n}" 
    },
    {
      "type": "text",
      "title": "Command Requirements and Resource Management",
      "content": "<p>Commands must declare which subsystems they require using the <code>addRequirements()</code> method. This prevents conflicts between commands that use the same hardware. Here are three use cases:</p>"
    },
    {
      "type": "code",
      "title": "Single Subsystem Requirement",
      "content": "// Use when only one subsystem is needed\npublic class IntakeCommand extends CommandBase {\n    public IntakeCommand(IntakeSubsystem intake) {\n        addRequirements(intake);\n    }\n    // ...\n}\n// Use case: Only the intake is controlled by this command."
    },
    {
      "type": "code",
      "title": "Multiple Subsystem Requirements",
      "content": "// Use when the command needs to control more than one subsystem\npublic class ShootAndIntakeCommand extends CommandBase {\n    public ShootAndIntakeCommand(IntakeSubsystem intake, ShooterSubsystem shooter) {\n        addRequirements(intake, shooter);\n    }\n    // ...\n}\n// Use case: This command coordinates both intake and shooter."
    },
    {
      "type": "code",
      "title": "No Subsystem Requirements",
      "content": "// Use for commands that don't interact with any subsystems\npublic class WaitCommand extends CommandBase {\n    public WaitCommand(double duration) {\n        // No addRequirements() call\n    }\n    // ...\n}\n// Use case: This command just waits for a duration."
    },
    {
      "type": "text",
      "title": "Scheduler Operation and Command Execution",
      "content": "<p>The command scheduler manages which commands are running. In SolversLib, you can use <code>CommandOpMode</code> to simplify command-based OpModes. See the <a href='https://docs.seattlesolvers.com/command-base/command-system/robot-and-commandopmode' target='_blank'>SolversLib CommandOpModeMode Documentation</a> for more details. Below is how you set up and run the scheduler:</p>"
    },
    {
      "type": "code",
      "title": "Before the OpMode Loop",
      "content": "// Initialization before the main loop\nCommandScheduler scheduler = CommandScheduler.getInstance();\nIntakeSubsystem intakeSubsystem = new IntakeSubsystem(hardwareMap);\n// Set up default commands, etc.\nwaitForStart();"
    },
    {
      "type": "code",
      "title": "Inside the OpMode Loop",
      "content": "// Inside while(opModeIsActive())\nscheduler.run();\n// Handle gamepad input and schedule commands as needed\nif (gamepad1.a) {\n    scheduler.schedule(new IntakeCommand(intakeSubsystem));\n}\ntelemetry.update();"
    },
    {
      "type": "text",
      "title": "Command Interruption and Cancellation",
      "content": "<p>Commands can be interrupted if another command requires the same subsystem, if cancelled manually, or when the OpMode ends. Always handle cleanup in <code>end(boolean interrupted)</code>:</p>"
    },
    {
      "type": "code",
      "title": "Handling Interruption in end()",
      "content": "@Override\npublic void end(boolean interrupted) {\n    // Stop motors, reset state, etc.\n    if (interrupted) {\n        System.out.println(\"Command was interrupted\");\n    }\n}"
    },
    {
      "type": "text",
      "title": "Inline Command Examples",
      "content": "<p>Inline commands are useful for simple actions. Here are some examples:</p>"
    },
    {
      "type": "code",
      "title": "InstantCommand Example",
      "content": "// Instantly stop the intake\nnew InstantCommand(intakeSubsystem::stop, intakeSubsystem);"
    },
    {
      "type": "code",
      "title": "RunCommand Example",
      "content": "// Run a method repeatedly while scheduled\nnew RunCommand(() -> intakeSubsystem.setSpeed(0.5), intakeSubsystem);"
    },
    {
      "type": "code",
      "title": "WaitCommand Example",
      "content": "// Wait for 2 seconds\nnew WaitCommand(2.0);"
    },
    {
      "type": "code",
      "title": "ConditionalCommand Example",
      "content": "// Choose between two commands based on a condition\nnew ConditionalCommand(\n    new InstantCommand(intakeSubsystem::start, intakeSubsystem),\n    new InstantCommand(intakeSubsystem::stop, intakeSubsystem),\n    () -> gamepad1.a\n);"
    },
    {
      "type": "exercise-box",
      "title": "Practice: Lift-to-Position Command",
      "description": "Create a command that moves a lift to a desired position using the runToPosition(double pos) method in elevatorSubsystem. Do this in two ways: (1) as a separate command file, and (2) as a RunCommand in CommandOpMode.",
      "tasks": [
        "Write a command class that moves the lift to a specified position using elevatorSubsystem.runToPosition(double pos)",
        "Write a RunCommand that does the same thing, to be used directly in CommandOpMode"
      ],
      "answers": [
        {
          "task": "Write a command class that moves the lift to a specified position using elevatorSubsystem.runToPosition(double pos)",
          "content": "// Separate command file\npublic class MoveLiftToPositionCommand extends CommandBase {\n    private final ElevatorSubsystem elevator;\n    private final double targetPosition;\n    public MoveLiftToPositionCommand(ElevatorSubsystem elevator, double targetPosition) {\n        this.elevator = elevator;\n        this.targetPosition = targetPosition;\n        addRequirements(elevator);\n    }\n    @Override\n    public void initialize() {\n        elevator.runToPosition(targetPosition);\n    }\n    @Override\n    public boolean isFinished() {\n        // Assume elevatorSubsystem has a method to check if at position\n        return elevator.isAtPosition(targetPosition);\n    }\n    @Override\n    public void end(boolean interrupted) {\n        elevator.stop();\n    }\n}"
        },
        {
          "task": "Write a RunCommand that does the same thing, to be used directly in CommandOpMode",
          "content": "// In your CommandOpMode\nnew RunCommand(() -> elevatorSubsystem.runToPosition(targetPosition), elevatorSubsystem)\n    .until(() -> elevatorSubsystem.isAtPosition(targetPosition));"
        }
      ]
    },
    {
      "type": "emphasis-box",
      "title": "Key Takeaways",
      "content": "<ul><li>Commands are built around four lifecycle methods</li><li>Always declare subsystem requirements</li><li>Use CommandOpMode and the scheduler for robust command-based code</li><li>Inline commands are powerful for simple actions</li><li>Handle interruptions in end()</li></ul>"
    }
  ]
} 