{
  "title": "Software Development Best Practices",
  "sections": [
    {
      "type": "text",
      "title": "Introduction to Software Development Best Practices",
      "content": "Good software development practices are essential for FTC teams. Well-organized, maintainable code is easier to debug, extend, and collaborate on. This lesson covers professional development practices that will improve your team's productivity and code quality."
    },
    {
      "type": "rules-box",
      "title": "Why Best Practices Matter",
      "items": [
        "Well-organized code is easier to debug and maintain",
        "Consistent naming and structure improve team collaboration",
        "Version control enables safe experimentation and rollbacks",
        "Modular design makes code reusable and testable"
      ]
    },
    {
      "type": "text",
      "title": "Code Organization and Structure",
      "content": "Organizing your code into logical, focused methods and classes makes it easier to understand, debug, and maintain. Break large OpModes into smaller, well-defined components."
    },
    {
      "type": "code",
      "title": "Well-Organized OpMode - Basic Structure",
      "content": "Organize your OpMode into clear, focused methods with single responsibilities. This example shows proper code organization. Each method has a specific purpose and the code is easy to understand:",
      "code": "public class WellOrganizedOpMode extends OpMode {\n    // Hardware components - grouped by function\n    private DcMotor leftDrive, rightDrive;\n    private Servo armServo, clawServo;\n    private ColorSensor colorSensor;\n    private DistanceSensor distanceSensor;\n    \n    // State variables - clearly named and grouped\n    private RobotState currentState = RobotState.IDLE;\n    private double targetArmPosition = 0.5;\n    private boolean isClawOpen = false;\n    \n    // Configuration constants\n    private static final double ARM_SPEED = 0.02;\n    private static final double CLAW_OPEN_POSITION = 1.0;\n    private static final double CLAW_CLOSED_POSITION = 0.0;\n    \n    @Override\n    public void init() {\n        initializeHardware();\n        configureHardware();\n        resetRobotState();\n        displayInitializationStatus();\n    }\n    \n    @Override\n    public void loop() {\n        processDriverInput();\n        updateRobotState();\n        controlHardware();\n        updateTelemetry();\n    }"
    },
    {
      "type": "text",
      "title": "Understanding Code Organization",
      "content": "Good code organization makes your OpMode easier to understand, debug, and maintain. By grouping related variables together and breaking functionality into focused methods, you create a clear structure that other team members can easily follow."
    },
    {
      "type": "code",
      "title": "Well-Organized OpMode - Hardware Methods",
      "content": "Add hardware initialization and configuration methods with clear separation of concerns. Each method handles one specific aspect of hardware setup:",
      "code": "    // Hardware initialization - focused and clear\n    private void initializeHardware() {\n        try {\n            // Initialize drive motors\n            leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n            rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n            \n            // Initialize servos\n            armServo = hardwareMap.get(Servo.class, \"arm_servo\");\n            clawServo = hardwareMap.get(Servo.class, \"claw_servo\");\n            \n            // Initialize sensors\n            colorSensor = hardwareMap.get(ColorSensor.class, \"color_sensor\");\n            distanceSensor = hardwareMap.get(DistanceSensor.class, \"distance_sensor\");\n            \n        } catch (Exception e) {\n            telemetry.addData(\"ERROR\", \"Hardware initialization failed: \" + e.getMessage());\n        }\n    }\n    \n    // Hardware configuration - separate from initialization\n    private void configureHardware() {\n        if (leftDrive != null && rightDrive != null) {\n            leftDrive.setDirection(DcMotor.Direction.FORWARD);\n            rightDrive.setDirection(DcMotor.Direction.REVERSE);\n            leftDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n            rightDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n        }\n    }\n    \n    // State management - clear and focused\n    private void resetRobotState() {\n        currentState = RobotState.IDLE;\n        targetArmPosition = 0.5;\n        isClawOpen = false;\n    }"
    },
    {
      "type": "text",
      "title": "Separation of Concerns in Hardware Methods",
      "content": "Separating hardware initialization from configuration makes the code more maintainable. Initialization handles getting references to hardware components, while configuration sets up their behavior. State management ensures the robot starts in a known, safe state."
    },
    {
      "type": "code",
      "title": "Well-Organized OpMode - Input Processing Methods",
      "content": "Add input processing methods that handle one concern at a time:",
      "code": "    // Input processing - handle one concern at a time\n    private void processDriverInput() {\n        processDriveInput();\n        processArmInput();\n        processClawInput();\n        processAutonomousTriggers();\n    }\n    \n    private void processDriveInput() {\n        double forward = -gamepad1.left_stick_y;\n        double turn = gamepad1.right_stick_x;\n        \n        double leftPower = forward + turn;\n        double rightPower = forward - turn;\n        \n        // Apply deadzone\n        if (Math.abs(leftPower) < 0.1) leftPower = 0.0;\n        if (Math.abs(rightPower) < 0.1) rightPower = 0.0;\n        \n        setDrivePowers(leftPower, rightPower);\n    }\n    \n    private void processArmInput() {\n        if (gamepad1.dpad_up) {\n            targetArmPosition = Math.min(1.0, targetArmPosition + ARM_SPEED);\n        } else if (gamepad1.dpad_down) {\n            targetArmPosition = Math.max(0.0, targetArmPosition - ARM_SPEED);\n        }\n    }\n    \n    private void processClawInput() {\n        if (gamepad1.a && !isClawOpen) {\n            openClaw();\n        } else if (gamepad1.b && isClawOpen) {\n            closeClaw();\n        }\n    }\n    \n    private void processAutonomousTriggers() {\n        if (gamepad1.x) {\n            startAutonomousSequence();\n        } else if (gamepad1.y) {\n            stopAutonomousSequence();\n        }\n    }"
    },
    {
      "type": "text",
      "title": "Naming Conventions and Documentation",
      "content": "Consistent naming conventions and clear documentation help team members understand and maintain code. Follow established patterns and document complex logic thoroughly."
    },
    {
      "type": "rules-box",
      "title": "Naming Convention Guidelines",
      "items": [
        "Use descriptive names that explain what variables and methods do",
        "Follow camelCase for variables and methods (e.g., leftDriveMotor)",
        "Use UPPER_CASE for constants (e.g., MAX_MOTOR_POWER)",
        "Use PascalCase for class names (e.g., DriveController)",
        "Avoid abbreviations unless they are widely understood"
      ]
    },
    {
      "type": "code",
      "title": "Good Documentation Practices - Class Header",
      "content": "Document your code with clear comments and JavaDoc. This example shows comprehensive documentation:",
      "code": "/**\n * Autonomous OpMode for collecting game elements.\n * This OpMode implements a state machine to drive to game elements,\n * collect them using the intake mechanism, and return to the depot.\n * \n * @author Your Team Name\n * @version 1.0\n */\npublic class AutonomousCollectorOpMode extends OpMode {\n    \n    // Hardware components\n    private DcMotor leftDriveMotor, rightDriveMotor;\n    private DcMotor intakeMotor;\n    private Servo armServo;\n    private ColorSensor gameElementDetector;\n    \n    // State management\n    private AutonomousState currentState = AutonomousState.SEARCHING;\n    private double startTime;\n    private int collectedElements = 0;\n    \n    // Configuration constants\n    private static final double DRIVE_SPEED = 0.6;\n    private static final double TURN_SPEED = 0.4;\n    private static final double INTAKE_SPEED = 0.8;\n    private static final double ARM_UP_POSITION = 0.8;\n    private static final double ARM_DOWN_POSITION = 0.2;\n    private static final int MAX_COLLECTION_TIME_MS = 3000;"
    },
    {
      "type": "code",
      "title": "Good Documentation Practices - Method Documentation",
      "content": "Add comprehensive JavaDoc for methods with clear parameter and return value descriptions:",
      "code": "    /**\n     * Initializes all hardware components.\n     * Maps hardware devices to variables and configures basic settings.\n     */\n    private void initializeHardware() {\n        try {\n            // Initialize drive motors\n            leftDriveMotor = hardwareMap.get(DcMotor.class, \"left_drive\");\n            rightDriveMotor = hardwareMap.get(DcMotor.class, \"right_drive\");\n            \n            // Initialize collection mechanism\n            intakeMotor = hardwareMap.get(DcMotor.class, \"intake_motor\");\n            armServo = hardwareMap.get(Servo.class, \"arm_servo\");\n            \n            // Initialize sensors\n            gameElementDetector = hardwareMap.get(ColorSensor.class, \"color_sensor\");\n            \n        } catch (Exception e) {\n            telemetry.addData(\"ERROR\", \"Hardware initialization failed: \" + e.getMessage());\n        }\n    }\n    \n    /**\n     * Configures robot settings for autonomous operation.\n     * Sets motor directions, zero power behaviors, and initial positions.\n     */\n    private void configureRobot() {\n        // Configure drive motors\n        if (leftDriveMotor != null && rightDriveMotor != null) {\n            leftDriveMotor.setDirection(DcMotor.Direction.FORWARD);\n            rightDriveMotor.setDirection(DcMotor.Direction.REVERSE);\n            leftDriveMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n            rightDriveMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n        }\n        \n        // Configure collection mechanism\n        if (armServo != null) {\n            armServo.setPosition(ARM_DOWN_POSITION); // Start with arm down\n        }\n    }"
    },
    {
      "type": "text",
      "title": "Version Control with Git for FTC Projects",
      "content": "Version control is essential for team collaboration and safe experimentation. Git allows you to track changes, collaborate with teammates, and roll back to previous versions when needed."
    },
    {
      "type": "code",
      "title": "Git Workflow for FTC Teams",
      "content": "Set up a Git workflow for your FTC project. This example shows how to structure your project with version control in mind:",
      "code": "// Git setup and workflow for FTC projects\n// This is a guide for setting up version control\n\n/*\n * GIT SETUP FOR FTC PROJECTS\n * \n * 1. Initialize Git repository:\n *    git init\n * \n * 2. Create .gitignore file:\n *    # Android Studio files\n *    .idea/\n *    *.iml\n *    build/\n *    \n *    # FTC SDK files\n *    FtcRobotController/build/\n *    TeamCode/build/\n *    \n *    # Logs\n *    *.log\n *    \n *    # Temporary files\n *    *.tmp\n *    *.temp\n * \n * 3. Initial commit:\n *    git add .\n *    git commit -m \"Initial FTC project setup\"\n * \n * 4. Create development branch:\n *    git checkout -b development\n * \n * 5. Create feature branches for new features:\n *    git checkout -b feature/autonomous-collector\n *    git checkout -b feature/teleop-improvements\n * \n * 6. Regular workflow:\n *    # Make changes to code\n *    # Test changes\n *    git add .\n *    git commit -m \"Add autonomous collector functionality\"\n *    git push origin feature/autonomous-collector\n * \n * 7. Merge to development:\n *    git checkout development\n *    git merge feature/autonomous-collector\n *    git push origin development\n * \n * 8. Merge to main for competition:\n *    git checkout main\n *    git merge development\n *    git tag -a v1.0 -m \"Competition version 1.0\"\n *    git push origin main --tags\n */"
    },
    {
      "type": "code",
      "title": "Version Controlled OpMode Example",
      "content": "Example of how to structure your project with version control in mind. This OpMode includes version information and competition-specific configuration:",
      "code": "// Example of how to structure your project with version control in mind:\npublic class VersionControlledOpMode extends OpMode {\n    \n    // Version information - useful for tracking which version is running\n    private static final String VERSION = \"1.0.0\";\n    private static final String BUILD_DATE = \"2024-01-15\";\n    private static final String TEAM_NAME = \"Team 1234\";\n    \n    // Configuration that might change between competitions\n    private static final class CompetitionConfig {\n        // These values might be different for each competition\n        public static final double DRIVE_SPEED_MULTIPLIER = 0.8;\n        public static final double TURN_SPEED_MULTIPLIER = 0.6;\n        public static final boolean ENABLE_SAFETY_FEATURES = true;\n        public static final double SAFETY_DISTANCE_CM = 10.0;\n    }\n    \n    // Hardware components\n    private DcMotor leftDrive, rightDrive;\n    private Servo armServo;\n    private ColorSensor colorSensor;\n    \n    @Override\n    public void init() {\n        // Display version information\n        telemetry.addData(\"Version\", VERSION);\n        telemetry.addData(\"Build Date\", BUILD_DATE);\n        telemetry.addData(\"Team\", TEAM_NAME);\n        telemetry.addData(\"Config\", \"Drive: \" + CompetitionConfig.DRIVE_SPEED_MULTIPLIER + \n                                   \", Turn: \" + CompetitionConfig.TURN_SPEED_MULTIPLIER);\n        \n        initializeHardware();\n    }"
    },
    {
      "type": "text",
      "title": "Modular Design Principles",
      "content": "Modular design makes your code more maintainable, testable, and reusable. Break your robot functionality into focused classes that handle specific responsibilities."
    },
    {
      "type": "code",
      "title": "Modular Robot Design - Drive Controller",
      "content": "Implement a modular design with separate classes for different robot functions. Start with the drive controller:",
      "code": "// Modular robot design with separate classes for different functions\n\n/**\n * Drive controller class - handles all drive train operations\n */\npublic class DriveController {\n    private DcMotor leftMotor, rightMotor;\n    private double maxSpeed = 1.0;\n    private boolean isEnabled = true;\n    \n    public DriveController(HardwareMap hardwareMap) {\n        leftMotor = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightMotor = hardwareMap.get(DcMotor.class, \"right_drive\");\n        \n        if (leftMotor != null && rightMotor != null) {\n            leftMotor.setDirection(DcMotor.Direction.FORWARD);\n            rightMotor.setDirection(DcMotor.Direction.REVERSE);\n            leftMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n            rightMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n        }\n    }\n    \n    public void setMaxSpeed(double maxSpeed) {\n        this.maxSpeed = Math.max(0.0, Math.min(1.0, maxSpeed));\n    }\n    \n    public void drive(double forward, double turn) {\n        if (!isEnabled) return;\n        \n        double leftPower = (forward + turn) * maxSpeed;\n        double rightPower = (forward - turn) * maxSpeed;\n        \n        // Apply deadzone\n        if (Math.abs(leftPower) < 0.1) leftPower = 0.0;\n        if (Math.abs(rightPower) < 0.1) rightPower = 0.0;\n        \n        setPowers(leftPower, rightPower);\n    }\n    \n    public void setPowers(double leftPower, double rightPower) {\n        if (leftMotor != null) leftMotor.setPower(leftPower);\n        if (rightMotor != null) rightMotor.setPower(rightPower);\n    }\n    \n    public void stop() {\n        setPowers(0.0, 0.0);\n    }\n    \n    public void enable() { isEnabled = true; }\n    public void disable() { isEnabled = false; }\n    \n    public double getLeftPower() {\n        return leftMotor != null ? leftMotor.getPower() : 0.0;\n    }\n    \n    public double getRightPower() {\n        return rightMotor != null ? rightMotor.getPower() : 0.0;\n    }\n}"
    },
    {
      "type": "code",
      "title": "Modular Robot Design - Arm Controller",
      "content": "Add an arm controller class to handle arm and claw operations:",
      "code": "/**\n * Arm controller class - handles arm and claw operations\n */\npublic class ArmController {\n    private Servo armServo, clawServo;\n    private double currentArmPosition = 0.5;\n    private boolean isClawOpen = false;\n    private double armSpeed = 0.02;\n    \n    public ArmController(HardwareMap hardwareMap) {\n        armServo = hardwareMap.get(Servo.class, \"arm_servo\");\n        clawServo = hardwareMap.get(Servo.class, \"claw_servo\");\n    }\n    \n    public void setArmSpeed(double speed) {\n        this.armSpeed = Math.max(0.01, Math.min(0.1, speed));\n    }\n    \n    public void moveArmUp() {\n        currentArmPosition = Math.min(1.0, currentArmPosition + armSpeed);\n        updateArmPosition();\n    }\n    \n    public void moveArmDown() {\n        currentArmPosition = Math.max(0.0, currentArmPosition - armSpeed);\n        updateArmPosition();\n    }\n    \n    public void setArmPosition(double position) {\n        currentArmPosition = Math.max(0.0, Math.min(1.0, position));\n        updateArmPosition();\n    }\n    \n    public void openClaw() {\n        isClawOpen = true;\n        updateClawPosition();\n    }\n    \n    public void closeClaw() {\n        isClawOpen = false;\n        updateClawPosition();\n    }\n    \n    public void toggleClaw() {\n        isClawOpen = !isClawOpen;\n        updateClawPosition();\n    }\n    \n    private void updateArmPosition() {\n        if (armServo != null) {\n            armServo.setPosition(currentArmPosition);\n        }\n    }\n    \n    private void updateClawPosition() {\n        if (clawServo != null) {\n            clawServo.setPosition(isClawOpen ? 1.0 : 0.0);\n        }\n    }\n    \n    public double getArmPosition() { return currentArmPosition; }\n    public boolean isClawOpen() { return isClawOpen; }\n}"
    },
    {
      "type": "code",
      "title": "Modular Robot Design - Sensor Manager",
      "content": "Add a sensor manager class to handle all sensor operations:",
      "code": "/**\n * Sensor manager class - handles all sensor operations\n */\npublic class SensorManager {\n    private ColorSensor colorSensor;\n    private DistanceSensor distanceSensor;\n    private long lastReadTime = 0;\n    private static final long READ_INTERVAL = 50; // 50ms between reads\n    \n    private int[] colorReadings = new int[3];\n    private double distanceReading = 0.0;\n    \n    public SensorManager(HardwareMap hardwareMap) {\n        colorSensor = hardwareMap.get(ColorSensor.class, \"color_sensor\");\n        distanceSensor = hardwareMap.get(DistanceSensor.class, \"distance_sensor\");\n    }\n    \n    public void updateReadings() {\n        long currentTime = System.currentTimeMillis();\n        if (currentTime - lastReadTime > READ_INTERVAL) {\n            if (colorSensor != null) {\n                colorReadings[0] = colorSensor.red();\n                colorReadings[1] = colorSensor.green();\n                colorReadings[2] = colorSensor.blue();\n            }\n            \n            if (distanceSensor != null) {\n                distanceReading = distanceSensor.getDistance(DistanceUnit.CM);\n            }\n            \n            lastReadTime = currentTime;\n        }\n    }\n    \n    public int getRed() { return colorReadings[0]; }\n    public int getGreen() { return colorReadings[1]; }\n    public int getBlue() { return colorReadings[2]; }\n    public double getDistance() { return distanceReading; }\n    \n    public boolean isGameElementDetected() {\n        // Example detection logic\n        return getRed() > 100 && getGreen() > 100 && getBlue() < 50;\n    }\n    \n    public boolean isTooClose() {\n        return getDistance() < 5.0; // Less than 5cm\n    }\n}"
    },
    {
      "type": "code",
      "title": "Modular Robot Design - Main OpMode",
      "content": "Create the main OpMode that uses the modular components:",
      "code": "/**\n * Main OpMode that uses the modular components\n */\npublic class ModularOpMode extends OpMode {\n    private DriveController driveController;\n    private ArmController armController;\n    private SensorManager sensorManager;\n    \n    @Override\n    public void init() {\n        // Initialize all controllers\n        driveController = new DriveController(hardwareMap);\n        armController = new ArmController(hardwareMap);\n        sensorManager = new SensorManager(hardwareMap);\n        \n        // Configure controllers\n        driveController.setMaxSpeed(0.8);\n        armController.setArmSpeed(0.02);\n        \n        telemetry.addData(\"Status\", \"Modular OpMode initialized\");\n    }\n    \n    @Override\n    public void loop() {\n        // Update sensor readings\n        sensorManager.updateReadings();\n        \n        // Process input\n        processDriveInput();\n        processArmInput();\n        \n        // Apply safety checks\n        applySafetyChecks();\n        \n        // Update telemetry\n        updateTelemetry();\n    }\n    \n    private void processDriveInput() {\n        double forward = -gamepad1.left_stick_y;\n        double turn = gamepad1.right_stick_x;\n        \n        driveController.drive(forward, turn);\n    }\n    \n    private void processArmInput() {\n        if (gamepad1.dpad_up) {\n            armController.moveArmUp();\n        } else if (gamepad1.dpad_down) {\n            armController.moveArmDown();\n        }\n        \n        if (gamepad1.a) {\n            armController.toggleClaw();\n        }\n    }\n    \n    private void applySafetyChecks() {\n        // Stop if too close to something\n        if (sensorManager.isTooClose()) {\n            driveController.stop();\n            telemetry.addData(\"Safety\", \"Stopped - too close to obstacle\");\n        }\n    }\n    \n    private void updateTelemetry() {\n        telemetry.addData(\"=== Drive Status ===\", \"\");\n        telemetry.addData(\"Left Power\", driveController.getLeftPower());\n        telemetry.addData(\"Right Power\", driveController.getRightPower());\n        \n        telemetry.addData(\"=== Arm Status ===\", \"\");\n        telemetry.addData(\"Arm Position\", String.format(\"%.2f\", armController.getArmPosition()));\n        telemetry.addData(\"Claw Open\", armController.isClawOpen());\n        \n        telemetry.addData(\"=== Sensor Status ===\", \"\");\n        telemetry.addData(\"Color R\", sensorManager.getRed());\n        telemetry.addData(\"Color G\", sensorManager.getGreen());\n        telemetry.addData(\"Color B\", sensorManager.getBlue());\n        telemetry.addData(\"Distance (cm)\", String.format(\"%.1f\", sensorManager.getDistance()));\n        telemetry.addData(\"Game Element Detected\", sensorManager.isGameElementDetected());\n    }\n}"
    },
    {
      "type": "exercise-box",
      "title": "Software Development Best Practices Exercise",
      "description": "Refactor an existing OpMode to follow software development best practices. Organize the code, add proper documentation, and implement modular design.",
      "tasks": [
        "Take a complex OpMode and break it into focused methods",
        "Add comprehensive JavaDoc documentation",
        "Implement consistent naming conventions",
        "Create modular classes for different robot functions",
        "Set up Git version control for the project",
        "Create a development workflow with branching"
      ],
      "content": "// Starter code for the refactoring exercise:\npublic class RefactoringExerciseOpMode extends OpMode {\n    // TODO: Break this into modular components\n    // TODO: Add proper documentation\n    // TODO: Implement consistent naming\n    // TODO: Create separate classes for different functions\n    \n    @Override\n    public void init() {\n        // TODO: Initialize modular components\n        // TODO: Add proper error handling\n        // TODO: Add initialization documentation\n    }\n    \n    @Override\n    public void loop() {\n        // TODO: Organize into focused methods\n        // TODO: Add proper state management\n        // TODO: Implement safety checks\n        // TODO: Add comprehensive telemetry\n    }\n}"
    },
    {
      "type": "link-grid",
      "title": "Additional Resources",
      "links": [
        "<a href=\"https://gm0.org/en/latest/docs/software/tutorials/opmodes.html\" target=\"_blank\">gm0: OpMode Structure</a>",
        "<a href=\"https://google.github.io/styleguide/javaguide.html\" target=\"_blank\">Google Java Style Guide</a>",
        "<a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\">Git Documentation</a>",
        "<a href=\"https://gm0.org/en/latest/docs/software/tutorials/git.html\" target=\"_blank\">gm0: Git Tutorial</a>",
        "<a href=\"https://gm0.org/en/latest/docs/software/tutorials/classes.html\" target=\"_blank\">gm0: Classes and Objects</a>"
      ]
    }
  ]
} 