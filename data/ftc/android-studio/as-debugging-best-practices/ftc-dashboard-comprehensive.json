{
  "title": "FTCDashboard Comprehensive Guide",
  "sections": [
    {
      "type": "text",
      "title": "What is FTCDashboard?",
      "content": "<p>FTCDashboard is a powerful web-based dashboard that provides real-time robot monitoring and control capabilities for FTC teams. Unlike basic telemetry that only shows text output, FTCDashboard offers a rich graphical interface with live data plotting, field visualization, configuration management, remote control features, and camera streaming.</p>"
    },
    {
      "type": "rules-box",
      "title": "Key Benefits of FTCDashboard",
      "items": [
        "Real-time data visualization with live graphs and charts",
        "Field view for robot position tracking and path visualization",
        "Runtime configuration without code recompilation",
        "Remote OpMode control and custom buttons",
        "Camera streaming integration",
        "Multi-device support for team collaboration"
      ]
    },
    {
      "type": "text",
      "title": "Installation and Setup",
      "content": "<p>FTCDashboard is installed as a Gradle dependency in your Android Studio project. The library automatically sets up a web server on your robot that can be accessed from any device on the same network.</p>"
    },
    {
      "type": "code",
      "title": "Step 1: Add Gradle Dependency",
      "content": "Add the FTCDashboard library to your app-level build.gradle file:",
      "code": "dependencies {\n    // Other dependencies...\n    implementation 'com.acmerobotics.dashboard:dashboard:0.4.17'\n}\n\n// Make sure you have the correct repositories\nrepositories {\n    google()\n    mavenCentral()\n    maven { url = \"https://maven.brott.dev/\" }\n}"
    },
    {
      "type": "code",
      "title": "Step 2: Required Imports",
      "content": "Add these imports at the top of your OpMode:",
      "code": "import com.acmerobotics.dashboard.FtcDashboard;\nimport com.acmerobotics.dashboard.config.Config;\nimport com.acmerobotics.dashboard.telemetry.MultipleTelemetry;\nimport com.acmerobotics.dashboard.telemetry.TelemetryPacket;\nimport com.acmerobotics.roadrunner.geometry.Pose2d;\nimport org.firstinspires.ftc.robotcore.external.hardware.camera.Webcam;"
    },
    {
      "type": "code",
      "title": "Step 3: Basic OpMode Setup",
      "content": "Create a basic OpMode that initializes the dashboard:",
      "code": "@Config\npublic class ComprehensiveDashboardOpMode extends OpMode {\n    private FtcDashboard dashboard;\n    private MultipleTelemetry telemetry;\n    private TelemetryPacket packet;\n    \n    // Hardware objects\n    private DcMotor leftMotor, rightMotor;\n    private Servo armServo;\n    private Webcam webcam;\n    \n    // Robot position tracking\n    private double x = 0, y = 0, heading = 0;\n    private List<Pose2d> actualPath = new ArrayList<>();\n    \n    // Configuration variables\n    public static double DRIVE_SPEED = 0.5;\n    public static double TURN_SPEED = 0.3;\n    public static int TARGET_POSITION = 1000;\n    public static boolean USE_ENCODERS = true;\n    public static double PID_KP = 0.1;\n    public static double PID_KI = 0.0;\n    public static double PID_KD = 0.0;\n    \n    // Camera configuration\n    public static int CAMERA_WIDTH = 640;\n    public static int CAMERA_HEIGHT = 480;\n    public static int CAMERA_FPS = 30;\n    \n    // Status tracking\n    private boolean cameraActive = false;\n    private int frameCount = 0;\n    private boolean isExecutingAction = false;\n    private String currentAction = \"None\";\n    \n    @Override\n    public void init() {\n        initializeDashboard();\n        initializeHardware();\n        initializeCamera();\n        \n        telemetry.addData(\"Status\", \"Dashboard initialized\");\n        telemetry.update();\n    }\n    \n    private void initializeDashboard() {\n        dashboard = FtcDashboard.getInstance();\n        telemetry = new MultipleTelemetry(this.telemetry, dashboard.getTelemetry());\n        packet = new TelemetryPacket();\n    }\n    \n    private void initializeHardware() {\n        leftMotor = hardwareMap.get(DcMotor.class, \"left_motor\");\n        rightMotor = hardwareMap.get(DcMotor.class, \"right_motor\");\n        armServo = hardwareMap.get(Servo.class, \"arm_servo\");\n        \n        if (USE_ENCODERS) {\n            leftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\n            rightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\n        }\n    }\n    \n    private void initializeCamera() {\n        try {\n            webcam = hardwareMap.get(Webcam.class, \"webcam\");\n            webcam.setViewportRenderer(Webcam.ViewportRenderer.BUFFERED);\n            webcam.setResolution(CAMERA_WIDTH, CAMERA_HEIGHT);\n            webcam.setFps(CAMERA_FPS);\n            cameraActive = webcam.isOpen();\n        } catch (Exception e) {\n            telemetry.addData(\"Camera Error\", \"Failed to initialize: \" + e.getMessage());\n            cameraActive = false;\n        }\n    }"
    },
    {
      "type": "text",
      "title": "Telemetry and Plotting",
      "content": "<p>FTCDashboard transforms basic telemetry into a powerful visualization tool. While traditional telemetry only displays text data, FTCDashboard provides real-time plotting capabilities that make it much easier to understand robot behavior, tune PID controllers, and debug autonomous programs.</p>"
    },
    {
      "type": "code",
      "title": "Real-time Data Plotting",
      "content": "Add this to your loop() method for real-time plotting:",
      "code": "@Override\npublic void loop() {\n    updateRobotPosition();\n    updateCameraStatus();\n    \n    // Basic telemetry (shows in both Driver Station and Dashboard)\n    telemetry.addData(\"Loop Time\", \"%.2f seconds\", getRuntime());\n    telemetry.addData(\"Battery Voltage\", \"%.2f V\", getBatteryVoltage());\n    \n    // Dashboard-specific telemetry with plotting\n    packet.put(\"Loop Time\", getRuntime());\n    packet.put(\"Battery Voltage\", getBatteryVoltage());\n    packet.put(\"Left Motor Power\", leftMotor.getPower());\n    packet.put(\"Right Motor Power\", rightMotor.getPower());\n    packet.put(\"Left Encoder Position\", leftMotor.getCurrentPosition());\n    packet.put(\"Right Encoder Position\", rightMotor.getCurrentPosition());\n    packet.put(\"Robot X Position\", x);\n    packet.put(\"Robot Y Position\", y);\n    packet.put(\"Robot Heading\", heading);\n    \n    // Create scatter plots for analysis\n    packet.put(\"Time vs Left Power\", getRuntime(), leftMotor.getPower());\n    packet.put(\"Time vs Right Power\", getRuntime(), rightMotor.getPower());\n    packet.put(\"Power vs Position\", leftMotor.getPower(), leftMotor.getCurrentPosition());\n    \n    // Color code the plots\n    packet.put(\"Left Motor Power:color\", \"red\");\n    packet.put(\"Right Motor Power:color\", \"blue\");\n    packet.put(\"Robot X Position:color\", \"green\");\n    packet.put(\"Robot Y Position:color\", \"orange\");\n    \n    // Send telemetry to both destinations\n    telemetry.update();\n    dashboard.sendTelemetryPacket(packet);\n    \n    sleep(50); // 20 Hz update rate\n}\n\nprivate void updateRobotPosition() {\n    // Read current encoder positions\n    double leftPos = leftMotor.getCurrentPosition();\n    double rightPos = rightMotor.getCurrentPosition();\n    \n    // Calculate average distance traveled (simplified odometry)\n    double distance = (leftPos + rightPos) / 2.0 * 0.001; // 0.001 meters per tick\n    \n    // Calculate x, y position based on current heading\n    x = distance * Math.cos(heading);\n    y = distance * Math.sin(heading);\n    \n    // Update heading based on difference between left and right encoders\n    double headingChange = (rightPos - leftPos) * 0.0001;\n    heading += headingChange;\n    \n    // Record position for path tracking\n    if (actualPath.size() > 100) {\n        actualPath.remove(0);\n    }\n    actualPath.add(new Pose2d(x, y, heading));\n}\n\nprivate void updateCameraStatus() {\n    frameCount++;\n    if (webcam != null) {\n        cameraActive = webcam.isOpen();\n    }\n    \n    packet.put(\"Camera Active\", cameraActive);\n    packet.put(\"Frame Count\", frameCount);\n}\n\nprivate double getBatteryVoltage() {\n    return hardwareMap.voltageSensor.get(\"Expansion Hub 2\").getVoltage();\n}"
    },
    {
      "type": "text",
      "title": "Configuration Variables",
      "content": "<p>FTCDashboard's configuration system allows you to change robot parameters without recompiling your code. This is incredibly useful for tuning PID values, adjusting autonomous parameters, and testing different configurations during development and competition.</p>"
    },
    {
      "type": "code",
      "title": "Configuration Groups",
      "content": "Add these configuration groups to organize your parameters:",
      "code": "// Drive configuration group\npublic static class DriveConfig {\n    @Value(min = 0.0, max = 1.0)\n    public static double MAX_SPEED = 0.8;\n    \n    @Value(min = 0.0, max = 1.0)\n    public static double TURN_SPEED = 0.6;\n    \n    public static boolean REVERSE_LEFT = false;\n    public static boolean REVERSE_RIGHT = false;\n}\n\n// PID configuration group\npublic static class PIDConfig {\n    @Value(min = 0.0, max = 2.0)\n    public static double KP = 0.1;\n    \n    @Value(min = 0.0, max = 1.0)\n    public static double KI = 0.0;\n    \n    @Value(min = 0.0, max = 1.0)\n    public static double KD = 0.0;\n    \n    @Value(min = 0, max = 2000)\n    public static int TOLERANCE = 50;\n}\n\n// Camera configuration group\npublic static class CameraConfig {\n    @Value(min = 320, max = 1280)\n    public static int WIDTH = 640;\n    \n    @Value(min = 240, max = 720)\n    public static int HEIGHT = 480;\n    \n    @Value(min = 10, max = 60)\n    public static int FPS = 30;\n    \n    public static boolean ENABLE_STREAMING = true;\n}"
    },
    {
      "type": "text",
      "title": "Field View Visualization",
      "content": "<p>FTCDashboard's field view provides a powerful way to visualize your robot's position and movement on the game field. This feature is essential for autonomous programming, path planning, and debugging robot navigation.</p>"
    },
    {
      "type": "code",
      "title": "Field View Setup",
      "content": "Add these methods to set up field visualization:",
      "code": "// Field dimensions (adjust for your specific game)\nprivate static final double FIELD_WIDTH = 12.0;   // 12 feet in meters\nprivate static final double FIELD_LENGTH = 12.0;  // 12 feet in meters\n\nprivate void setupFieldView() {\n    // Set field dimensions for proper coordinate system\n    packet.fieldOverlay().setFieldDimensions(FIELD_WIDTH, FIELD_LENGTH);\n    \n    // Draw field boundaries\n    packet.fieldOverlay()\n        .setStroke(\"black\")\n        .setStrokeWidth(0.05)\n        .strokeRect(0, 0, FIELD_WIDTH, FIELD_LENGTH);\n    \n    // Draw coordinate system reference\n    packet.fieldOverlay()\n        .setStroke(\"red\")\n        .setStrokeWidth(0.02)\n        .strokeLine(0, 0, 1, 0); // X-axis\n    \n    packet.fieldOverlay()\n        .setStroke(\"green\")\n        .setStrokeWidth(0.02)\n        .strokeLine(0, 0, 0, 1); // Y-axis\n}\n\nprivate void drawRobotOnField() {\n    // Draw robot as a blue circle\n    packet.fieldOverlay()\n        .setFill(\"blue\")\n        .fillCircle(x, y, 0.1);\n    \n    // Draw robot heading as a yellow line\n    packet.fieldOverlay()\n        .setStroke(\"yellow\")\n        .setStrokeWidth(0.03)\n        .strokeLine(x, y, \n                   x + 0.2 * Math.cos(heading), \n                   y + 0.2 * Math.sin(heading));\n}\n\nprivate void drawActualPath() {\n    // Draw actual path in red\n    packet.fieldOverlay()\n        .setStroke(\"red\")\n        .setStrokeWidth(0.02);\n    \n    for (int i = 0; i < actualPath.size() - 1; i++) {\n        Pose2d current = actualPath.get(i);\n        Pose2d next = actualPath.get(i + 1);\n        \n        packet.fieldOverlay().strokeLine(current.getX(), current.getY(), \n                                       next.getX(), next.getY());\n    }\n}\n\nprivate void drawPlannedPath() {\n    // Define planned path waypoints\n    double[][] waypoints = {\n        {0, 0, 0},      // Start at origin\n        {1, 0, 0},      // Move 1 meter right\n        {1, 1, Math.PI/2}, // Move 1 meter up, turn 90 degrees\n        {0, 1, Math.PI},   // Move 1 meter left, turn 180 degrees\n        {0, 0, -Math.PI/2} // Return to start, turn -90 degrees\n    };\n    \n    // Draw planned path in blue\n    packet.fieldOverlay()\n        .setStroke(\"blue\")\n        .setStrokeWidth(0.03);\n    \n    for (int i = 0; i < waypoints.length - 1; i++) {\n        double[] current = waypoints[i];\n        double[] next = waypoints[i + 1];\n        \n        packet.fieldOverlay().strokeLine(current[0], current[1], \n                                       next[0], next[1]);\n    }\n    \n    // Draw waypoint markers\n    for (double[] waypoint : waypoints) {\n        packet.fieldOverlay()\n            .setFill(\"blue\")\n            .fillCircle(waypoint[0], waypoint[1], 0.05);\n    }\n}\n\nprivate void drawGameElements() {\n    // Draw cones as orange circles\n    packet.fieldOverlay()\n        .setFill(\"orange\")\n        .fillCircle(2, 2, 0.1);\n    packet.fieldOverlay()\n        .setFill(\"orange\")\n        .fillCircle(8, 3, 0.1);\n    \n    // Draw cubes as purple rectangles\n    packet.fieldOverlay()\n        .setFill(\"purple\")\n        .fillRect(1, 1, 0.2, 0.2);\n    packet.fieldOverlay()\n        .setFill(\"purple\")\n        .fillRect(9, 6, 0.2, 0.2);\n    \n    // Draw scoring zones as semi-transparent green rectangles\n    packet.fieldOverlay()\n        .setFill(\"green\")\n        .setFillAlpha(0.2)\n        .fillRect(10, 10, 2, 2);\n}"
    },
    {
      "type": "text",
      "title": "OpMode Controls",
      "content": "<p>FTCDashboard provides powerful remote control capabilities that allow you to start, stop, and control OpModes from the web interface. This is particularly useful for autonomous testing, debugging, and competition scenarios.</p>"
    },
    {
      "type": "code",
      "title": "Custom Button Actions",
      "content": "Add these methods for custom button functionality:",
      "code": "// Custom action methods\nprivate void checkCustomActions() {\n    // These actions would be triggered by custom buttons in the dashboard\n    // For now, we'll use gamepad buttons as examples\n    \n    if (gamepad1.a && !isExecutingAction) {\n        executeForwardAction();\n    } else if (gamepad1.b && !isExecutingAction) {\n        executeTurnAction();\n    } else if (gamepad1.x && !isExecutingAction) {\n        executeArmUpAction();\n    } else if (gamepad1.y && !isExecutingAction) {\n        executeArmDownAction();\n    } else if (gamepad1.back) {\n        stopAllActions();\n    }\n}\n\nprivate void executeForwardAction() {\n    isExecutingAction = true;\n    currentAction = \"Moving Forward\";\n    \n    int targetPosition = (int) TARGET_POSITION;\n    leftMotor.setTargetPosition(targetPosition);\n    rightMotor.setTargetPosition(targetPosition);\n    \n    leftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);\n    rightMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);\n    \n    leftMotor.setPower(DRIVE_SPEED);\n    rightMotor.setPower(DRIVE_SPEED);\n}\n\nprivate void executeTurnAction() {\n    isExecutingAction = true;\n    currentAction = \"Turning\";\n    \n    // Calculate encoder ticks for turn\n    double wheelCircumference = 2 * Math.PI * 2; // 2 inch radius\n    double robotCircumference = 2 * Math.PI * 12; // 12 inch robot width\n    int targetTicks = (int) ((90.0 / 360.0) * robotCircumference / wheelCircumference * 1440);\n    \n    leftMotor.setTargetPosition(targetTicks);\n    rightMotor.setTargetPosition(-targetTicks);\n    \n    leftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);\n    rightMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);\n    \n    leftMotor.setPower(TURN_SPEED);\n    rightMotor.setPower(TURN_SPEED);\n}\n\nprivate void executeArmUpAction() {\n    isExecutingAction = true;\n    currentAction = \"Arm Up\";\n    armServo.setPosition(1.0);\n    \n    // Simulate action completion after a delay\n    new Thread(() -> {\n        try {\n            Thread.sleep(1000);\n            stopAllActions();\n        } catch (InterruptedException e) {\n            // Handle interruption\n        }\n    }).start();\n}\n\nprivate void executeArmDownAction() {\n    isExecutingAction = true;\n    currentAction = \"Arm Down\";\n    armServo.setPosition(0.0);\n    \n    // Simulate action completion after a delay\n    new Thread(() -> {\n        try {\n            Thread.sleep(1000);\n            stopAllActions();\n        } catch (InterruptedException e) {\n            // Handle interruption\n        }\n    }).start();\n}\n\nprivate void stopAllActions() {\n    isExecutingAction = false;\n    currentAction = \"None\";\n    \n    leftMotor.setPower(0);\n    rightMotor.setPower(0);\n    \n    leftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\n    rightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\n}"
    },
    {
      "type": "text",
      "title": "Camera Streaming",
      "content": "<p>FTCDashboard provides powerful camera streaming capabilities that allow you to view live video feeds from your robot's cameras directly in the web interface. This is essential for vision-based autonomous programming and real-time robot monitoring.</p>"
    },
    {
      "type": "code",
      "title": "Camera Integration",
      "content": "Add these methods for camera integration:",
      "code": "private void updateCameraConfiguration() {\n    // Update camera settings if they've changed\n    if (webcam != null && webcam.isOpen()) {\n        try {\n            webcam.setResolution(CameraConfig.WIDTH, CameraConfig.HEIGHT);\n            webcam.setFps(CameraConfig.FPS);\n        } catch (Exception e) {\n            telemetry.addData(\"Camera Config Error\", e.getMessage());\n        }\n    }\n}\n\nprivate void sendCameraData() {\n    packet.put(\"Camera Active\", cameraActive);\n    packet.put(\"Frame Count\", frameCount);\n    packet.put(\"Camera Width\", CameraConfig.WIDTH);\n    packet.put(\"Camera Height\", CameraConfig.HEIGHT);\n    packet.put(\"Camera FPS\", CameraConfig.FPS);\n    packet.put(\"Enable Streaming\", CameraConfig.ENABLE_STREAMING);\n    \n    // Simulate color detection (in practice, you'd analyze actual camera frames)\n    if (CameraConfig.ENABLE_STREAMING) {\n        double redIntensity = Math.random() * 255;\n        double greenIntensity = Math.random() * 255;\n        double blueIntensity = Math.random() * 255;\n        \n        packet.put(\"Red Intensity\", redIntensity);\n        packet.put(\"Green Intensity\", greenIntensity);\n        packet.put(\"Blue Intensity\", blueIntensity);\n        packet.put(\"Red Detected\", redIntensity > 150);\n        packet.put(\"Green Detected\", greenIntensity > 150);\n        packet.put(\"Blue Detected\", blueIntensity > 150);\n    }\n}\n\n@Override\npublic void stop() {\n    // Close camera properly\n    if (webcam != null && webcam.isOpen()) {\n        webcam.close();\n        cameraActive = false;\n    }\n    \n    // Stop all motors for safety\n    leftMotor.setPower(0);\n    rightMotor.setPower(0);\n    \n    // Send final status to dashboard\n    packet.put(\"Status\", \"Stopped\");\n    packet.put(\"Final Frame Count\", frameCount);\n    dashboard.sendTelemetryPacket(packet);\n    \n    telemetry.addData(\"Status\", \"OpMode stopped\");\n    telemetry.update();\n}"
    },
    {
      "type": "text",
      "title": "Complete Integration Example",
      "content": "<p>Here's how to integrate all dashboard features into a single comprehensive OpMode:</p>"
    },
    {
      "type": "code",
      "title": "Complete Dashboard Integration",
      "content": "Add this to your main loop() method to integrate all features:",
      "code": "@Override\npublic void loop() {\n    // 1. Update robot position and camera status\n    updateRobotPosition();\n    updateCameraStatus();\n    updateCameraConfiguration();\n    \n    // 2. Check for custom actions\n    checkCustomActions();\n    \n    // 3. Monitor action completion\n    if (isExecutingAction) {\n        if (leftMotor.getMode() == DcMotor.RunMode.RUN_TO_POSITION) {\n            if (!leftMotor.isBusy() && !rightMotor.isBusy()) {\n                stopAllActions();\n            }\n        }\n    }\n    \n    // 4. Normal robot control when not executing custom action\n    if (!isExecutingAction) {\n        normalControl();\n    }\n    \n    // 5. Update field view\n    setupFieldView();\n    drawRobotOnField();\n    drawActualPath();\n    drawPlannedPath();\n    drawGameElements();\n    \n    // 6. Send all data to dashboard\n    sendAllTelemetry();\n    \n    // 7. Update telemetry\n    updateTelemetry();\n    \n    sleep(50); // 20 Hz update rate\n}\n\nprivate void normalControl() {\n    double leftPower = gamepad1.left_stick_y * DriveConfig.MAX_SPEED;\n    double rightPower = gamepad1.right_stick_y * DriveConfig.MAX_SPEED;\n    \n    // Handle turning\n    if (Math.abs(gamepad1.right_stick_x) > 0.1) {\n        leftPower = DriveConfig.TURN_SPEED * gamepad1.right_stick_x;\n        rightPower = -DriveConfig.TURN_SPEED * gamepad1.right_stick_x;\n    }\n    \n    leftMotor.setPower(leftPower);\n    rightMotor.setPower(rightPower);\n}\n\nprivate void sendAllTelemetry() {\n    // Basic telemetry\n    packet.put(\"Loop Time\", getRuntime());\n    packet.put(\"Battery Voltage\", getBatteryVoltage());\n    packet.put(\"Status\", isExecutingAction ? \"Executing Action\" : \"Ready\");\n    packet.put(\"Current Action\", currentAction);\n    \n    // Motor data\n    packet.put(\"Left Motor Power\", leftMotor.getPower());\n    packet.put(\"Right Motor Power\", rightMotor.getPower());\n    packet.put(\"Left Encoder\", leftMotor.getCurrentPosition());\n    packet.put(\"Right Encoder\", rightMotor.getCurrentPosition());\n    \n    // Robot position\n    packet.put(\"Robot X\", x);\n    packet.put(\"Robot Y\", y);\n    packet.put(\"Robot Heading\", heading);\n    \n    // Configuration values\n    packet.put(\"Drive Speed\", DriveConfig.MAX_SPEED);\n    packet.put(\"Turn Speed\", DriveConfig.TURN_SPEED);\n    packet.put(\"PID Kp\", PIDConfig.KP);\n    packet.put(\"PID Ki\", PIDConfig.KI);\n    packet.put(\"PID Kd\", PIDConfig.KD);\n    \n    // Camera data\n    sendCameraData();\n    \n    // Send to dashboard\n    dashboard.sendTelemetryPacket(packet);\n}\n\nprivate void updateTelemetry() {\n    telemetry.addData(\"Status\", isExecutingAction ? \"Executing Action\" : \"Ready\");\n    telemetry.addData(\"Current Action\", currentAction);\n    telemetry.addData(\"Left Power\", \"%.2f\", leftMotor.getPower());\n    telemetry.addData(\"Right Power\", \"%.2f\", rightMotor.getPower());\n    telemetry.addData(\"Position\", \"(%.2f, %.2f)\", x, y);\n    telemetry.addData(\"Heading\", \"%.2f rad\", heading);\n    telemetry.addData(\"Camera Active\", cameraActive);\n    telemetry.addData(\"Frame Count\", frameCount);\n    telemetry.update();\n}"
    },
    {
      "type": "exercise-box",
      "title": "Practice Exercise: Comprehensive Dashboard Implementation",
      "description": "Create a complete OpMode that demonstrates all FTCDashboard features working together.",
      "tasks": [
        "Set up FTCDashboard with all required imports and initialization",
        "Implement real-time data plotting with multiple data series",
        "Create configuration variables for different robot parameters",
        "Add field view visualization with robot tracking and path planning",
        "Implement custom button actions for robot control",
        "Add camera streaming with basic image processing",
        "Test all features and verify they work together properly"
      ],
      "content": "// Your comprehensive OpMode should include:\n// 1. Dashboard initialization and hardware setup\n// 2. Real-time plotting of motor data, position, and sensor values\n// 3. Configuration variables for PID, drive, and camera settings\n// 4. Field view with robot position, planned path, and actual path\n// 5. Custom buttons for autonomous actions and testing\n// 6. Camera streaming with basic color detection\n// 7. Integration of all features in a single loop() method"
    },
    {
      "type": "rules-box",
      "title": "Dashboard Best Practices",
      "items": [
        "Use appropriate update frequencies (10-20 Hz) to avoid overwhelming the interface",
        "Organize configuration variables into logical groups",
        "Use different colors and line styles for clear data visualization",
        "Implement proper error handling for all dashboard features",
        "Test dashboard functionality thoroughly before competition",
        "Document custom button functions and configuration parameters",
        "Monitor performance and adjust settings as needed"
      ]
    },
    {
      "type": "rules-box",
      "title": "Troubleshooting Dashboard Issues",
      "items": [
        "Dashboard not accessible: Check network connection and firewall settings",
        "No data appearing: Ensure MultipleTelemetry is used and telemetry.update() is called",
        "Configuration not updating: Verify variables are static and public with @Config annotation",
        "Field view not showing: Check fieldOverlay() methods and coordinate system",
        "Camera not streaming: Verify camera hardware and configuration settings",
        "Performance issues: Reduce update frequency or simplify data being sent",
        "Custom buttons not working: Check button implementation and event handling"
      ]
    },
    {
      "type": "text",
      "title": "Further Reading Resources",
      "content": "<p>For more information about FTCDashboard and advanced features:</p><ul><li><a href=\"https://acmerobotics.github.io/ftc-dashboard/\" target=\"_blank\">FTCDashboard Official Documentation</a></li><li><a href=\"https://acmerobotics.github.io/ftc-dashboard/gettingstarted\" target=\"_blank\">Getting Started Guide</a></li><li><a href=\"https://acmerobotics.github.io/ftc-dashboard/features\" target=\"_blank\">Features Overview</a></li><li><a href=\"https://acmerobotics.github.io/ftc-dashboard/config\" target=\"_blank\">Configuration Documentation</a></li><li><a href=\"https://acmerobotics.github.io/ftc-dashboard/controls\" target=\"_blank\">Controls Documentation</a></li><li><a href=\"https://acmerobotics.github.io/ftc-dashboard/camera\" target=\"_blank\">Camera Documentation</a></li><li><a href=\"https://github.com/acmerobotics/ftc-dashboard\" target=\"_blank\">FTCDashboard GitHub Repository</a></li></ul>"
    }
  ]
} 