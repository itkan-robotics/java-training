{
  "title": "Robot PID Control Applications (Android Studio)",
  "sections": [
    {
      "type": "text",
      "title": "Multi-Axis PID Control",
      "content": "<p>Many FTC mechanisms require controlling more than one axis at a time, such as X/Y drive or multi-joint arms. Each axis can have its own PID controller, and sometimes you need to coordinate them for smooth, accurate movement.</p>"
    },
    {
      "type": "code",
      "title": "Example: Dual-Axis PID for Drivetrain",
      "content": "This snippet shows how you might use two PID controllers to drive a robot to a target X and Y position:",
      "code": "double xError = targetX - getCurrentX();\ndouble yError = targetY - getCurrentY();\ndouble xOutput = xPID.calculate(xError);\ndouble yOutput = yPID.calculate(yError);\nsetDrivePower(xOutput, yOutput);"
    },
    {
      "type": "text",
      "title": "Drivetrain PID Control",
      "content": "<p>PID control is commonly used for driving straight, turning to a specific angle, or following a path. By using encoders and IMUs, you can create closed-loop control for your drivetrain.</p>"
    },
    {
      "type": "code",
      "title": "Example: PID Turn to Angle (IMU)",
      "content": "This code shows how to use a PID controller to turn the robot to a target heading using the IMU:",
      "code": "double error = targetAngle - imu.getHeading();\ndouble output = turnPID.calculate(error);\nleftMotor.setPower(output);\nrightMotor.setPower(-output);"
    },
    {
      "type": "text",
      "title": "Arm and Mechanism PID Control",
      "content": "<p>PID is also used for arms, lifts, and other mechanisms. For example, you can use a PID controller to move an arm to a specific position using an encoder.</p>"
    },
    {
      "type": "code",
      "title": "Example: Arm PID Control",
      "content": "This snippet shows a basic PID loop for an arm motor:",
      "code": "double error = targetPosition - armMotor.getCurrentPosition();\ndouble output = armPID.calculate(error);\narmMotor.setPower(Range.clip(output, -1, 1));"
    },
    {
      "type": "text",
      "title": "Tuning Strategies for Complex Systems",
      "content": "<ul><li>Tune one axis or mechanism at a time.</li><li>Start with kP, then add kD and kI as needed.</li><li>Watch for interactions between axes (e.g., X and Y).</li><li>Use telemetry to monitor errors and outputs.</li></ul>"
    },
    {
      "type": "text",
      "title": "Integrating PID with the FTC SDK",
      "content": "<p>The FTC SDK provides built-in PIDFController classes and hardware integration. You can use these classes for more advanced control and to simplify your code. See the official documentation for details: <a href=\"https://github.com/FIRST-Tech-Challenge/ftcdocs/commit/5a414e16cccd76b53e8aa8ddf1a9e2ba0aa42921\" target=\"_blank\">FTC Docs: PIDF Coefficients (Android Studio)</a></p>"
    },
    {
      "type": "text",
      "title": "Safety and Best Practices",
      "content": "<ul><li>Always set limits on motor power and positions to prevent hardware damage.</li><li>Use failsafes and watchdog timers to stop the robot if something goes wrong.</li><li>Test new PID code at low power and with the robot off the ground.</li></ul>"
    },
    {
      "type": "emphasis-box",
      "title": "Reference: Odometry and Multi-Axis Control",
      "content": "Learn more about odometry and multi-axis control at <a href=\"https://gm0.org/en/latest/docs/software/concepts/odometry.html\" target=\"_blank\">gm0: Odometry</a>."
    }
  ]
}
