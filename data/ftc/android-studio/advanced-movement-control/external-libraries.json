{
  "title": "External Libraries in FTC",
  "sections": [
    {
      "type": "text",
      "title": "Understanding External Libraries in FTC",
      "content": "<p>FTC teams often use external libraries to simplify complex programming tasks and improve code organization. These libraries provide pre-built solutions for common robotics problems, allowing teams to focus on strategy and robot-specific logic rather than reinventing basic functionality.</p>"
    },
    {
      "type": "text",
      "title": "Why Use External Libraries?",
      "content": "<p>External libraries offer several advantages for FTC teams:</p><ul><li><strong>Time Savings</strong>: Pre-built solutions reduce development time</li><li><strong>Reliability</strong>: Well-tested code with fewer bugs</li><li><strong>Advanced Features</strong>: Access to sophisticated algorithms and techniques</li><li><strong>Community Support</strong>: Active communities provide help and updates</li><li><strong>Learning Opportunities</strong>: Study well-written code to improve programming skills</li></ul>"
    },
    {
      "type": "text",
      "title": "Library Integration Considerations",
      "content": "<p>Before choosing a library, consider these factors:</p><ul><li><strong>Learning Curve</strong>: How much time will it take to learn the library?</li><li><strong>Documentation Quality</strong>: Is the library well-documented with examples?</li><li><strong>Community Size</strong>: Larger communities provide better support</li><li><strong>Update Frequency</strong>: Regular updates indicate active maintenance</li><li><strong>Compatibility</strong>: Does it work with your current FTC SDK version?</li><li><strong>Performance</strong>: Does it meet your robot's performance requirements?</li></ul>"
    },
    {
      "type": "table",
      "title": "FTC Library Comparison",
      "content": {
        "headers": ["Library", "Primary Purpose", "Pros", "Cons", "Best For", "Difficulty"],
        "rows": [
          [
            "TRCLib",
            "Command-based programming framework",
            "Excellent documentation, active community, well-structured, extensive examples, mature codebase",
            "Steep learning curve, complex for simple robots, requires understanding of command-based programming",
            "Advanced teams wanting professional-grade code structure, complex robots with multiple subsystems",
            "Advanced"
          ],
          [
            "NextFTC",
            "Modern FTC development framework",
            "Clean API, good documentation, active development, built-in utilities, good for beginners",
            "Smaller community, newer library, fewer examples, may have bugs",
            "Teams wanting modern development practices, intermediate to advanced programmers",
            "Intermediate"
          ],
          [
            "Dairy",
            "Utility library for common FTC tasks",
            "Simple to use, lightweight, focused on common tasks, good for beginners",
            "Limited scope, not a complete framework, may need additional libraries",
            "Teams wanting simple utilities without full framework overhead",
            "Beginner"
          ],
          [
            "SolversLib",
            "Path planning and motion control",
            "Excellent path planning, advanced motion control, good documentation",
            "Complex setup, requires understanding of path planning theory, limited to movement",
            "Teams focusing on advanced autonomous movement and path planning",
            "Advanced"
          ],
          [
            "FTCLib",
            "Comprehensive FTC development framework",
            "Complete solution, good documentation, active community, extensive features",
            "Large library size, complex API, may be overkill for simple robots",
            "Teams wanting a complete development framework, complex robot designs",
            "Advanced"
          ]
        ]
      }
    },
    {
      "type": "text",
      "title": "TRCLib Deep Dive",
      "content": "<p><strong>TRCLib</strong> is one of the most popular command-based programming frameworks for FTC. It provides a structured approach to robot programming that mirrors professional robotics development practices.</p><h4>Key Features:</h4><ul><li><strong>Command-Based Programming</strong>: Organizes code into commands and subsystems</li><li><strong>State Management</strong>: Built-in state machine capabilities</li><li><strong>Telemetry Integration</strong>: Easy integration with FTC telemetry</li><li><strong>Extensive Documentation</strong>: Comprehensive guides and examples</li><li><strong>Active Community</strong>: Large user base with good support</li></ul><h4>When to Use TRCLib:</h4><ul><li>Building complex robots with multiple subsystems</li><li>Wanting to learn professional robotics programming practices</li><li>Need for advanced state management and command sequencing</li><li>Planning to scale to more complex robot designs</li></ul>"
    },
    {
      "type": "text",
      "title": "NextFTC Deep Dive",
      "content": "<p><strong>NextFTC</strong> is a modern framework designed to simplify FTC development while maintaining good programming practices. It provides a clean API that's easier to learn than some alternatives.</p><h4>Key Features:</h4><ul><li><strong>Modern API Design</strong>: Clean, intuitive interface</li><li><strong>Built-in Utilities</strong>: Common functions pre-implemented</li><li><strong>Good Documentation</strong>: Clear guides and examples</li><li><strong>Active Development</strong>: Regular updates and improvements</li><li><strong>Beginner Friendly</strong>: Easier learning curve than some alternatives</li></ul><h4>When to Use NextFTC:</h4><ul><li>Wanting modern development practices without overwhelming complexity</li><li>Teams with intermediate programming experience</li><li>Need for good documentation and examples</li><li>Prefer cleaner, more intuitive APIs</li></ul>"
    },
    {
      "type": "text",
      "title": "Dairy Deep Dive",
      "content": "<p><strong>Dairy</strong> is a lightweight utility library focused on common FTC programming tasks. It's designed to be simple and focused rather than providing a complete framework.</p><h4>Key Features:</h4><ul><li><strong>Lightweight</strong>: Small library size, minimal overhead</li><li><strong>Focused Scope</strong>: Specific utilities for common tasks</li><li><strong>Easy Integration</strong>: Simple to add to existing projects</li><li><strong>Beginner Friendly</strong>: Simple API, easy to understand</li><li><strong>Modular</strong>: Use only what you need</li></ul><h4>When to Use Dairy:</h4><ul><li>Need specific utilities without full framework overhead</li><li>Simple robot designs that don't require complex frameworks</li><li>Want to learn from focused, well-written utility code</li><li>Prefer to build custom solutions with helper utilities</li></ul>"
    },
    {
      "type": "text",
      "title": "SolversLib Deep Dive",
      "content": "<p><strong>SolversLib</strong> is a specialized library focused on advanced path planning and motion control. It provides sophisticated algorithms for autonomous movement and trajectory following.</p><h4>Key Features:</h4><ul><li><strong>Advanced Path Planning</strong>: Sophisticated trajectory generation</li><li><strong>Motion Control</strong>: Precise movement control algorithms</li><li><strong>Mathematical Rigor</strong>: Based on solid control theory</li><li><strong>Performance Optimized</strong>: Efficient algorithms for real-time control</li><li><strong>Good Documentation</strong>: Clear explanations of algorithms</li></ul><h4>When to Use SolversLib:</h4><ul><li>Focus on advanced autonomous movement</li><li>Need precise trajectory following</li><li>Have understanding of control theory</li><li>Want to implement sophisticated motion control</li></ul>"
    },
    {
      "type": "text",
      "title": "FTCLib Deep Dive",
      "content": "<p><strong>FTCLib</strong> is a comprehensive development framework that provides a complete solution for FTC programming. It includes everything from basic utilities to advanced features.</p><h4>Key Features:</h4><ul><li><strong>Complete Framework</strong>: Comprehensive solution for all aspects</li><li><strong>Extensive Features</strong>: Wide range of capabilities</li><li><strong>Active Community</strong>: Large user base and good support</li><li><strong>Good Documentation</strong>: Comprehensive guides and examples</li><li><strong>Regular Updates</strong>: Active maintenance and improvements</li></ul><h4>When to Use FTCLib:</h4><ul><li>Want a complete solution for all programming needs</li><li>Building complex robots with many features</li><li>Prefer comprehensive frameworks over multiple smaller libraries</li><li>Need extensive features and capabilities</li></ul>"
    },
    {
      "type": "text",
      "title": "Making the Right Choice",
      "content": "<p>Choosing the right library depends on your team's specific needs and experience level:</p><h4>For Beginners:</h4><ul><li>Start with <strong>Dairy</strong> for simple utilities</li><li>Consider <strong>NextFTC</strong> for a gentle introduction to frameworks</li><li>Focus on learning the basics before diving into complex frameworks</li></ul><h4>For Intermediate Teams:</h4><ul><li><strong>NextFTC</strong> provides a good balance of features and simplicity</li><li><strong>TRCLib</strong> if you want to learn professional practices</li><li>Consider <strong>SolversLib</strong> if focusing on advanced movement</li></ul><h4>For Advanced Teams:</h4><ul><li><strong>TRCLib</strong> for professional-grade code structure</li><li><strong>FTCLib</strong> for comprehensive feature set</li><li><strong>SolversLib</strong> for advanced motion control</li><li>Consider combining multiple libraries for specific needs</li></ul>"
    },
    {
      "type": "text",
      "title": "Integration Best Practices",
      "content": "<p>When integrating external libraries into your FTC project:</p><h4>Setup and Configuration:</h4><ul><li>Follow the library's official setup instructions</li><li>Ensure compatibility with your FTC SDK version</li><li>Test the library with a simple example before full integration</li><li>Keep backups of your original code</li></ul><h4>Development Workflow:</h4><ul><li>Start with the library's examples and tutorials</li><li>Incrementally integrate features rather than rewriting everything at once</li><li>Use version control to track changes and enable rollbacks</li><li>Document your customizations and modifications</li></ul><h4>Testing and Validation:</h4><ul><li>Test library features thoroughly before competition</li><li>Have fallback plans if library features don't work as expected</li><li>Monitor performance impact on your robot</li><li>Keep the library updated to the latest stable version</li></ul>"
    },
    {
      "type": "exercise-box",
      "title": "Library Evaluation Exercise",
      "description": "Evaluate which library would be best for your team's current robot design and programming experience level.",
      "tasks": [
        "List your robot's main subsystems and features",
        "Assess your team's programming experience level",
        "Identify your primary development goals (learning, competition performance, etc.)",
        "Research the libraries that match your needs",
        "Create a simple test project with your chosen library",
        "Document your findings and decision process"
      ]
    },
    {
      "type": "text",
      "title": "Further Reading Resources",
      "content": "<p>For more information about these libraries and FTC development:</p><ul><li><a href=\"https://trc492.github.io/pages/TrcLibFeatures.html\" target=\"_blank\">TRCLib Documentation</a></li><li><a href=\"https://nextftc.dev/\" target=\"_blank\">NextFTC Documentation</a></li><li><a href=\"https://docs.dairy.foundation/introduction\" target=\"_blank\">Dairy Documentation</a></li><li><a href=\"https://docs.ftclib.org/ftclib\" target=\"_blank\">FTCLib Documentation</a></li><li><a href=\"https://docs.seattlesolvers.com/\" target=\"_blank\">SolversLib Documentation</a></li></ul>"
    }
  ]
} 