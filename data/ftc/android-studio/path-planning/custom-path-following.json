{
  "title": "Building a Custom Path Following Algorithm (FTC)",
  "sections": [
    {
      "type": "text",
      "title": "Why Build Your Own Path Follower?",
      "content": "While libraries like Road Runner and PedroPathing are powerful, building your own path following algorithm helps you understand the math and control theory behind autonomous navigation. It also lets you customize behavior for your robot's unique needs."
    },
    {
      "type": "text",
      "title": "Core Concepts: Poses, Paths, and Controllers",
      "content": "A path follower works by generating a sequence of target poses (x, y, heading) along a path. At each control loop, the robot calculates the error between its current pose and the target pose, then uses PIDF controllers to generate motor commands that minimize this error. Typically, you use one PIDF controller for translation (distance) and one for rotation (heading)."
    },
    {
      "type": "code",
      "title": "Basic Structure of a Custom Path Follower",
      "content": "Here's a simplified Java structure for a custom path follower in FTC:\n\n// Assume you have a list of target poses (waypoints)\nList<Pose2d> path = ...;\nPIDFController translationalPID, headingPID;\n\nwhile (opModeIsActive() && !path.isEmpty()) {\n    Pose2d currentPose = getCurrentRobotPose();\n    Pose2d targetPose = path.get(0);\n    double distanceError = currentPose.distanceTo(targetPose);\n    double headingError = angleWrap(targetPose.heading - currentPose.heading);\n    double drivePower = translationalPID.calculate(distanceError);\n    double turnPower = headingPID.calculate(headingError);\n    setDrivePowers(drivePower, turnPower);\n    if (distanceError < threshold && Math.abs(headingError) < headingThreshold) {\n        path.remove(0); // Move to next waypoint\n    }\n}\n\n// Helper: angleWrap wraps angle to [-pi, pi]\npublic double angleWrap(double angle) {\n    while (angle > Math.PI) angle -= 2 * Math.PI;\n    while (angle < -Math.PI) angle += 2 * Math.PI;\n    return angle;\n}"
    },
    {
      "type": "text",
      "title": "Tuning and Practical Tips",
      "content": "- Tune your PIDF controllers for smooth, accurate following.\n- Use odometry or localization for accurate pose estimation.\n- Test with simple paths before trying complex trajectories.\n- Add feedforward terms for better performance at high speeds.\n- Visualize your robot's path and errors using telemetry or FTC Dashboard."
    }
  ]
} 