{
  "title": "Building Pedro Pathing Autonomous Routines",
  "sections": [
    {
      "type": "text",
      "title": "Understanding Pedro Pathing Autonomous Structure",
      "content": "Pedro Pathing autonomous routines are built using a combination of paths, PathChains, and the Follower system. Unlike traditional autonomous programming, Pedro Pathing uses Bézier curves and reactive following to create smooth, efficient movements. The structure involves defining poses, creating paths, and chaining them together for complex autonomous sequences."
    },
    {
      "type": "text",
      "title": "Key Components of Pedro Pathing Autonomous",
      "content": "The main components you'll work with include the Follower class for path execution, Pose objects for position and orientation, Path objects for individual movements, and PathChain objects for combining multiple paths. Understanding how these components work together is essential for building effective autonomous routines."
    },
    {
      "type": "code",
      "title": "Required Imports for Pedro Pathing",
      "content": "Start by including the necessary imports for Pedro Pathing functionality:",
      "code": "package pedroPathing.examples;\n\nimport com.pedropathing.follower.Follower;\nimport com.pedropathing.localization.Pose;\nimport com.pedropathing.pathgen.BezierCurve;\nimport com.pedropathing.pathgen.BezierLine;\nimport com.pedropathing.pathgen.Path;\nimport com.pedropathing.pathgen.PathChain;\nimport com.pedropathing.pathgen.Point;\nimport com.pedropathing.util.Timer;\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\nimport com.qualcomm.robotcore.eventloop.opmode.OpMode;\n\nimport pedroPathing.constants.FConstants;\nimport pedroPathing.constants.LConstants;"
    },
    {
      "type": "text",
      "title": "Creating Paths and PathChains",
      "content": "Paths in Pedro Pathing represent individual movements from one point to another. You can create straight-line paths using BezierLine or curved paths using BezierCurve. PathChains allow you to combine multiple paths into a single executable sequence, making it easier to create complex autonomous routines."
    },
    {
      "type": "code",
      "title": "Creating Basic Paths",
      "content": "Here's how to create different types of paths in Pedro Pathing:",
      "code": "// Create a straight line path\nPoint startPoint = new Point(0, 0);\nPoint endPoint = new Point(24, 0);\nPath straightPath = new BezierLine(startPoint, endPoint);\n\n// Create a curved path using Bézier curves\nPoint controlPoint1 = new Point(12, 12);\nPoint controlPoint2 = new Point(24, 12);\nPath curvedPath = new BezierCurve(startPoint, controlPoint1, controlPoint2, endPoint);\n\n// Create a PathChain to combine multiple paths\nPathChain pathChain = new PathChain();\npathChain.addPath(straightPath);\npathChain.addPath(curvedPath);"
    },
    {
      "type": "text",
      "title": "Defining Poses and Starting Positions",
      "content": "Poses in Pedro Pathing represent the robot's position and orientation on the field. You'll need to define your starting pose and any intermediate poses for complex movements. The pose includes x and y coordinates as well as the robot's heading angle."
    },
    {
      "type": "code",
      "title": "Setting Up Poses",
      "content": "Define poses for your autonomous routine:",
      "code": "// Define starting pose (x, y, heading in radians)\nPose startPose = new Pose(0, 0, 0);\n\n// Define intermediate poses for complex movements\nPose intermediatePose = new Pose(24, 0, Math.PI / 2);\nPose endPose = new Pose(24, 24, Math.PI);\n\n// Initialize the follower with your starting pose\nFollower follower = new Follower(hardwareMap, startPose);"
    },
    {
      "type": "text",
      "title": "Implementing a Complete Autonomous Routine",
      "content": "Now let's put everything together to create a complete autonomous routine. This involves setting up the autonomous class, defining your paths and poses, and implementing the main logic flow."
    },
    {
      "type": "code",
      "title": "Basic Autonomous Structure",
      "content": "Here's the basic structure for a Pedro Pathing autonomous:",
      "code": "@Autonomous(name=\"Pedro Pathing Example\")\npublic class PedroPathingAuto extends OpMode {\n    private Follower follower;\n    private PathChain mainPath;\n    \n    @Override\n    public void init() {\n        // Initialize the follower with starting pose\n        follower = new Follower(hardwareMap, new Pose(0, 0, 0));\n        \n        // Create your path chain\n        mainPath = new PathChain();\n        // Add paths to the chain\n        \n        // Set up any additional hardware\n    }\n    \n    @Override\n    public void start() {\n        // Start following the path\n        follower.followPathChain(mainPath);\n    }\n    \n    @Override\n    public void loop() {\n        // Update the follower\n        follower.update();\n        \n        // Add any additional logic here\n        \n        // Display telemetry\n        telemetry.addData(\"Current Pose\", follower.getPose());\n        telemetry.addData(\"Path Complete\", follower.isPathComplete());\n    }\n}"
    },
    {
      "type": "text",
      "title": "Adding Complex Movements",
      "content": "For more complex autonomous routines, you can add conditional logic, multiple path chains, and integration with other robot mechanisms. This allows you to create sophisticated autonomous sequences that respond to game conditions and robot state."
    },
    {
      "type": "code",
      "title": "Complex Autonomous Example",
      "content": "Here's an example of a more complex autonomous with multiple paths and conditions:",
      "code": "// Create multiple path chains for different scenarios\nPathChain pathToElement = new PathChain();\npathToElement.addPath(new BezierLine(new Point(0, 0), new Point(24, 0)));\n\nPathChain pathToScoring = new PathChain();\npathToScoring.addPath(new BezierLine(new Point(24, 0), new Point(24, 24)));\n\n// In your autonomous logic\nif (gameElementDetected) {\n    follower.followPathChain(pathToElement);\n    // Collect the element\n    follower.followPathChain(pathToScoring);\n    // Score the element\n}"
    },
    {
      "type": "emphasis-box",
      "title": "Reference",
      "content": "For more detailed examples and advanced techniques, see the <a href=\"https://pedropathing.com/pedro/examples/buildauto.html\" target=\"_blank\">Building Pedro Autonomous</a> guide and the Pedro Pathing quickstart project."
    }
  ]
} 