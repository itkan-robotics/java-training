{
  "title": "Dead Wheel Encoders",
  "sections": [
    {
      "type": "text",
      "title": "What are Dead Wheels?",
      "content": "Dead wheels are unpowered, free-spinning wheels equipped with encoders. Unlike drive wheels, they are not affected by slippage from driving the robot, making them ideal for accurate position tracking in FTC robots."
    },
    {
      "type": "text",
      "title": "Advantages of Dead Wheel Encoders",
      "content": "Using dead wheels for odometry greatly improves accuracy because they are isolated from drivetrain forces. This reduces errors from wheel slip and provides more reliable encoder readings for autonomous navigation."
    },
    {
      "type": "text",
      "title": "Hardware Setup and Placement",
      "content": "Dead wheels are typically mounted on the robot chassis in parallel and perpendicular orientations. Proper placement is crucial for accurate tracking."
    },
    {
      "type": "code",
      "title": "Reading Encoder Values in Android Studio",
      "content": "To use dead wheel encoders in your FTC code, you must initialize and read from the encoders using the FTC SDK. Here is a sample snippet:",
      "code": "// Declare encoder variables\nDcMotor leftEncoder, rightEncoder, centerEncoder;\n\n@Override\npublic void runOpMode() {\n    leftEncoder = hardwareMap.get(DcMotor.class, \"leftEncoder\");\n    rightEncoder = hardwareMap.get(DcMotor.class, \"rightEncoder\");\n    centerEncoder = hardwareMap.get(DcMotor.class, \"centerEncoder\");\n\n    waitForStart();\n\n    while (opModeIsActive()) {\n        int leftTicks = leftEncoder.getCurrentPosition();\n        int rightTicks = rightEncoder.getCurrentPosition();\n        int centerTicks = centerEncoder.getCurrentPosition();\n        telemetry.addData(\"Left Encoder\", leftTicks);\n        telemetry.addData(\"Right Encoder\", rightTicks);\n        telemetry.addData(\"Center Encoder\", centerTicks);\n        telemetry.update();\n    }\n}"
    },
    {
      "type": "text",
      "title": "Calculating Robot Position from Encoders",
      "content": "To convert encoder ticks to robot position, you need to know the wheel diameter, encoder resolution, and the distance between wheels. The basic formula is:<br><code>distance = (ticks / ticks_per_revolution) * wheel_circumference</code><br>By combining the distances from each wheel, you can estimate the robot's X, Y, and heading.<br> You can also determine the inches/tick ratio manually by moving your robot forward/laterally and dividing the distance traveled by the number of ticks recorded."
    },
    {
      "type": "code",
      "title": "Sample Calculation Code",
      "content": "This snippet shows how to convert encoder ticks to inches:",
      "code": "double TICKS_PER_REV = 8192; // Example for REV Through Bore Encoder\ndouble WHEEL_DIAMETER_INCHES = 2.0;\ndouble WHEEL_CIRCUMFERENCE = Math.PI * WHEEL_DIAMETER_INCHES;\n\nint ticks = leftEncoder.getCurrentPosition();\ndouble distanceInches = (ticks / TICKS_PER_REV) * WHEEL_CIRCUMFERENCE;"
    },
    {
      "type": "text",
      "title": "Troubleshooting Dead Wheel Odometry",
      "content": "Common issues include incorrect encoder direction, mechanical binding, or misalignment. Always verify encoder readings and check for smooth wheel rotation."
    },
    {
      "type": "link-grid",
      "title": "Further Reading",
      "content": [
        {
          "label": "gm0: Odometry (Dead Wheels)",
          "url": "https://gm0.org/en/latest/docs/software/concepts/odometry.html"
        }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Practice Exercise",
      "description": "Write code to read all three dead wheel encoders and display their values on telemetry. Then, calculate the distance traveled by each wheel in inches.",
      "tasks": [
        "Initialize three encoders in your op mode.",
        "Display their tick values on telemetry.",
        "Convert the tick values to inches and display those as well."
      ],
      "answers": [
        {
          "task": "Initialize three encoders in your op mode.",
          "content": "// Declare encoder variables\nDcMotor leftEncoder, rightEncoder, centerEncoder;\n\n@Override\npublic void runOpMode() {\n    leftEncoder = hardwareMap.get(DcMotor.class, \"leftEncoder\");\n    rightEncoder = hardwareMap.get(DcMotor.class, \"rightEncoder\");\n    centerEncoder = hardwareMap.get(DcMotor.class, \"centerEncoder\");\n    // ... rest of your code\n}"
        },
        {
          "task": "Display their tick values on telemetry.",
          "content": "while (opModeIsActive()) {\n    int leftTicks = leftEncoder.getCurrentPosition();\n    int rightTicks = rightEncoder.getCurrentPosition();\n    int centerTicks = centerEncoder.getCurrentPosition();\n    telemetry.addData(\"Left Encoder\", leftTicks);\n    telemetry.addData(\"Right Encoder\", rightTicks);\n    telemetry.addData(\"Center Encoder\", centerTicks);\n    telemetry.update();\n}"
        },
        {
          "task": "Convert the tick values to inches and display those as well.",
          "content": "double TICKS_PER_REV = 8192; // Example for REV Through Bore Encoder\ndouble WHEEL_DIAMETER_INCHES = 2.0;\ndouble WHEEL_CIRCUMFERENCE = Math.PI * WHEEL_DIAMETER_INCHES;\n\nwhile (opModeIsActive()) {\n    int leftTicks = leftEncoder.getCurrentPosition();\n    int rightTicks = rightEncoder.getCurrentPosition();\n    int centerTicks = centerEncoder.getCurrentPosition();\n    double leftInches = (leftTicks / TICKS_PER_REV) * WHEEL_CIRCUMFERENCE;\n    double rightInches = (rightTicks / TICKS_PER_REV) * WHEEL_CIRCUMFERENCE;\n    double centerInches = (centerTicks / TICKS_PER_REV) * WHEEL_CIRCUMFERENCE;\n    telemetry.addData(\"Left Encoder (in)\", leftInches);\n    telemetry.addData(\"Right Encoder (in)\", rightInches);\n    telemetry.addData(\"Center Encoder (in)\", centerInches);\n    telemetry.update();\n}"
        }
      ]
    }
  ]
}
