{
  "title": "Three-Wheel Odometry",
  "sections": [
    {
      "type": "text",
      "title": "Why Use Three Wheels?",
      "content": "A three-wheel odometry setup allows your robot to track its position (X, Y) and heading (angle) on the field with high accuracy. By using two parallel wheels and one perpendicular wheel, you can resolve both translational and rotational movement."
    },
    {
      "type": "text",
      "title": "Mathematics of Three-Wheel Odometry",
      "content": "Three-wheel odometry uses the change in encoder values from each wheel to calculate the robot's movement. The two parallel wheels measure forward/backward and rotational movement, while the perpendicular wheel measures side-to-side (lateral) movement. <br><br>For a detailed explanation, see <a href=\"https://gm0.org/en/latest/docs/software/concepts/odometry.html\" target=\"_blank\">gm0: Odometry</a>."
    },
    {
      "type": "code",
      "title": "Basic Position Update Logic",
      "content": "This code snippet demonstrates how to update the robot's X, Y, and heading using three encoders:",
      "code": "// Assume previous and current encoder values are stored\ndouble leftDelta = currentLeft - previousLeft;\ndouble rightDelta = currentRight - previousRight;\ndouble centerDelta = currentCenter - previousCenter;\n\ndouble forwardMovement = (leftDelta + rightDelta) / 2.0;\ndouble headingChange = (rightDelta - leftDelta) / trackWidth;\ndouble lateralMovement = centerDelta - (headingChange * centerWheelOffset);\n\n// Update robot's position\nrobotX += forwardMovement * Math.cos(robotHeading) - lateralMovement * Math.sin(robotHeading);\nrobotY += forwardMovement * Math.sin(robotHeading) + lateralMovement * Math.cos(robotHeading);\nrobotHeading += headingChange;"
    },
    {
      "type": "text",
      "title": "Implementing Three-Wheel Odometry in Android Studio",
      "content": "In your FTC code, you will need to read encoder values each loop, calculate the deltas, and update your robot's position. This is typically done in a loop inside your op mode."
    },
    {
      "type": "code",
      "title": "Sample Loop for Odometry Update",
      "content": "This snippet shows how to structure your op mode loop for odometry:",
      "code": "@Override\npublic void runOpMode() {\n    // Initialize encoders and variables...\n    waitForStart();\n    while (opModeIsActive()) {\n        // Read current encoder values\n        int left = leftEncoder.getCurrentPosition();\n        int right = rightEncoder.getCurrentPosition();\n        int center = centerEncoder.getCurrentPosition();\n        // Calculate deltas and update position (see above)\n        // ...\n        telemetry.addData(\"X\", robotX);\n        telemetry.addData(\"Y\", robotY);\n        telemetry.addData(\"Heading\", Math.toDegrees(robotHeading));\n        telemetry.update();\n        // Store previous values for next loop\n        // ...\n    }\n}"
    },
    {
      "type": "text",
      "title": "Calibration and Tuning",
      "content": "Accurate odometry requires careful calibration. Measure your track width (distance between parallel wheels) and center wheel offset precisely. Test your robot's movement and adjust these values as needed for best results."
    },
    {
      "type": "text",
      "title": "Common Pitfalls and How to Avoid Them",
      "content": "Common mistakes include swapping encoder directions, incorrect math, or mismeasured distances. Always verify your encoder directions and test with simple movements before running complex autonomous routines."
    },
    {
      "type": "link-grid",
      "title": "Further Reading",
      "content": [
        {
          "label": "gm0: Odometry (Three-Wheel)",
          "url": "https://gm0.org/en/latest/docs/software/concepts/odometry.html"
        }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Practice Exercise",
      "description": "Write a function that takes in the previous and current encoder values for all three wheels and returns the robot's new X, Y, and heading.",
      "tasks": [
        "Implement the position update logic in Java.",
        "Test your function with sample encoder values.",
        "Verify the output by simulating simple robot movements."
      ],
      "content": "// Use the code snippets above as a starting point."
    }
  ]
}
