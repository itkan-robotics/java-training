{
  "title": "Advanced Command-Based Patterns",
  "sections": [
    {
      "type": "text",
      "title": "Conditional Commands and Select Commands",
      "content": "<p>Conditional commands allow you to choose between different commands based on runtime conditions. This enables adaptive autonomous routines that can respond to sensor data, game state, or other dynamic factors.</p><p>SolversLib provides several ways to implement conditional behavior, including <code>SelectCommand</code> and custom conditional logic within commands.</p>"
    },
    {
      "type": "code",
      "title": "SelectCommand Structure",
      "content": "<p>Here's the basic structure of a SelectCommand:</p>",
      "code": "package org.firstinspires.ftc.teamcode.commands;\n\nimport com.seattlesolvers.solverslib.command.SelectCommand;\nimport com.seattlesolvers.solverslib.command.CommandBase;\nimport org.firstinspires.ftc.teamcode.subsystems.DriveSubsystem;\nimport com.qualcomm.robotcore.hardware.ColorSensor;\n\npublic class AdaptiveDriveCommand extends SelectCommand {\n    public AdaptiveDriveCommand(DriveSubsystem driveSubsystem, ColorSensor colorSensor) {\n        super(\n            // Map of conditions to commands\n            Map.of(\n                // If red is dominant, turn left\n                () -> isRedDominant(colorSensor),\n                new TurnLeftCommand(driveSubsystem, 45),\n                \n                // If blue is dominant, turn right\n                () -> isBlueDominant(colorSensor),\n                new TurnRightCommand(driveSubsystem, 45),\n                \n                // If green is dominant, drive forward\n                () -> isGreenDominant(colorSensor),\n                new DriveForwardCommand(driveSubsystem, 0.5, 1.0)\n            ),\n            // Default command if no conditions are met\n            new DriveForwardCommand(driveSubsystem, 0.3, 0.5)\n        );\n    }\n}"
    },
    {
      "type": "code",
      "title": "Color Detection Methods",
      "content": "<p>Helper methods to determine which color is dominant:</p>",
      "code": "    private boolean isRedDominant(ColorSensor sensor) {\n        int red = sensor.red();\n        int green = sensor.green();\n        int blue = sensor.blue();\n        return red > green && red > blue && red > 100;\n    }\n    \n    private boolean isBlueDominant(ColorSensor sensor) {\n        int red = sensor.red();\n        int green = sensor.green();\n        int blue = sensor.blue();\n        return blue > red && blue > green && blue > 100;\n    }\n    \n    private boolean isGreenDominant(ColorSensor sensor) {\n        int red = sensor.red();\n        int green = sensor.green();\n        int blue = sensor.blue();\n        return green > red && green > blue && green > 100;\n    }"
    },
    {
      "type": "code",
      "title": "TurnLeftCommand Implementation",
      "content": "<p>A simple command to turn the robot left:</p>",
      "code": "class TurnLeftCommand extends CommandBase {\n    private final DriveSubsystem driveSubsystem;\n    private final double angle;\n    private Timer timer;\n    \n    public TurnLeftCommand(DriveSubsystem driveSubsystem, double angle) {\n        this.driveSubsystem = driveSubsystem;\n        this.angle = angle;\n        addRequirements(driveSubsystem);\n    }\n    \n    @Override\n    public void initialize() {\n        timer = new Timer();\n        timer.start();\n    }\n    \n    @Override\n    public void execute() {\n        driveSubsystem.drive(-0.3, 0.3); // Turn left\n    }\n    \n    @Override\n    public boolean isFinished() {\n        // Simple time-based turning (in practice, use IMU)\n        return timer.get() >= (angle / 45.0); // Rough approximation\n    }\n    \n    @Override\n    public void end(boolean interrupted) {\n        driveSubsystem.stop();\n    }\n}"
    },
    {
      "type": "code",
      "title": "TurnRightCommand Implementation",
      "content": "<p>A simple command to turn the robot right:</p>",
      "code": "class TurnRightCommand extends CommandBase {\n    private final DriveSubsystem driveSubsystem;\n    private final double angle;\n    private Timer timer;\n    \n    public TurnRightCommand(DriveSubsystem driveSubsystem, double angle) {\n        this.driveSubsystem = driveSubsystem;\n        this.angle = angle;\n        addRequirements(driveSubsystem);\n    }\n    \n    @Override\n    public void initialize() {\n        timer = new Timer();\n        timer.start();\n    }\n    \n    @Override\n    public void execute() {\n        driveSubsystem.drive(0.3, -0.3); // Turn right\n    }\n    \n    @Override\n    public boolean isFinished() {\n        return timer.get() >= (angle / 45.0);\n    }\n    \n    @Override\n    public void end(boolean interrupted) {\n        driveSubsystem.stop();\n    }\n}"
    },
    {
      "type": "text",
      "title": "Command Factories and Parameterized Commands",
      "content": "<p>Command factories are methods or classes that create commands with different parameters. This pattern reduces code duplication and makes it easy to create variations of similar commands.</p><p>Factories are especially useful when you need to create many similar commands with different parameters, such as driving different distances or turning different angles.</p>"
    },
    {
      "type": "code",
      "title": "CommandFactory Basic Structure",
      "content": "<p>Here's the basic structure of a command factory:</p>",
      "code": "public class CommandFactory {\n    private final DriveSubsystem driveSubsystem;\n    private final ArmSubsystem armSubsystem;\n    private final ShooterSubsystem shooterSubsystem;\n    \n    public CommandFactory(DriveSubsystem driveSubsystem, \n                         ArmSubsystem armSubsystem,\n                         ShooterSubsystem shooterSubsystem) {\n        this.driveSubsystem = driveSubsystem;\n        this.armSubsystem = armSubsystem;\n        this.shooterSubsystem = shooterSubsystem;\n    }\n}"
    },
    {
      "type": "code",
      "title": "Drive Command Factory Methods",
      "content": "<p>Factory methods for creating drive commands:</p>",
      "code": "    // Factory methods for drive commands\n    public CommandBase driveForward(double power, double duration) {\n        return new DriveForwardCommand(driveSubsystem, power, duration);\n    }\n    \n    public CommandBase driveBackward(double power, double duration) {\n        return new DriveBackwardCommand(driveSubsystem, power, duration);\n    }\n    \n    public CommandBase turnLeft(double angle) {\n        return new TurnToAngleCommand(driveSubsystem, imu, -angle, 5, 0.3);\n    }\n    \n    public CommandBase turnRight(double angle) {\n        return new TurnToAngleCommand(driveSubsystem, imu, angle, 5, 0.3);\n    }"
    },
    {
      "type": "code",
      "title": "Arm Command Factory Methods",
      "content": "<p>Factory methods for creating arm commands:</p>",
      "code": "    // Factory methods for arm commands\n    public CommandBase extendArm() {\n        return new ExtendArmCommand(armSubsystem);\n    }\n    \n    public CommandBase retractArm() {\n        return new RetractArmCommand(armSubsystem);\n    }\n    \n    public CommandBase setArmPosition(double position) {\n        return new SetArmPositionCommand(armSubsystem, position);\n    }"
    },
    {
      "type": "code",
      "title": "Complex Command Factory Methods",
      "content": "<p>Factory methods that create complex command sequences:</p>",
      "code": "    // Factory methods for shooting sequences\n    public CommandBase shootSequence(double duration) {\n        return new SequentialCommandGroup(\n            new SpinUpShooterCommand(shooterSubsystem),\n            new WaitCommand(1.0),\n            new FeedBallsCommand(intakeSubsystem, duration)\n        );\n    }\n    \n    // Complex factory methods\n    public CommandBase driveToPosition(double x, double y) {\n        // Calculate distance and angle to target position\n        double distance = Math.sqrt(x*x + y*y);\n        double angle = Math.toDegrees(Math.atan2(y, x));\n        \n        return new SequentialCommandGroup(\n            turnToAngle(angle),\n            driveForward(0.5, distance / 0.5) // Rough conversion from distance to time\n        );\n    }"
    },
    {
      "type": "code",
      "title": "Strategy-Based Factory Methods",
      "content": "<p>Factory methods that create different autonomous strategies:</p>",
      "code": "    public CommandBase autonomousRoutine(String strategy) {\n        switch (strategy.toLowerCase()) {\n            case \"aggressive\":\n                return new SequentialCommandGroup(\n                    driveForward(0.8, 2.0),\n                    shootSequence(3.0),\n                    driveForward(0.6, 1.5)\n                );\n            case \"conservative\":\n                return new SequentialCommandGroup(\n                    driveForward(0.4, 1.0),\n                    turnRight(45),\n                    driveForward(0.4, 1.0)\n                );\n            case \"balanced\":\n                return new SequentialCommandGroup(\n                    driveForward(0.6, 1.5),\n                    shootSequence(2.0),\n                    turnLeft(90),\n                    driveForward(0.5, 1.0)\n                );\n            default:\n                return new WaitCommand(0.1); // Default: do nothing\n        }\n    }"
    },
    {
      "type": "code",
      "title": "Using the CommandFactory",
      "content": "<p>Example of how to use the command factory in an OpMode:</p>",
      "code": "public class AutonomousOpMode extends LinearOpMode {\n    private CommandFactory commandFactory;\n    \n    @Override\n    public void runOpMode() {\n        // Initialize subsystems and factory\n        DriveSubsystem driveSubsystem = new DriveSubsystem(hardwareMap);\n        ArmSubsystem armSubsystem = new ArmSubsystem(hardwareMap);\n        ShooterSubsystem shooterSubsystem = new ShooterSubsystem(hardwareMap);\n        \n        commandFactory = new CommandFactory(driveSubsystem, armSubsystem, shooterSubsystem);\n        \n        waitForStart();\n        \n        // Use factory to create commands\n        CommandScheduler scheduler = CommandScheduler.getInstance();\n        \n        // Create a complex routine using factory methods\n        CommandBase routine = new SequentialCommandGroup(\n            commandFactory.driveForward(0.5, 2.0),\n            commandFactory.turnRight(90),\n            commandFactory.extendArm(),\n            commandFactory.shootSequence(2.5),\n            commandFactory.retractArm()\n        );\n        \n        scheduler.schedule(routine);\n        \n        while (opModeIsActive()) {\n            scheduler.run();\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "State Machines with Commands",
      "content": "<p>State machines can be implemented using the command system to create sophisticated autonomous behaviors. Each state is represented by a command, and transitions between states are handled by the command scheduler.</p><p>This approach allows you to create complex behaviors that can respond to changing conditions and maintain state across multiple command executions.</p>"
    },
    {
      "type": "code",
      "title": "State Machine Enum Definition",
      "content": "<p>First, define the states for your state machine:</p>",
      "code": "public enum AutonomousState {\n    SEARCHING_FOR_TARGET,\n    APPROACHING_TARGET,\n    ALIGNING,\n    SHOOTING,\n    RETREATING,\n    COMPLETE\n}"
    },
    {
      "type": "code",
      "title": "StateMachineAutonomous Basic Structure",
      "content": "<p>The main state machine command class:</p>",
      "code": "public class StateMachineAutonomous extends CommandBase {\n    private final DriveSubsystem driveSubsystem;\n    private final VisionSubsystem visionSubsystem;\n    private final ShooterSubsystem shooterSubsystem;\n    private final CommandFactory commandFactory;\n    \n    private AutonomousState currentState;\n    private CommandBase currentCommand;\n    private CommandScheduler scheduler;\n    \n    public StateMachineAutonomous(DriveSubsystem driveSubsystem,\n                                 VisionSubsystem visionSubsystem,\n                                 ShooterSubsystem shooterSubsystem) {\n        this.driveSubsystem = driveSubsystem;\n        this.visionSubsystem = visionSubsystem;\n        this.shooterSubsystem = shooterSubsystem;\n        this.commandFactory = new CommandFactory(driveSubsystem, null, shooterSubsystem);\n        \n        addRequirements(driveSubsystem, visionSubsystem, shooterSubsystem);\n    }\n}"
    },
    {
      "type": "code",
      "title": "State Machine Lifecycle Methods",
      "content": "<p>The core lifecycle methods for the state machine:</p>",
      "code": "    @Override\n    public void initialize() {\n        currentState = AutonomousState.SEARCHING_FOR_TARGET;\n        scheduler = CommandScheduler.getInstance();\n        transitionToNextState();\n    }\n    \n    @Override\n    public void execute() {\n        // Check if current command is finished\n        if (currentCommand != null && currentCommand.isFinished()) {\n            transitionToNextState();\n        }\n        \n        // Output current state for debugging\n        System.out.println(\"Current State: \" + currentState);\n    }\n    \n    @Override\n    public boolean isFinished() {\n        return currentState == AutonomousState.COMPLETE;\n    }\n    \n    @Override\n    public void end(boolean interrupted) {\n        if (currentCommand != null) {\n            scheduler.cancel(currentCommand);\n        }\n        driveSubsystem.stop();\n    }"
    },
    {
      "type": "code",
      "title": "State Transition Logic",
      "content": "<p>The core state transition logic:</p>",
      "code": "    private void transitionToNextState() {\n        // Cancel current command if it's running\n        if (currentCommand != null) {\n            scheduler.cancel(currentCommand);\n        }\n        \n        // Determine next state and command\n        switch (currentState) {\n            case SEARCHING_FOR_TARGET:\n                if (visionSubsystem.hasTarget()) {\n                    currentState = AutonomousState.APPROACHING_TARGET;\n                    currentCommand = new ApproachTargetCommand(driveSubsystem, visionSubsystem);\n                } else {\n                    currentCommand = new SearchForTargetCommand(driveSubsystem, visionSubsystem);\n                }\n                break;\n                \n            case APPROACHING_TARGET:\n                currentState = AutonomousState.ALIGNING;\n                currentCommand = new AlignToTargetCommand(driveSubsystem, visionSubsystem);\n                break;\n                \n            case ALIGNING:\n                if (visionSubsystem.isAligned()) {\n                    currentState = AutonomousState.SHOOTING;\n                    currentCommand = commandFactory.shootSequence(3.0);\n                } else {\n                    currentCommand = new AlignToTargetCommand(driveSubsystem, visionSubsystem);\n                }\n                break;\n                \n            case SHOOTING:\n                currentState = AutonomousState.RETREATING;\n                currentCommand = commandFactory.driveBackward(0.5, 2.0);\n                break;\n                \n            case RETREATING:\n                currentState = AutonomousState.COMPLETE;\n                currentCommand = new WaitCommand(0.1); // Dummy command\n                break;\n                \n            case COMPLETE:\n                // Do nothing, autonomous is complete\n                break;\n        }\n        \n        // Schedule the new command\n        if (currentCommand != null && currentState != AutonomousState.COMPLETE) {\n            scheduler.schedule(currentCommand);\n        }\n    }"
    },
    {
      "type": "code",
      "title": "SearchForTargetCommand",
      "content": "<p>A command that searches for a target by rotating slowly:</p>",
      "code": "class SearchForTargetCommand extends CommandBase {\n    private final DriveSubsystem driveSubsystem;\n    private final VisionSubsystem visionSubsystem;\n    private Timer timer;\n    \n    public SearchForTargetCommand(DriveSubsystem driveSubsystem, VisionSubsystem visionSubsystem) {\n        this.driveSubsystem = driveSubsystem;\n        this.visionSubsystem = visionSubsystem;\n        addRequirements(driveSubsystem);\n    }\n    \n    @Override\n    public void initialize() {\n        timer = new Timer();\n        timer.start();\n    }\n    \n    @Override\n    public void execute() {\n        // Rotate slowly to search for target\n        driveSubsystem.drive(0.1, -0.1);\n    }\n    \n    @Override\n    public boolean isFinished() {\n        return visionSubsystem.hasTarget() || timer.get() > 10.0; // 10 second timeout\n    }\n    \n    @Override\n    public void end(boolean interrupted) {\n        driveSubsystem.stop();\n    }\n}"
    },
    {
      "type": "code",
      "title": "ApproachTargetCommand",
      "content": "<p>A command that drives toward a detected target:</p>",
      "code": "class ApproachTargetCommand extends CommandBase {\n    private final DriveSubsystem driveSubsystem;\n    private final VisionSubsystem visionSubsystem;\n    \n    public ApproachTargetCommand(DriveSubsystem driveSubsystem, VisionSubsystem visionSubsystem) {\n        this.driveSubsystem = driveSubsystem;\n        this.visionSubsystem = visionSubsystem;\n        addRequirements(driveSubsystem);\n    }\n    \n    @Override\n    public void execute() {\n        // Drive toward target based on vision data\n        double distance = visionSubsystem.getTargetDistance();\n        if (distance > 0.5) { // If more than 0.5 meters away\n            driveSubsystem.drive(0.3, 0.3);\n        }\n    }\n    \n    @Override\n    public boolean isFinished() {\n        return visionSubsystem.getTargetDistance() <= 0.5;\n    }\n    \n    @Override\n    public void end(boolean interrupted) {\n        driveSubsystem.stop();\n    }\n}"
    },
    {
      "type": "code",
      "title": "AlignToTargetCommand",
      "content": "<p>A command that aligns the robot to a target:</p>",
      "code": "class AlignToTargetCommand extends CommandBase {\n    private final DriveSubsystem driveSubsystem;\n    private final VisionSubsystem visionSubsystem;\n    \n    public AlignToTargetCommand(DriveSubsystem driveSubsystem, VisionSubsystem visionSubsystem) {\n        this.driveSubsystem = driveSubsystem;\n        this.visionSubsystem = visionSubsystem;\n        addRequirements(driveSubsystem);\n    }\n    \n    @Override\n    public void execute() {\n        // Align to target using vision data\n        double angleError = visionSubsystem.getTargetAngleError();\n        if (Math.abs(angleError) > 5.0) { // If more than 5 degrees off\n            double turnPower = Math.signum(angleError) * 0.2;\n            driveSubsystem.drive(turnPower, -turnPower);\n        }\n    }\n    \n    @Override\n    public boolean isFinished() {\n        return visionSubsystem.isAligned();\n    }\n    \n    @Override\n    public void end(boolean interrupted) {\n        driveSubsystem.stop();\n    }\n}"
    },
    {
      "type": "text",
      "title": "Command Scheduling Strategies",
      "content": "<p>Advanced scheduling strategies can optimize robot performance and prevent conflicts. These strategies include priority-based scheduling, conditional scheduling, and dynamic command generation.</p><p>Understanding these patterns helps you create more sophisticated autonomous routines that can adapt to changing conditions and optimize performance.</p>"
    },
    {
      "type": "code",
      "title": "AdvancedScheduler Basic Structure",
      "content": "<p>The basic structure of an advanced scheduler:</p>",
      "code": "public class AdvancedScheduler {\n    private final CommandScheduler scheduler;\n    private final CommandFactory commandFactory;\n    private final Map<String, CommandBase> activeCommands;\n    \n    public AdvancedScheduler(CommandFactory commandFactory) {\n        this.scheduler = CommandScheduler.getInstance();\n        this.commandFactory = commandFactory;\n        this.activeCommands = new HashMap<>();\n    }\n}"
    },
    {
      "type": "code",
      "title": "Priority-Based Scheduling",
      "content": "<p>Schedule commands with priority levels:</p>",
      "code": "    // Priority-based scheduling\n    public void scheduleWithPriority(CommandBase command, int priority) {\n        // Cancel lower priority commands that conflict\n        for (Map.Entry<String, CommandBase> entry : activeCommands.entrySet()) {\n            CommandBase activeCommand = entry.getValue();\n            if (hasConflictingRequirements(command, activeCommand) && \n                getCommandPriority(activeCommand) < priority) {\n                cancelCommand(entry.getKey());\n            }\n        }\n        \n        scheduler.schedule(command);\n        activeCommands.put(command.getClass().getSimpleName(), command);\n    }\n    \n    // Conditional scheduling based on sensor data\n    public void scheduleConditionally(CommandBase command, Supplier<Boolean> condition) {\n        if (condition.get()) {\n            scheduler.schedule(command);\n        }\n    }"
    },
    {
      "type": "code",
      "title": "Command Queuing System",
      "content": "<p>A queue system for managing command execution order:</p>",
      "code": "    // Command queuing system\n    private final Queue<CommandBase> commandQueue = new LinkedList<>();\n    \n    public void queueCommand(CommandBase command) {\n        commandQueue.offer(command);\n    }\n    \n    public void processQueue() {\n        if (!commandQueue.isEmpty() && scheduler.getActiveCommands().isEmpty()) {\n            CommandBase nextCommand = commandQueue.poll();\n            scheduler.schedule(nextCommand);\n        }\n    }"
    },
    {
      "type": "code",
      "title": "Utility Methods for Advanced Scheduler",
      "content": "<p>Helper methods for the advanced scheduler:</p>",
      "code": "    // Utility methods\n    private boolean hasConflictingRequirements(CommandBase cmd1, CommandBase cmd2) {\n        // This is a simplified check - in practice, you'd need to access\n        // the actual requirements of each command\n        return cmd1.getClass() == cmd2.getClass();\n    }\n    \n    private int getCommandPriority(CommandBase command) {\n        // Define priority levels for different command types\n        if (command instanceof EmergencyStopCommand) return 100;\n        if (command instanceof SafetyCommand) return 80;\n        if (command instanceof MovementCommand) return 60;\n        if (command instanceof UtilityCommand) return 40;\n        return 20;\n    }\n    \n    private void cancelCommand(String commandName) {\n        CommandBase command = activeCommands.get(commandName);\n        if (command != null) {\n            scheduler.cancel(command);\n            activeCommands.remove(commandName);\n        }\n    }"
    },
    {
      "type": "code",
      "title": "Dynamic Command Generation",
      "content": "<p>Generate commands based on game state:</p>",
      "code": "    // Dynamic command generation based on game state\n    public void scheduleAdaptiveRoutine(GameState gameState) {\n        CommandBase routine = generateRoutineForState(gameState);\n        scheduler.schedule(routine);\n    }\n    \n    private CommandBase generateRoutineForState(GameState gameState) {\n        switch (gameState) {\n            case AUTONOMOUS_START:\n                return new SequentialCommandGroup(\n                    commandFactory.driveForward(0.5, 1.0),\n                    commandFactory.turnRight(90)\n                );\n            case TELEOP:\n                return new WaitCommand(0.1); // No autonomous during teleop\n            case ENDGAME:\n                return new SequentialCommandGroup(\n                    commandFactory.driveForward(0.8, 2.0),\n                    commandFactory.shootSequence(5.0)\n                );\n            default:\n                return new WaitCommand(0.1);\n        }\n    }"
    },
    {
      "type": "code",
      "title": "Using AdvancedScheduler in OpMode",
      "content": "<p>Example of using the advanced scheduler in an OpMode:</p>",
      "code": "public class AdvancedAutonomousOpMode extends LinearOpMode {\n    private AdvancedScheduler advancedScheduler;\n    private CommandFactory commandFactory;\n    \n    @Override\n    public void runOpMode() {\n        // Initialize subsystems and factory\n        DriveSubsystem driveSubsystem = new DriveSubsystem(hardwareMap);\n        commandFactory = new CommandFactory(driveSubsystem, null, null);\n        advancedScheduler = new AdvancedScheduler(commandFactory);\n        \n        waitForStart();\n        \n        while (opModeIsActive()) {\n            // Process command queue\n            advancedScheduler.processQueue();\n            \n            // Schedule commands based on conditions\n            advancedScheduler.scheduleConditionally(\n                commandFactory.driveForward(0.5, 1.0),\n                () -> gamepad1.a // Only if A button is pressed\n            );\n            \n            // Queue commands for later execution\n            if (gamepad1.b) {\n                advancedScheduler.queueCommand(commandFactory.turnRight(90));\n            }\n            \n            // Run the scheduler\n            CommandScheduler.getInstance().run();\n        }\n    }\n}"
    },
    {
      "type": "code",
      "title": "Supporting Classes",
      "content": "<p>Supporting classes for the advanced scheduler:</p>",
      "code": "// Supporting classes\nenum GameState {\n    AUTONOMOUS_START,\n    TELEOP,\n    ENDGAME\n}\n\nclass EmergencyStopCommand extends CommandBase {\n    private final DriveSubsystem driveSubsystem;\n    \n    public EmergencyStopCommand(DriveSubsystem driveSubsystem) {\n        this.driveSubsystem = driveSubsystem;\n        addRequirements(driveSubsystem);\n    }\n    \n    @Override\n    public void execute() {\n        driveSubsystem.stop();\n    }\n    \n    @Override\n    public boolean isFinished() {\n        return false; // Run until interrupted\n    }\n}"
    },
    {
      "type": "text",
      "title": "Testing and Debugging Command-Based Code",
      "content": "<p>Testing command-based code is crucial for ensuring reliable autonomous performance. This includes unit testing individual commands, integration testing command groups, and debugging techniques for complex behaviors.</p><p>Good testing practices help you catch issues early and ensure your autonomous routines work consistently in competition.</p>"
    },
    {
      "type": "code",
      "title": "Unit Test Example",
      "content": "<p>Example unit test for a simple command:</p>",
      "code": "// Unit test for a simple command\npublic class DriveForwardCommandTest {\n    private DriveSubsystem mockDriveSubsystem;\n    private DriveForwardCommand command;\n    \n    @Before\n    public void setUp() {\n        // Create mock subsystem for testing\n        mockDriveSubsystem = mock(DriveSubsystem.class);\n        command = new DriveForwardCommand(mockDriveSubsystem, 0.5, 2.0);\n    }\n    \n    @Test\n    public void testCommandInitialization() {\n        command.initialize();\n        // Verify that the command was initialized correctly\n        // (In a real test, you'd check timer state, etc.)\n    }\n    \n    @Test\n    public void testCommandExecution() {\n        command.initialize();\n        command.execute();\n        \n        // Verify that the drive method was called with correct parameters\n        verify(mockDriveSubsystem).drive(0.5, 0.5);\n    }\n    \n    @Test\n    public void testCommandCompletion() {\n        command.initialize();\n        \n        // Simulate time passing\n        // In a real test, you'd manipulate the timer\n        \n        assertTrue(command.isFinished());\n    }\n}"
    },
    {
      "type": "code",
      "title": "Integration Test Example",
      "content": "<p>Example integration test for command groups:</p>",
      "code": "// Integration test for command groups\npublic class AutonomousRoutineTest {\n    private DriveSubsystem mockDriveSubsystem;\n    private ArmSubsystem mockArmSubsystem;\n    private SimpleAutonomousRoutine routine;\n    \n    @Before\n    public void setUp() {\n        mockDriveSubsystem = mock(DriveSubsystem.class);\n        mockArmSubsystem = mock(ArmSubsystem.class);\n        routine = new SimpleAutonomousRoutine(mockDriveSubsystem, mockArmSubsystem);\n    }\n    \n    @Test\n    public void testRoutineExecution() {\n        // Test that the routine executes all commands in sequence\n        CommandScheduler scheduler = CommandScheduler.getInstance();\n        scheduler.schedule(routine);\n        \n        // Run the scheduler until the routine completes\n        while (!routine.isFinished()) {\n            scheduler.run();\n        }\n        \n        // Verify that all expected methods were called\n        verify(mockDriveSubsystem, times(2)).drive(anyDouble(), anyDouble());\n        verify(mockArmSubsystem).extendArm();\n        verify(mockArmSubsystem).retractArm();\n    }\n}"
    },
    {
      "type": "code",
      "title": "CommandDebugger Utility Class",
      "content": "<p>A utility class for debugging commands:</p>",
      "code": "// Debugging utility class\npublic class CommandDebugger {\n    private static final boolean DEBUG_ENABLED = true;\n    \n    public static void logCommandStart(CommandBase command) {\n        if (DEBUG_ENABLED) {\n            System.out.println(\"[DEBUG] Starting command: \" + command.getClass().getSimpleName());\n        }\n    }\n    \n    public static void logCommandEnd(CommandBase command, boolean interrupted) {\n        if (DEBUG_ENABLED) {\n            String status = interrupted ? \"interrupted\" : \"completed\";\n            System.out.println(\"[DEBUG] Command \" + command.getClass().getSimpleName() + \n                              \" \" + status);\n        }\n    }\n    \n    public static void logSubsystemState(SubsystemBase subsystem) {\n        if (DEBUG_ENABLED) {\n            System.out.println(\"[DEBUG] Subsystem \" + subsystem.getClass().getSimpleName() + \n                              \" state: \" + subsystem.toString());\n        }\n    }\n}"
    },
    {
      "type": "code",
      "title": "Debuggable Command Example",
      "content": "<p>An enhanced command with built-in debugging:</p>",
      "code": "// Enhanced command with debugging\npublic class DebuggableDriveForwardCommand extends CommandBase {\n    private final DriveSubsystem driveSubsystem;\n    private final double power;\n    private final double duration;\n    private Timer timer;\n    \n    public DebuggableDriveForwardCommand(DriveSubsystem driveSubsystem, double power, double duration) {\n        this.driveSubsystem = driveSubsystem;\n        this.power = power;\n        this.duration = duration;\n        addRequirements(driveSubsystem);\n    }\n    \n    @Override\n    public void initialize() {\n        CommandDebugger.logCommandStart(this);\n        timer = new Timer();\n        timer.start();\n        System.out.println(\"[DEBUG] DriveForwardCommand initialized with power=\" + power + \", duration=\" + duration);\n    }\n    \n    @Override\n    public void execute() {\n        driveSubsystem.drive(power, power);\n        System.out.println(\"[DEBUG] DriveForwardCommand executing, time elapsed: \" + timer.get());\n    }\n    \n    @Override\n    public boolean isFinished() {\n        boolean finished = timer.get() >= duration;\n        if (finished) {\n            System.out.println(\"[DEBUG] DriveForwardCommand finished, total time: \" + timer.get());\n        }\n        return finished;\n    }\n    \n    @Override\n    public void end(boolean interrupted) {\n        driveSubsystem.stop();\n        CommandDebugger.logCommandEnd(this, interrupted);\n        \n        if (interrupted) {\n            System.out.println(\"[DEBUG] DriveForwardCommand was interrupted at time: \" + timer.get());\n        }\n    }\n}"
    },
    {
      "type": "code",
      "title": "Performance Monitoring",
      "content": "<p>A class for monitoring command performance:</p>",
      "code": "// Performance monitoring\npublic class CommandPerformanceMonitor {\n    private final Map<String, Long> commandStartTimes;\n    private final Map<String, List<Long>> commandDurations;\n    \n    public CommandPerformanceMonitor() {\n        commandStartTimes = new HashMap<>();\n        commandDurations = new HashMap<>();\n    }\n    \n    public void startCommand(CommandBase command) {\n        String commandName = command.getClass().getSimpleName();\n        commandStartTimes.put(commandName, System.currentTimeMillis());\n    }\n    \n    public void endCommand(CommandBase command) {\n        String commandName = command.getClass().getSimpleName();\n        Long startTime = commandStartTimes.remove(commandName);\n        \n        if (startTime != null) {\n            long duration = System.currentTimeMillis() - startTime;\n            commandDurations.computeIfAbsent(commandName, k -> new ArrayList<>()).add(duration);\n            \n            System.out.println(\"[PERF] \" + commandName + \" took \" + duration + \"ms\");\n        }\n    }\n    \n    public void printPerformanceReport() {\n        System.out.println(\"\\n=== Command Performance Report ===\");\n        for (Map.Entry<String, List<Long>> entry : commandDurations.entrySet()) {\n            String commandName = entry.getKey();\n            List<Long> durations = entry.getValue();\n            \n            double avgDuration = durations.stream().mapToLong(Long::longValue).average().orElse(0.0);\n            long maxDuration = durations.stream().mapToLong(Long::longValue).max().orElse(0);\n            long minDuration = durations.stream().mapToLong(Long::longValue).min().orElse(0);\n            \n            System.out.printf(\"%s: avg=%.1fms, min=%dms, max=%dms, count=%d%n\",\n                             commandName, avgDuration, minDuration, maxDuration, durations.size());\n        }\n    }\n}"
    },
    {
      "type": "exercise-box",
      "title": "Practice: Advanced Patterns",
      "description": "Implement advanced command-based patterns",
      "tasks": [
        "Create a conditional command that chooses different actions based on sensor data",
        "Build a command factory for your robot's mechanisms",
        "Implement a simple state machine for an autonomous routine",
        "Add debugging and performance monitoring to your commands",
        "Write unit tests for your commands and command groups"
      ],
      "content": "// Start with these templates\n\n// Conditional command template\npublic class ConditionalActionCommand extends SelectCommand {\n    public ConditionalActionCommand(DriveSubsystem driveSubsystem, Sensor sensor) {\n        super(\n            Map.of(\n                () -> sensor.getValue() > 100, new ActionACommand(driveSubsystem),\n                () -> sensor.getValue() < 50, new ActionBCommand(driveSubsystem)\n            ),\n            new DefaultActionCommand(driveSubsystem)\n        );\n    }\n}\n\n// Command factory template\npublic class MyCommandFactory {\n    private final DriveSubsystem driveSubsystem;\n    \n    public MyCommandFactory(DriveSubsystem driveSubsystem) {\n        this.driveSubsystem = driveSubsystem;\n    }\n    \n    public CommandBase createCustomCommand(double parameter) {\n        // Create and return a command with the given parameter\n        return new CustomCommand(driveSubsystem, parameter);\n    }\n}\n\n// State machine template\npublic class MyStateMachine extends CommandBase {\n    private enum State { STATE1, STATE2, STATE3 }\n    private State currentState;\n    \n    @Override\n    public void initialize() {\n        currentState = State.STATE1;\n        // Initialize first state\n    }\n    \n    @Override\n    public void execute() {\n        // Handle state transitions based on conditions\n        switch (currentState) {\n            case STATE1:\n                // Handle state 1 logic\n                break;\n            case STATE2:\n                // Handle state 2 logic\n                break;\n            case STATE3:\n                // Handle state 3 logic\n                break;\n        }\n    }\n    \n    @Override\n    public boolean isFinished() {\n        return currentState == State.STATE3; // Or whatever end condition\n    }\n}"
    },
    {
      "type": "text",
      "title": "Advanced Pattern Best Practices",
      "content": "<p>Follow these guidelines when implementing advanced patterns:</p><ul><li><strong>Keep It Simple</strong>: Don't over-engineer - use the simplest pattern that works</li><li><strong>Test Thoroughly</strong>: Advanced patterns can be complex - test each component</li><li><strong>Document Well</strong>: Complex patterns need clear documentation</li><li><strong>Performance Matters</strong>: Monitor performance, especially with state machines</li><li><strong>Error Handling</strong>: Plan for failure cases and edge conditions</li><li><strong>Maintainability</strong>: Ensure patterns can be understood and modified by team members</li></ul>"
    },
    {
      "type": "emphasis-box",
      "title": "Key Takeaways",
      "content": "<ul><li>Conditional commands enable adaptive autonomous routines</li><li>Command factories reduce code duplication and improve maintainability</li><li>State machines can model complex behaviors with clear state transitions</li><li>Advanced scheduling strategies optimize robot performance</li><li>Testing and debugging are crucial for reliable autonomous performance</li><li>Use the right pattern for your specific use case</li><li>Advanced patterns should enhance, not complicate, your code</li></ul>"
    }
  ]
} 