{
  "title": "Introduction to Command-Based Programming",
  "sections": [
    {
      "type": "text",
      "title": "What is Command-Based Programming?",
      "content": "<p>Command-based programming is a software architecture pattern that breaks down robot operations into discrete, reusable commands. Instead of writing long, linear programs that do everything in sequence, you create small, focused commands that each handle a specific task.</p><p>This approach is inspired by <a href='https://docs.wpilib.org/en/stable/docs/software/commandbased/index.html' target='_blank'>WPILib's command-based programming</a>, which is the standard for FRC robotics. SolversLib brings this powerful pattern to FTC, making your robot code more modular, maintainable, and easier to debug.</p>"
    },
    {
      "type": "code",
      "title": "Traditional vs Command-Based Programming",
      "content": "<p>Let's compare traditional linear programming with command-based programming:</p>",
      "code": "// Traditional Linear Programming (Hard to maintain)\npublic class LinearOpMode extends OpMode {\n    @Override\n    public void runOpMode() {\n        // Initialize hardware\n        DcMotor leftMotor = hardwareMap.get(DcMotor.class, \"leftMotor\");\n        DcMotor rightMotor = hardwareMap.get(DcMotor.class, \"rightMotor\");\n        \n        waitForStart();\n        \n        // Drive forward for 2 seconds\n        leftMotor.setPower(0.5);\n        rightMotor.setPower(0.5);\n        sleep(2000);\n        \n        // Turn right for 1 second\n        leftMotor.setPower(0.5);\n        rightMotor.setPower(-0.5);\n        sleep(1000);\n        \n        // Stop\n        leftMotor.setPower(0);\n        rightMotor.setPower(0);\n    }\n}\n\n// Command-Based Programming (Modular and reusable)\npublic class DriveForwardCommand extends CommandBase {\n    private final DriveSubsystem driveSubsystem;\n    private final double power;\n    private final double duration;\n    private Timer timer;\n    \n    public DriveForwardCommand(DriveSubsystem driveSubsystem, double power, double duration) {\n        this.driveSubsystem = driveSubsystem;\n        this.power = power;\n        this.duration = duration;\n        addRequirements(driveSubsystem);\n    }\n    \n    @Override\n    public void initialize() {\n        timer = new Timer();\n        timer.start();\n    }\n    \n    @Override\n    public void execute() {\n        driveSubsystem.drive(power, power);\n    }\n    \n    @Override\n    public boolean isFinished() {\n        return timer.get() >= duration;\n    }\n    \n    @Override\n    public void end(boolean interrupted) {\n        driveSubsystem.stop();\n    }\n}"
    },
    {
      "type": "text",
      "title": "Core Components: Commands, Subsystems, and Scheduler",
      "content": "<p>Command-based programming is built on three fundamental components that work together:</p><ul><li><strong>Commands</strong>: Discrete actions that the robot can perform (like \"drive forward for 2 seconds\" or \"raise arm to position\")</li><li><strong>Subsystems</strong>: Logical groupings of related hardware (like a drive subsystem that manages all drive motors)</li><li><strong>Scheduler</strong>: The manager that decides which commands run when and how they interact</li></ul><p>Think of it like this: Commands are the tasks, subsystems are the robot parts, and the scheduler is the manager that coordinates everything.</p>"
    },
    {
      "type": "code",
      "title": "Command Lifecycle Methods",
      "content": "<p>Every command follows a specific lifecycle with four key methods:</p>",
      "code": "public class ExampleCommand extends CommandBase {\n    private final DriveSubsystem driveSubsystem;\n    \n    public ExampleCommand(DriveSubsystem driveSubsystem) {\n        this.driveSubsystem = driveSubsystem;\n        addRequirements(driveSubsystem); // Declare subsystem requirements\n    }\n    \n    @Override\n    public void initialize() {\n        // Called once when command starts\n        // Set up initial conditions, reset timers, etc.\n        telemetry.addData(\"Command\", \"Starting ExampleCommand\");\n    }\n    \n    @Override\n    public void execute() {\n        // Called repeatedly while command is running\n        // Perform the actual command logic\n        driveSubsystem.drive(0.5, 0.5);\n    }\n    \n    @Override\n    public boolean isFinished() {\n        // Called repeatedly to check if command should end\n        // Return true when command is complete\n        return false; // This command runs forever until interrupted\n    }\n    \n    @Override\n    public void end(boolean interrupted) {\n        // Called once when command ends (either finished or interrupted)\n        // Clean up, stop motors, etc.\n        driveSubsystem.stop();\n        if (interrupted) {\n            telemetry.addData(\"Command\", \"ExampleCommand was interrupted\");\n        } else {\n            telemetry.addData(\"Command\", \"ExampleCommand completed\");\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Benefits of Command-Based Programming",
      "content": "<p>Command-based programming offers several significant advantages over traditional linear programming:</p><ul><li><strong>Modularity</strong>: Each command is self-contained and can be developed, tested, and debugged independently</li><li><strong>Reusability</strong>: Commands can be used in multiple autonomous routines or teleop sequences</li><li><strong>Testability</strong>: Individual commands can be tested in isolation</li><li><strong>Maintainability</strong>: Changes to one command don't affect others</li><li><strong>Complexity Management</strong>: Complex autonomous routines become manageable by combining simple commands</li><li><strong>Parallel Operations</strong>: Multiple commands can run simultaneously when they don't conflict</li></ul>"
    },
    {
      "type": "code",
      "title": "Simple Command Example: Drive Forward",
      "content": "<p>Here's a complete example of a simple command that drives the robot forward for a specified duration:</p>",
      "code": "package org.firstinspires.ftc.teamcode.commands;\n\nimport com.seattlesolvers.solverslib.command.CommandBase;\nimport com.seattlesolvers.solverslib.subsystems.DriveSubsystem;\nimport com.seattlesolvers.solverslib.util.Timer;\n\npublic class DriveForwardCommand extends CommandBase {\n    private final DriveSubsystem driveSubsystem;\n    private final double power;\n    private final double duration;\n    private Timer timer;\n    \n    public DriveForwardCommand(DriveSubsystem driveSubsystem, double power, double duration) {\n        this.driveSubsystem = driveSubsystem;\n        this.power = power;\n        this.duration = duration;\n        \n        // Declare that this command requires the drive subsystem\n        addRequirements(driveSubsystem);\n    }\n    \n    @Override\n    public void initialize() {\n        // Create and start timer when command begins\n        timer = new Timer();\n        timer.start();\n    }\n    \n    @Override\n    public void execute() {\n        // Drive forward at specified power\n        driveSubsystem.drive(power, power);\n    }\n    \n    @Override\n    public boolean isFinished() {\n        // Command is finished when timer reaches duration\n        return timer.get() >= duration;\n    }\n    \n    @Override\n    public void end(boolean interrupted) {\n        // Stop the robot when command ends\n        driveSubsystem.stop();\n        \n        if (interrupted) {\n            // Command was interrupted (e.g., by another command)\n            System.out.println(\"DriveForwardCommand was interrupted\");\n        } else {\n            // Command completed normally\n            System.out.println(\"DriveForwardCommand completed successfully\");\n        }\n    }\n}"
    },
    {
      "type": "exercise-box",
      "title": "Practice: Understanding Command Lifecycle",
      "description": "Analyze the command lifecycle by tracing through a simple command execution",
      "tasks": [
        "Create a command that turns the robot right for 1.5 seconds",
        "Add telemetry output in each lifecycle method to track execution",
        "Test what happens when the command is interrupted by another command",
        "Modify the command to accept power as a parameter"
      ],
      "content": "// Start with this basic structure and expand it\npublic class TurnRightCommand extends CommandBase {\n    private final DriveSubsystem driveSubsystem;\n    private final double duration;\n    private Timer timer;\n    \n    public TurnRightCommand(DriveSubsystem driveSubsystem, double duration) {\n        this.driveSubsystem = driveSubsystem;\n        this.duration = duration;\n        addRequirements(driveSubsystem);\n    }\n    \n    // Implement the four lifecycle methods:\n    // initialize(), execute(), isFinished(), end(boolean interrupted)\n}"
    },
    {
      "type": "text",
      "title": "Next Steps",
      "content": "<p>Now that you understand the basics of command-based programming, you're ready to explore:</p><ul><li><strong>Subsystem Design</strong>: How to organize your robot hardware into logical subsystems</li><li><strong>Command Scheduling</strong>: How the scheduler manages command execution and priorities</li><li><strong>Command Groups</strong>: How to combine multiple commands into complex autonomous routines</li><li><strong>Advanced Patterns</strong>: Sophisticated techniques for complex robot behaviors</li></ul><p>Command-based programming may seem complex at first, but it provides a powerful foundation for building reliable, maintainable robot code. The modular approach makes it easier to debug issues, add new features, and create sophisticated autonomous routines.</p>"
    },
    {
      "type": "emphasis-box",
      "title": "Key Takeaways",
      "content": "<ul><li>Commands are discrete, reusable actions that the robot can perform</li><li>Subsystems group related hardware and provide a clean interface</li><li>The scheduler manages command execution and prevents conflicts</li><li>Command-based programming makes code more modular, testable, and maintainable</li><li>Every command follows the same lifecycle: initialize → execute → isFinished → end</li></ul>"
    }
  ]
}
