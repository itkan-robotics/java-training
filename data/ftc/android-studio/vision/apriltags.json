{
  "title": "AprilTags",
  "sections": [
    {
      "type": "text",
      "title": "What are AprilTags?",
      "content": "AprilTags are fiducial markers - special black and white patterns that can be easily detected by computer vision systems. In FTC robotics, AprilTags serve as visual landmarks that provide precise positioning and orientation information for autonomous navigation.<br><br>AprilTags are particularly valuable because they:<br>• Provide absolute positioning information<br>• Work reliably in various lighting conditions<br>• Can be detected from different angles and distances<br>• Offer sub-centimeter precision when properly calibrated<br>• Are standardized and well-documented"
    },
    {
      "type": "rules-box",
      "title": "AprilTag Advantages in FTC",
      "items": [
        "Precise 6-degree-of-freedom pose estimation",
        "Robust detection in varying lighting conditions",
        "Wide detection range (near to far distances)",
        "Fast processing suitable for real-time applications",
        "Standardized library of pre-defined tags",
        "Excellent for autonomous navigation and positioning"
      ]
    },
    {
      "type": "text",
      "title": "AprilTag Fundamentals",
      "content": "AprilTags work by encoding information in a specific pattern of black and white squares. Each tag has a unique ID that can be used to identify it and retrieve its metadata.<br><br><strong>Tag Structure:</strong> AprilTags consist of a central data region surrounded by a black border and white margin<br><strong>Tag Families:</strong> Different families (like TAG_36h11) define the encoding scheme and error correction<br><strong>Tag Size:</strong> Physical size affects detection range and accuracy<br><strong>Detection Range:</strong> Typically 10cm to 10m depending on tag size and camera resolution<br><strong>Pose Estimation:</strong> Provides 3D position (X, Y, Z) and orientation (roll, pitch, yaw)"
    },
    {
      "type": "text",
      "title": "Basic AprilTag OpMode Setup",
      "content": "Let's create a basic OpMode for AprilTag detection. For more on AprilTags in FTC, see <a href=\"https://ftc-docs.firstinspires.org/en/latest/apriltag/vision_portal/apriltag_intro/apriltag-intro.html\" target=\"_blank\">FTC AprilTag Documentation</a>."
    },
    {
      "type": "code",
      "title": "Import Statements and Class Definition",
      "content": "Import the necessary AprilTag classes and define the OpMode class.",
      "code": "import org.firstinspires.ftc.vision.VisionPortal;\nimport org.firstinspires.ftc.vision.apriltag.AprilTagProcessor;\nimport org.firstinspires.ftc.vision.apriltag.AprilTagDetection;\nimport org.firstinspires.ftc.vision.apriltag.AprilTagLibrary;\nimport org.firstinspires.ftc.vision.apriltag.AprilTagPoseFtc;\nimport java.util.List;\n\npublic class BasicAprilTagOpMode extends LinearOpMode {\n    private VisionPortal visionPortal;\n    private AprilTagProcessor aprilTagProcessor;\n    // ..."
    },
    {
      "type": "text",
      "title": "AprilTag Processor Initialization",
      "content": "Initialize the AprilTag processor with the current game's tag library. For more on tag libraries, see <a href=\"https://ftc-docs.firstinspires.org/en/latest/apriltag/vision_portal/apriltag_intro/apriltag-intro.html#tag-libraries\" target=\"_blank\">FTC AprilTag Tag Libraries</a>."
    },
    {
      "type": "code",
      "title": "Processor Initialization Code",
      "content": "Configure the AprilTag processor with the current game's tag library and family.",
      "code": "    @Override\n    public void runOpMode() {\n        // Initialize AprilTag processor\n        aprilTagProcessor = new AprilTagProcessor.Builder()\n            .setTagLibrary(AprilTagLibrary.getCurrentGameTagLibrary())\n            .setTagFamily(AprilTagProcessor.TagFamily.TAG_36h11)\n            .setTagModel(AprilTagProcessor.TagModel.TAG_36h11)\n            .build();"
    },
    {
      "type": "text",
      "title": "Vision Portal Setup",
      "content": "Build the Vision Portal with the AprilTag processor and camera configuration. For more on Vision Portal, see <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/vision/vision-portal.html\" target=\"_blank\">FTC Vision Portal Documentation</a>."
    },
    {
      "type": "code",
      "title": "Vision Portal Configuration",
      "content": "Configure Vision Portal with camera and processor settings.",
      "code": "        // Build Vision Portal with AprilTag processor\n        visionPortal = new VisionPortal.Builder()\n            .setCamera(hardwareMap.get(WebcamName.class, \"Webcam 1\"))\n            .addProcessor(aprilTagProcessor)\n            .setCameraResolution(new Size(640, 480))\n            .enableLiveView(true)\n            .build();"
    },
    {
      "type": "text",
      "title": "Main Detection Loop",
      "content": "The main loop retrieves AprilTag detections and processes them. For more on accessing detections, see <a href=\"https://ftc-docs.firstinspires.org/en/latest/apriltag/vision_portal/apriltag_intro/apriltag-intro.html#accessing-detection-results\" target=\"_blank\">FTC AprilTag: Accessing Results</a>."
    },
    {
      "type": "code",
      "title": "Main Detection Loop Implementation",
      "content": "Get AprilTag detections and process them in the main loop.",
      "code": "        waitForStart();\n        \n        while (opModeIsActive()) {\n            // Get AprilTag detections\n            List<AprilTagDetection> detections = aprilTagProcessor.getDetections();\n            \n            // Process detections\n            processAprilTagDetections(detections);\n            \n            telemetry.update();\n        }\n    }"
    },
    {
      "type": "text",
      "title": "Detection Processing Method",
      "content": "Process the detected AprilTags and display their information on telemetry. For more on pose information, see <a href=\"https://ftc-docs.firstinspires.org/en/latest/apriltag/vision_portal/apriltag_intro/apriltag-intro.html#pose-estimation\" target=\"_blank\">FTC AprilTag Pose Estimation</a>."
    },
    {
      "type": "code",
      "title": "processAprilTagDetections Method",
      "content": "Process detected AprilTags and display pose information on telemetry.",
      "code": "    private void processAprilTagDetections(List<AprilTagDetection> detections) {\n        if (detections.isEmpty()) {\n            telemetry.addData(\"AprilTags\", \"No tags detected\");\n            return;\n        }\n        \n        // Process each detected tag\n        for (AprilTagDetection detection : detections) {\n            telemetry.addData(\"Tag ID\", detection.id);\n            telemetry.addData(\"Tag Name\", detection.metadata != null ? detection.metadata.name : \"Unknown\");\n            \n            // Get pose information\n            AprilTagPoseFtc pose = detection.ftcPose;\n            telemetry.addData(\"Position\", \"X: %.2f, Y: %.2f, Z: %.2f\", pose.x, pose.y, pose.z);\n            telemetry.addData(\"Rotation\", \"Roll: %.2f, Pitch: %.2f, Yaw: %.2f\", pose.roll, pose.pitch, pose.yaw);\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Camera Calibration for AprilTags",
      "content": "Accurate AprilTag pose estimation requires proper camera calibration. Camera calibration determines the intrinsic parameters of your camera, including focal length, principal point, and lens distortion.<br><br><strong>Intrinsic Parameters:</strong><br>• <strong>Focal Length:</strong> Distance from camera center to image plane<br>• <strong>Principal Point:</strong> Intersection of optical axis with image plane<br>• <strong>Distortion Coefficients:</strong> Correct for lens distortion<br><br><strong>Calibration Process:</strong><br>• Use a calibration pattern (checkerboard or AprilTag grid)<br>• Capture multiple images from different angles<br>• Use calibration software to compute parameters<br>• Apply parameters to your AprilTag pose solver"
    },
    {
      "type": "text",
      "title": "Advanced AprilTag OpMode Setup",
      "content": "Let's create an advanced AprilTag OpMode with custom pose solver and filtering. For more on advanced configuration, see <a href=\"https://ftc-docs.firstinspires.org/en/latest/apriltag/vision_portal/apriltag_intro/apriltag-intro.html#advanced-configuration\" target=\"_blank\">FTC AprilTag Advanced Configuration</a>."
    },
    {
      "type": "code",
      "title": "Import Statements and Class Definition",
      "content": "Import additional AprilTag classes and define the advanced OpMode class.",
      "code": "import org.firstinspires.ftc.vision.apriltag.SingleTagPoseSolver;\nimport org.firstinspires.ftc.vision.apriltag.MultiTagPoseSolver;\nimport org.opencv.core.Size;\n\npublic class AdvancedAprilTagOpMode extends LinearOpMode {\n    private VisionPortal visionPortal;\n    private AprilTagProcessor aprilTagProcessor;\n    // ..."
    },
    {
      "type": "text",
      "title": "Custom Pose Solver Creation",
      "content": "Create a custom pose solver with calibrated camera parameters. For more on camera calibration, see <a href=\"https://ftc-docs.firstinspires.org/en/latest/apriltag/vision_portal/apriltag_intro/apriltag-intro.html#camera-calibration\" target=\"_blank\">FTC AprilTag Camera Calibration</a>."
    },
    {
      "type": "code",
      "title": "Pose Solver Configuration",
      "content": "Create a SingleTagPoseSolver with calibrated camera parameters for accurate pose estimation.",
      "code": "    @Override\n    public void runOpMode() {\n        // Create custom pose solver with calibrated parameters\n        SingleTagPoseSolver poseSolver = new SingleTagPoseSolver(\n            new Size(6, 6),    // Tag size in inches\n            578.272,          // Focal length X (from calibration)\n            578.272,          // Focal length Y (from calibration)\n            402.145,          // Principal point X (from calibration)\n            221.506           // Principal point Y (from calibration)\n        );"
    },
    {
      "type": "text",
      "title": "Advanced Processor Configuration",
      "content": "Configure the AprilTag processor with advanced settings including smoothing and filtering options."
    },
    {
      "type": "code",
      "title": "Advanced Processor Setup",
      "content": "Configure the processor with smoothing windows, pose solver, and detection parameters.",
      "code": "        // Configure AprilTag processor with advanced settings\n        aprilTagProcessor = new AprilTagProcessor.Builder()\n            .setTagLibrary(AprilTagLibrary.getCurrentGameTagLibrary())\n            .setTagFamily(AprilTagProcessor.TagFamily.TAG_36h11)\n            .setTagModel(AprilTagProcessor.TagModel.TAG_36h11)\n            .setSingleTagFamilySmoothingWindow(3)  // Smooth single tag detections\n            .setMultiTagFamilySmoothingWindow(1)  // Smooth multi-tag detections\n            .setPoseSolver(poseSolver)\n            .setMaxHammingDistance(0)  // Only accept perfect detections\n            .build();"
    },
    {
      "type": "text",
      "title": "High-Resolution Vision Portal",
      "content": "Build Vision Portal with higher resolution and additional features for better detection accuracy."
    },
    {
      "type": "code",
      "title": "High-Resolution Vision Portal Setup",
      "content": "Configure Vision Portal with higher resolution and additional monitoring features.",
      "code": "        // Build Vision Portal\n        visionPortal = new VisionPortal.Builder()\n            .setCamera(hardwareMap.get(WebcamName.class, \"Webcam 1\"))\n            .addProcessor(aprilTagProcessor)\n            .setCameraResolution(new Size(1280, 720))\n            .setStreamFormat(VisionPortal.StreamFormat.YUY2)\n            .enableLiveView(true)\n            .enableCameraMonitoring(true)\n            .build();"
    },
    {
      "type": "text",
      "title": "Main Detection Loop",
      "content": "The main loop processes advanced detections with additional filtering and analysis."
    },
    {
      "type": "code",
      "title": "Main Detection Loop Implementation",
      "content": "Get detections and process them with advanced analysis.",
      "code": "        waitForStart();\n        \n        while (opModeIsActive()) {\n            List<AprilTagDetection> detections = aprilTagProcessor.getDetections();\n            processAdvancedDetections(detections);\n            telemetry.update();\n        }\n    }"
    },
    {
      "type": "text",
      "title": "Advanced Detection Processing",
      "content": "Process detections with advanced filtering to find the closest tag and display detailed information."
    },
    {
      "type": "code",
      "title": "Advanced Detection Processing Method",
      "content": "Find the closest tag and display detailed pose information.",
      "code": "    private void processAdvancedDetections(List<AprilTagDetection> detections) {\n        if (detections.isEmpty()) {\n            telemetry.addData(\"AprilTags\", \"No tags detected\");\n            return;\n        }\n        \n        // Find the closest tag\n        AprilTagDetection closestTag = null;\n        double minDistance = Double.MAX_VALUE;\n        \n        for (AprilTagDetection detection : detections) {\n            double distance = detection.ftcPose.z;\n            if (distance < minDistance) {\n                minDistance = distance;\n                closestTag = detection;\n            }\n        }"
    },
    {
      "type": "text",
      "title": "Closest Tag Information Display",
      "content": "Display detailed information about the closest detected tag including distance, offset, and angle."
    },
    {
      "type": "code",
      "title": "Closest Tag Information Code",
      "content": "Display detailed pose information for the closest tag.",
      "code": "        if (closestTag != null) {\n            telemetry.addData(\"Closest Tag ID\", closestTag.id);\n            telemetry.addData(\"Distance\", \"%.2f inches\", closestTag.ftcPose.z);\n            telemetry.addData(\"X Offset\", \"%.2f inches\", closestTag.ftcPose.x);\n            telemetry.addData(\"Y Offset\", \"%.2f inches\", closestTag.ftcPose.y);\n            telemetry.addData(\"Yaw Angle\", \"%.2f degrees\", Math.toDegrees(closestTag.ftcPose.yaw));\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Pose Estimation and Localization",
      "content": "AprilTag pose estimation provides 6-degree-of-freedom positioning information, allowing your robot to determine its exact position and orientation relative to the tag. This information is crucial for precise autonomous navigation.<br><br><strong>Coordinate System:</strong> AprilTag pose is reported in a right-handed coordinate system<br><strong>X-axis:</strong> Points to the right when facing the tag<br><strong>Y-axis:</strong> Points up when facing the tag<br><strong>Z-axis:</strong> Points toward the tag (distance)<br><strong>Angles:</strong> Roll, pitch, and yaw rotations around the respective axes<br><br><strong>Accuracy Factors:</strong><br>• Camera calibration quality<br>• Tag size and distance<br>• Image resolution and lighting<br>• Tag orientation relative to camera"
    },
    {
      "type": "text",
      "title": "AprilTag Navigation OpMode Setup",
      "content": "Let's create an OpMode that uses AprilTag pose information for robot navigation. For more on navigation, see <a href=\"https://ftc-docs.firstinspires.org/en/latest/apriltag/vision_portal/apriltag_intro/apriltag-intro.html#navigation\" target=\"_blank\">FTC AprilTag Navigation</a>."
    },
    {
      "type": "code",
      "title": "Class Definition and Hardware Setup",
      "content": "Define the navigation OpMode class and set up hardware components including drive motors.",
      "code": "public class AprilTagNavigationOpMode extends LinearOpMode {\n    private VisionPortal visionPortal;\n    private AprilTagProcessor aprilTagProcessor;\n    private DcMotor leftDrive, rightDrive;\n    \n    // PID constants for navigation\n    private static final double Kp = 0.05;\n    private static final double Ki = 0.0;\n    private static final double Kd = 0.01;\n    // ..."
    },
    {
      "type": "text",
      "title": "Hardware Initialization",
      "content": "Initialize the drive motors and AprilTag processor for navigation. For more on motor control, see <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/hardware_basics/motors.html\" target=\"_blank\">FTC Motor Documentation</a>."
    },
    {
      "type": "code",
      "title": "Hardware and Processor Initialization",
      "content": "Initialize drive motors and AprilTag processor with basic configuration.",
      "code": "    @Override\n    public void runOpMode() {\n        // Initialize hardware\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        \n        // Initialize AprilTag processor\n        aprilTagProcessor = new AprilTagProcessor.Builder()\n            .setTagLibrary(AprilTagLibrary.getCurrentGameTagLibrary())\n            .build();"
    },
    {
      "type": "text",
      "title": "Vision Portal Setup",
      "content": "Build Vision Portal with the AprilTag processor for navigation purposes."
    },
    {
      "type": "code",
      "title": "Vision Portal Configuration",
      "content": "Configure Vision Portal with camera and AprilTag processor.",
      "code": "        visionPortal = new VisionPortal.Builder()\n            .setCamera(hardwareMap.get(WebcamName.class, \"Webcam 1\"))\n            .addProcessor(aprilTagProcessor)\n            .build();"
    },
    {
      "type": "text",
      "title": "Main Navigation Loop",
      "content": "The main loop checks for AprilTag detections and navigates to the detected tag or stops if no tag is visible."
    },
    {
      "type": "code",
      "title": "Main Navigation Loop Implementation",
      "content": "Check for detections and navigate to the first detected tag or stop if none found.",
      "code": "        waitForStart();\n        \n        while (opModeIsActive()) {\n            List<AprilTagDetection> detections = aprilTagProcessor.getDetections();\n            \n            if (!detections.isEmpty()) {\n                // Navigate to the first detected tag\n                navigateToTag(detections.get(0));\n            } else {\n                // No tag detected, stop robot\n                stopRobot();\n            }\n            \n            telemetry.update();\n        }\n    }"
    },
    {
      "type": "text",
      "title": "Navigation Method Setup",
      "content": "The navigateToTag method uses AprilTag pose information to control the robot's movement. For more on pose estimation, see <a href=\"https://ftc-docs.firstinspires.org/en/latest/apriltag/vision_portal/apriltag_intro/apriltag-intro.html#pose-estimation\" target=\"_blank\">FTC AprilTag Pose Estimation</a>."
    },
    {
      "type": "code",
      "title": "Navigation Method Definition",
      "content": "Define the navigation method that uses pose information to control robot movement.",
      "code": "    private void navigateToTag(AprilTagDetection tag) {\n        AprilTagPoseFtc pose = tag.ftcPose;\n        \n        // Calculate desired distance and angle\n        double targetDistance = 12.0; // 12 inches from tag\n        double targetAngle = 0.0;     // Face the tag directly"
    },
    {
      "type": "text",
      "title": "Error Calculation",
      "content": "Calculate the distance and angle errors between the current robot position and the target position."
    },
    {
      "type": "code",
      "title": "Error Calculation Code",
      "content": "Calculate distance and angle errors for proportional control.",
      "code": "        // Calculate errors\n        double distanceError = pose.z - targetDistance;\n        double angleError = pose.yaw - targetAngle;"
    },
    {
      "type": "text",
      "title": "Proportional Control",
      "content": "Apply proportional control to calculate motor powers based on the calculated errors."
    },
    {
      "type": "code",
      "title": "Proportional Control Implementation",
      "content": "Apply proportional control to calculate motor powers for navigation.",
      "code": "        // Simple proportional control\n        double distancePower = Kp * distanceError;\n        double turnPower = Kp * angleError;\n        \n        // Apply motor commands\n        double leftPower = distancePower - turnPower;\n        double rightPower = distancePower + turnPower;"
    },
    {
      "type": "text",
      "title": "Power Limiting and Motor Control",
      "content": "Limit the motor powers to valid ranges and apply them to the drive motors."
    },
    {
      "type": "code",
      "title": "Power Limiting and Motor Control Code",
      "content": "Limit power values and apply them to the drive motors.",
      "code": "        // Limit power to valid range\n        leftPower = Math.max(-1.0, Math.min(1.0, leftPower));\n        rightPower = Math.max(-1.0, Math.min(1.0, rightPower));\n        \n        leftDrive.setPower(leftPower);\n        rightDrive.setPower(rightPower);"
    },
    {
      "type": "text",
      "title": "Navigation Information Display",
      "content": "Display navigation information on telemetry for debugging and monitoring purposes."
    },
    {
      "type": "code",
      "title": "Telemetry Display Code",
      "content": "Display navigation information including errors and motor powers.",
      "code": "        // Display navigation information\n        telemetry.addData(\"Tag ID\", tag.id);\n        telemetry.addData(\"Distance Error\", \"%.2f inches\", distanceError);\n        telemetry.addData(\"Angle Error\", \"%.2f degrees\", Math.toDegrees(angleError));\n        telemetry.addData(\"Left Power\", \"%.2f\", leftPower);\n        telemetry.addData(\"Right Power\", \"%.2f\", rightPower);\n    }"
    },
    {
      "type": "text",
      "title": "Robot Stop Method",
      "content": "The stopRobot method stops the robot when no AprilTag is detected, providing a safety mechanism."
    },
    {
      "type": "code",
      "title": "stopRobot Method",
      "content": "Stop the robot and display status when no tag is detected.",
      "code": "    private void stopRobot() {\n        leftDrive.setPower(0);\n        rightDrive.setPower(0);\n        telemetry.addData(\"Status\", \"No tag detected - stopped\");\n    }\n}"
    },
    {
      "type": "emphasis-box",
      "title": "AprilTag Best Practices",
      "content": "To get the best results from AprilTag detection:<br><br><strong>Tag Placement:</strong><br>• Mount tags securely and flat against surfaces<br>• Ensure good contrast between tag and background<br>• Avoid placing tags in areas with strong shadows or reflections<br><br><strong>Camera Setup:</strong><br>• Position camera to minimize motion blur<br>• Ensure adequate lighting without glare<br>• Use appropriate resolution for your detection range<br><br><strong>Processing:</strong><br>• Filter detections based on confidence and distance<br>• Implement smoothing for pose estimates<br>• Plan for cases where tags are not visible<br><br><strong>Calibration:</strong><br>• Calibrate camera with the same resolution used in competition<br>• Use multiple calibration images from different angles<br>• Validate calibration accuracy with known distances"
    },
    {
      "type": "exercise-box",
      "title": "AprilTag Navigation System",
      "description": "Create a complete AprilTag-based navigation system",
      "tasks": [
        "Set up AprilTag detection with proper camera calibration",
        "Implement pose estimation and coordinate transformation",
        "Create navigation algorithms to move toward specific tags",
        "Add multi-tag detection and selection logic",
        "Implement error handling for when tags are not visible",
        "Test the system with different tag positions and orientations"
      ],
      "content": "Develop a complete AprilTag navigation system that can detect multiple tags, select the appropriate target, and navigate the robot to a specific position relative to the tag. Include error handling and fallback behaviors."
    },
    {
      "type": "text",
      "title": "Additional Resources",
      "content": "For more information, see the <a href=\"https://ftc-docs.firstinspires.org/en/latest/apriltag/vision_portal/apriltag_intro/apriltag-intro.html\" target=\"_blank\">FTC AprilTag Documentation</a>."
    }
  ]
}
