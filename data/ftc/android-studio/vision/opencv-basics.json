{
  "title": "OpenCV Basics",
  "sections": [
    {
      "type": "text",
      "title": "What is OpenCV?",
      "content": "OpenCV (Open Source Computer Vision Library) is a powerful open-source computer vision and machine learning software library. In FTC robotics, OpenCV provides the foundation for advanced computer vision capabilities, allowing you to perform complex image processing operations that go beyond the built-in Vision Portal processors.<br><br>OpenCV is particularly valuable for teams that need custom vision processing or want to implement sophisticated computer vision algorithms. While it requires more programming knowledge than Vision Portal, it offers unparalleled flexibility and power."
    },
    {
      "type": "rules-box",
      "title": "OpenCV Advantages in FTC",
      "items": [
        "Complete control over image processing pipeline",
        "Access to hundreds of computer vision algorithms",
        "Custom filtering and image enhancement capabilities",
        "Advanced feature detection and analysis",
        "Real-time image processing optimization",
        "Integration with machine learning frameworks"
      ]
    },
    {
      "type": "text",
      "title": "Setting Up OpenCV in FTC",
      "content": "OpenCV is integrated into the FTC SDK through the Vision Portal API. To use OpenCV in your FTC project:<br><br><strong>1. Dependencies:</strong> OpenCV is included in the FTC SDK, so no additional setup is required<br><strong>2. Import Statements:</strong> Add the necessary OpenCV imports to your OpMode<br><strong>3. Pipeline Extension:</strong> Extend the OpenCvPipeline class to create custom vision processing<br><strong>4. Integration:</strong> Use Vision Portal to run your custom OpenCV pipeline"
    },
    {
      "type": "text",
      "title": "OpenCV Pipeline Class Structure",
      "content": "Let's start by setting up a basic OpenCV pipeline. For more on OpenCV in FTC, see <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/vision/opencv.html\" target=\"_blank\">FTC OpenCV Documentation</a>."
    },
    {
      "type": "code",
      "title": "Import Statements and Class Definition",
      "content": "Import the necessary OpenCV classes and define the pipeline class that extends OpenCvPipeline.",
      "code": "import org.opencv.core.*;\nimport org.opencv.imgproc.Imgproc;\nimport org.firstinspires.ftc.vision.VisionPortal;\nimport org.firstinspires.ftc.vision.OpenCvPipeline;\n\npublic class BasicOpenCvPipeline extends OpenCvPipeline {\n    // ..."
    },
    {
      "type": "text",
      "title": "processFrame Method Setup",
      "content": "The processFrame method is called for each camera frame. We start by creating a copy of the input image and converting it to HSV color space. For more on color spaces, see <a href=\"https://docs.opencv.org/4.x/df/d9d/tutorial_py_colorspaces.html\" target=\"_blank\">OpenCV Color Spaces</a>."
    },
    {
      "type": "code",
      "title": "processFrame Method Implementation",
      "content": "This method processes each frame by converting to HSV, applying blur, and calling custom processing logic.",
      "code": "    @Override\n    public Mat processFrame(Mat input) {\n        // Create a copy of the input image\n        Mat output = input.clone();\n        \n        // Convert to HSV color space for better color detection\n        Mat hsv = new Mat();\n        Imgproc.cvtColor(input, hsv, Imgproc.COLOR_RGB2HSV);\n        \n        // Apply Gaussian blur to reduce noise\n        Mat blurred = new Mat();\n        Imgproc.GaussianBlur(hsv, blurred, new Size(5, 5), 0);\n        \n        // Your custom processing logic here\n        processImage(blurred, output);\n        \n        // Clean up temporary matrices\n        hsv.release();\n        blurred.release();\n        \n        return output;\n    }"
    },
    {
      "type": "text",
      "title": "Custom Processing Method",
      "content": "The processImage method is where you'll implement your custom vision algorithms. For more on image processing, see <a href=\"https://docs.opencv.org/4.x/d6/d00/tutorial_py_root.html\" target=\"_blank\">OpenCV Tutorials</a>."
    },
    {
      "type": "code",
      "title": "processImage Method",
      "content": "This method contains your custom image processing logic.",
      "code": "    private void processImage(Mat input, Mat output) {\n        // Add your custom image processing here\n        // This is where you'll implement your vision algorithms\n    }\n}"
    },
    {
      "type": "text",
      "title": "Image Processing Pipeline Setup",
      "content": "Let's create a pipeline that demonstrates various image processing operations. For more on image processing, see <a href=\"https://docs.opencv.org/4.x/d6/d00/tutorial_py_root.html\" target=\"_blank\">OpenCV Tutorials</a>."
    },
    {
      "type": "code",
      "title": "Class Definition and processFrame Setup",
      "content": "Define the pipeline class and set up the processFrame method with output image creation.",
      "code": "public class ImageProcessingPipeline extends OpenCvPipeline {\n    \n    @Override\n    public Mat processFrame(Mat input) {\n        Mat output = input.clone();\n        // ..."
    },
    {
      "type": "text",
      "title": "Color Space Conversion",
      "content": "Convert the input image to different color spaces (HSV and grayscale) for different types of processing. For more on color space conversion, see <a href=\"https://docs.opencv.org/4.x/df/d9d/tutorial_py_colorspaces.html\" target=\"_blank\">OpenCV Color Spaces</a>."
    },
    {
      "type": "code",
      "title": "Color Space Conversion Code",
      "content": "Convert the input image to HSV and grayscale color spaces.",
      "code": "        // Convert to different color spaces\n        Mat hsv = new Mat();\n        Mat gray = new Mat();\n        \n        Imgproc.cvtColor(input, hsv, Imgproc.COLOR_RGB2HSV);\n        Imgproc.cvtColor(input, gray, Imgproc.COLOR_RGB2GRAY);"
    },
    {
      "type": "text",
      "title": "Gaussian Blur Filtering",
      "content": "Apply Gaussian blur to reduce noise in the grayscale image. For more on filtering, see <a href=\"https://docs.opencv.org/4.x/d4/d13/tutorial_py_filtering.html\" target=\"_blank\">OpenCV Filtering</a>."
    },
    {
      "type": "code",
      "title": "Gaussian Blur Application",
      "content": "Apply Gaussian blur with a 5x5 kernel to smooth the image.",
      "code": "        // Apply Gaussian blur for noise reduction\n        Mat blurred = new Mat();\n        Imgproc.GaussianBlur(gray, blurred, new Size(5, 5), 0);"
    },
    {
      "type": "text",
      "title": "Median Filtering",
      "content": "Apply median filtering for additional noise reduction, which is particularly effective for salt-and-pepper noise."
    },
    {
      "type": "code",
      "title": "Median Filter Application",
      "content": "Apply median filter with kernel size 5 for additional noise reduction.",
      "code": "        // Apply median filter for additional noise reduction\n        Mat medianFiltered = new Mat();\n        Imgproc.medianBlur(blurred, medianFiltered, 5);"
    },
    {
      "type": "text",
      "title": "Bilateral Filtering",
      "content": "Apply bilateral filtering to preserve edges while smoothing the image. This is useful for maintaining important features while reducing noise."
    },
    {
      "type": "code",
      "title": "Bilateral Filter Application",
      "content": "Apply bilateral filter to preserve edges while smoothing.",
      "code": "        // Apply bilateral filter to preserve edges while smoothing\n        Mat bilateralFiltered = new Mat();\n        Imgproc.bilateralFilter(medianFiltered, bilateralFiltered, 9, 75, 75);"
    },
    {
      "type": "text",
      "title": "Output Conversion and Cleanup",
      "content": "Convert the processed image back to RGB for display and clean up all temporary matrices to prevent memory leaks."
    },
    {
      "type": "code",
      "title": "Output Processing and Cleanup",
      "content": "Convert back to RGB and clean up all temporary matrices.",
      "code": "        // Convert back to RGB for display\n        Imgproc.cvtColor(bilateralFiltered, output, Imgproc.COLOR_GRAY2RGB);\n        \n        // Clean up\n        hsv.release();\n        gray.release();\n        blurred.release();\n        medianFiltered.release();\n        bilateralFiltered.release();\n        \n        return output;\n    }\n}"
    },
    {
      "type": "text",
      "title": "Morphological Operations Pipeline",
      "content": "Let's create a pipeline that demonstrates morphological operations for shape-based image processing. For more on morphological operations, see <a href=\"https://docs.opencv.org/4.x/d9/d61/tutorial_py_morphological_ops.html\" target=\"_blank\">OpenCV Morphological Operations</a>."
    },
    {
      "type": "code",
      "title": "Class Definition and Initial Setup",
      "content": "Define the morphological pipeline class and set up the processFrame method.",
      "code": "public class MorphologicalPipeline extends OpenCvPipeline {\n    \n    @Override\n    public Mat processFrame(Mat input) {\n        Mat output = input.clone();\n        // ..."
    },
    {
      "type": "text",
      "title": "Grayscale Conversion and Thresholding",
      "content": "Convert the image to grayscale and create a binary image using thresholding. For more on thresholding, see <a href=\"https://docs.opencv.org/4.x/d7/d4d/tutorial_py_thresholding.html\" target=\"_blank\">OpenCV Thresholding</a>."
    },
    {
      "type": "code",
      "title": "Grayscale and Binary Image Creation",
      "content": "Convert to grayscale and create a binary image with threshold 127.",
      "code": "        // Convert to grayscale\n        Mat gray = new Mat();\n        Imgproc.cvtColor(input, gray, Imgproc.COLOR_RGB2GRAY);\n        \n        // Create binary image using thresholding\n        Mat binary = new Mat();\n        Imgproc.threshold(gray, binary, 127, 255, Imgproc.THRESH_BINARY);"
    },
    {
      "type": "text",
      "title": "Structuring Element Creation",
      "content": "Create a structuring element (kernel) for morphological operations. The kernel determines the shape and size of the operation."
    },
    {
      "type": "code",
      "title": "Structuring Element Setup",
      "content": "Create a 3x3 rectangular structuring element for morphological operations.",
      "code": "        // Create structuring element for morphological operations\n        Mat kernel = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(3, 3));"
    },
    {
      "type": "text",
      "title": "Erosion Operation",
      "content": "Apply erosion to remove small objects and shrink the boundaries of objects. Erosion is useful for noise removal."
    },
    {
      "type": "code",
      "title": "Erosion Application",
      "content": "Apply erosion using the structuring element to remove small objects.",
      "code": "        // Apply erosion (removes small objects)\n        Mat eroded = new Mat();\n        Imgproc.erode(binary, eroded, kernel);"
    },
    {
      "type": "text",
      "title": "Dilation Operation",
      "content": "Apply dilation to expand objects and fill small holes. Dilation is useful for connecting broken parts of objects."
    },
    {
      "type": "code",
      "title": "Dilation Application",
      "content": "Apply dilation using the structuring element to expand objects.",
      "code": "        // Apply dilation (expands objects)\n        Mat dilated = new Mat();\n        Imgproc.dilate(binary, dilated, kernel);"
    },
    {
      "type": "text",
      "title": "Opening Operation",
      "content": "Apply opening (erosion followed by dilation) to remove noise and small objects while preserving the shape of larger objects."
    },
    {
      "type": "code",
      "title": "Opening Application",
      "content": "Apply opening operation to remove noise while preserving object shapes.",
      "code": "        // Apply opening (erosion followed by dilation) - removes noise\n        Mat opened = new Mat();\n        Imgproc.morphologyEx(binary, opened, Imgproc.MORPH_OPEN, kernel);"
    },
    {
      "type": "text",
      "title": "Closing Operation",
      "content": "Apply closing (dilation followed by erosion) to fill small holes and connect nearby objects."
    },
    {
      "type": "code",
      "title": "Closing Application",
      "content": "Apply closing operation to fill small holes in objects.",
      "code": "        // Apply closing (dilation followed by erosion) - fills small holes\n        Mat closed = new Mat();\n        Imgproc.morphologyEx(binary, closed, Imgproc.MORPH_CLOSE, kernel);"
    },
    {
      "type": "text",
      "title": "Output Processing and Cleanup",
      "content": "Convert the processed image back to RGB for display and clean up all temporary matrices."
    },
    {
      "type": "code",
      "title": "Final Output and Cleanup",
      "content": "Convert the closed image to RGB and clean up all temporary matrices.",
      "code": "        // Use the closed image as output\n        Imgproc.cvtColor(closed, output, Imgproc.COLOR_GRAY2RGB);\n        \n        // Clean up\n        gray.release();\n        binary.release();\n        kernel.release();\n        eroded.release();\n        dilated.release();\n        opened.release();\n        closed.release();\n        \n        return output;\n    }\n}"
    },
    {
      "type": "text",
      "title": "Contour Detection and Analysis",
      "content": "Contour detection is one of the most important operations in computer vision, allowing you to find and analyze shapes and objects in images. Contours are the boundaries of objects and can be used for object detection, shape analysis, and measurement.<br><br><strong>Contour Finding:</strong> Detecting the boundaries of objects in binary images<br><strong>Contour Filtering:</strong> Filtering contours based on area, perimeter, or other properties<br><strong>Contour Analysis:</strong> Analyzing contour properties like area, perimeter, bounding rectangle<br><strong>Shape Detection:</strong> Identifying shapes based on contour properties<br><strong>Object Tracking:</strong> Tracking objects across multiple frames using contours"
    },
    {
      "type": "text",
      "title": "Contour Detection Pipeline Setup",
      "content": "Let's create a pipeline that demonstrates contour detection and analysis. For more on contour detection, see <a href=\"https://docs.opencv.org/4.x/d4/d73/tutorial_py_contours_begin.html\" target=\"_blank\">OpenCV Contour Detection</a>."
    },
    {
      "type": "code",
      "title": "Import Statements and Class Definition",
      "content": "Import necessary classes and define the contour detection pipeline class.",
      "code": "import java.util.List;\nimport java.util.ArrayList;\n\npublic class ContourDetectionPipeline extends OpenCvPipeline {\n    \n    @Override\n    public Mat processFrame(Mat input) {\n        Mat output = input.clone();\n        // ..."
    },
    {
      "type": "text",
      "title": "HSV Conversion and Color Masking",
      "content": "Convert the image to HSV color space and create a binary mask for red objects. For more on color detection, see <a href=\"https://docs.opencv.org/4.x/df/d9d/tutorial_py_colorspaces.html\" target=\"_blank\">OpenCV Color Spaces</a>."
    },
    {
      "type": "code",
      "title": "HSV Conversion and Red Mask Creation",
      "content": "Convert to HSV and create a binary mask for red color detection.",
      "code": "        // Convert to HSV and create binary mask for red objects\n        Mat hsv = new Mat();\n        Imgproc.cvtColor(input, hsv, Imgproc.COLOR_RGB2HSV);\n        \n        // Define red color range in HSV\n        Scalar lowerRed = new Scalar(0, 100, 100);\n        Scalar upperRed = new Scalar(10, 255, 255);\n        \n        Mat redMask = new Mat();\n        Core.inRange(hsv, lowerRed, upperRed, redMask);"
    },
    {
      "type": "text",
      "title": "Contour Finding",
      "content": "Find contours in the binary mask. Contours are the boundaries of objects in the image. For more on contour finding, see <a href=\"https://docs.opencv.org/4.x/d4/d73/tutorial_py_contours_begin.html\" target=\"_blank\">OpenCV Contour Detection</a>."
    },
    {
      "type": "code",
      "title": "Contour Detection Code",
      "content": "Find contours in the red mask using external retrieval mode.",
      "code": "        // Find contours in the binary mask\n        List<MatOfPoint> contours = new ArrayList<>();\n        Mat hierarchy = new Mat();\n        Imgproc.findContours(redMask, contours, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);"
    },
    {
      "type": "text",
      "title": "Contour Filtering and Analysis",
      "content": "Filter contours based on area and analyze their properties. This step removes small noise and focuses on significant objects."
    },
    {
      "type": "code",
      "title": "Contour Filtering Loop",
      "content": "Loop through contours and filter by minimum area.",
      "code": "        // Filter and analyze contours\n        for (MatOfPoint contour : contours) {\n            // Calculate contour area\n            double area = Imgproc.contourArea(contour);\n            \n            // Filter by minimum area\n            if (area > 500) {\n                // ..."
    },
    {
      "type": "text",
      "title": "Contour Visualization",
      "content": "Draw the detected contours on the output image for visualization."
    },
    {
      "type": "code",
      "title": "Drawing Contours",
      "content": "Draw the contour outline in green color.",
      "code": "                // Draw contour on output image\n                Imgproc.drawContours(output, contours, contours.indexOf(contour), new Scalar(0, 255, 0), 2);"
    },
    {
      "type": "text",
      "title": "Bounding Rectangle Calculation",
      "content": "Calculate and draw the bounding rectangle around the contour. This provides information about the object's position and size."
    },
    {
      "type": "code",
      "title": "Bounding Rectangle Code",
      "content": "Calculate and draw the bounding rectangle in blue color.",
      "code": "                // Calculate bounding rectangle\n                Rect boundingRect = Imgproc.boundingRect(contour);\n                Imgproc.rectangle(output, boundingRect, new Scalar(255, 0, 0), 2);"
    },
    {
      "type": "text",
      "title": "Center Point Calculation",
      "content": "Calculate the center point of the contour using moments. The center point is useful for positioning and tracking."
    },
    {
      "type": "code",
      "title": "Center Point Calculation Code",
      "content": "Calculate the center point using moments and draw it in red.",
      "code": "                // Calculate center point\n                Moments moments = Imgproc.moments(contour);\n                if (moments.m00 != 0) {\n                    int centerX = (int) (moments.m10 / moments.m00);\n                    int centerY = (int) (moments.m01 / moments.m00);\n                    \n                    // Draw center point\n                    Imgproc.circle(output, new Point(centerX, centerY), 5, new Scalar(0, 0, 255), -1);"
    },
    {
      "type": "text",
      "title": "Text Annotation",
      "content": "Add text annotation showing the area of the detected object for debugging and analysis purposes."
    },
    {
      "type": "code",
      "title": "Text Annotation Code",
      "content": "Add text showing the contour area next to the center point.",
      "code": "                    // Add text with area information\n                    Imgproc.putText(output, String.format(\"Area: %.0f\", area), \n                        new Point(centerX + 10, centerY), \n                        Imgproc.FONT_HERSHEY_SIMPLEX, 0.5, new Scalar(255, 255, 255), 1);\n                }\n            }\n        }"
    },
    {
      "type": "text",
      "title": "Cleanup and Output",
      "content": "Clean up temporary matrices and return the processed image with contour annotations."
    },
    {
      "type": "code",
      "title": "Cleanup and Return",
      "content": "Release temporary matrices and return the output image.",
      "code": "        // Clean up\n        hsv.release();\n        redMask.release();\n        hierarchy.release();\n        \n        return output;\n    }\n}"
    },
    {
      "type": "text",
      "title": "Color Detection and Thresholding",
      "content": "Color detection is fundamental for many FTC applications, allowing robots to identify game elements, team markers, and other colored objects. OpenCV provides powerful tools for color-based object detection.<br><br><strong>Color Spaces:</strong> Understanding RGB, HSV, and other color representations<br><strong>Color Thresholding:</strong> Creating binary masks based on color ranges<br><strong>Multi-Color Detection:</strong> Detecting multiple colors simultaneously<br><strong>Color Calibration:</strong> Adjusting color ranges for different lighting conditions<br><strong>Color Tracking:</strong> Tracking colored objects across frames"
    },
    {
      "type": "text",
      "title": "Advanced Color Detection Pipeline",
      "content": "Let's create a pipeline that demonstrates advanced color detection with multiple colors and adaptive processing. For more on color detection, see <a href=\"https://docs.opencv.org/4.x/df/d9d/tutorial_py_colorspaces.html\" target=\"_blank\">OpenCV Color Spaces</a>."
    },
    {
      "type": "code",
      "title": "Class Definition and Color Ranges",
      "content": "Define the advanced color detection pipeline class and set up color ranges for different objects.",
      "code": "public class AdvancedColorDetectionPipeline extends OpenCvPipeline {\n    \n    // Color ranges for different objects\n    private Scalar lowerRed1 = new Scalar(0, 100, 100);\n    private Scalar upperRed1 = new Scalar(10, 255, 255);\n    private Scalar lowerRed2 = new Scalar(160, 100, 100);\n    private Scalar upperRed2 = new Scalar(180, 255, 255);\n    \n    private Scalar lowerBlue = new Scalar(100, 100, 100);\n    private Scalar upperBlue = new Scalar(130, 255, 255);\n    \n    private Scalar lowerGreen = new Scalar(40, 100, 100);\n    private Scalar upperGreen = new Scalar(80, 255, 255);\n    // ..."
    },
    {
      "type": "text",
      "title": "processFrame Method Setup",
      "content": "Set up the processFrame method with HSV conversion and mask creation for multiple colors."
    },
    {
      "type": "code",
      "title": "processFrame Method Implementation",
      "content": "Convert to HSV and create masks for different colors.",
      "code": "    @Override\n    public Mat processFrame(Mat input) {\n        Mat output = input.clone();\n        Mat hsv = new Mat();\n        Imgproc.cvtColor(input, hsv, Imgproc.COLOR_RGB2HSV);\n        \n        // Create masks for different colors\n        Mat redMask1 = new Mat();\n        Mat redMask2 = new Mat();\n        Mat blueMask = new Mat();\n        Mat greenMask = new Mat();\n        \n        Core.inRange(hsv, lowerRed1, upperRed1, redMask1);\n        Core.inRange(hsv, lowerRed2, upperRed2, redMask2);\n        Core.inRange(hsv, lowerBlue, upperBlue, blueMask);\n        Core.inRange(hsv, lowerGreen, upperGreen, greenMask);"
    },
    {
      "type": "text",
      "title": "Red Mask Combination",
      "content": "Combine the two red masks since red wraps around in the HSV color space (red appears at both low and high hue values)."
    },
    {
      "type": "code",
      "title": "Red Mask Combination Code",
      "content": "Combine the two red masks to handle red's wraparound in HSV space.",
      "code": "        // Combine red masks (red wraps around in HSV)\n        Mat redMask = new Mat();\n        Core.add(redMask1, redMask2, redMask);"
    },
    {
      "type": "text",
      "title": "Color Mask Processing",
      "content": "Process each color mask to detect and visualize objects of different colors. For more on contour processing, see <a href=\"https://docs.opencv.org/4.x/d4/d73/tutorial_py_contours_begin.html\" target=\"_blank\">OpenCV Contour Detection</a>."
    },
    {
      "type": "code",
      "title": "Processing Each Color Mask",
      "content": "Process each color mask and visualize the results.",
      "code": "        // Process each color mask\n        processColorMask(redMask, output, new Scalar(255, 0, 0), \"Red\");\n        processColorMask(blueMask, output, new Scalar(0, 0, 255), \"Blue\");\n        processColorMask(greenMask, output, new Scalar(0, 255, 0), \"Green\");"
    },
    {
      "type": "text",
      "title": "Cleanup and Output",
      "content": "Clean up all temporary matrices and return the processed image with color detection results."
    },
    {
      "type": "code",
      "title": "Cleanup and Return",
      "content": "Release all temporary matrices and return the output image.",
      "code": "        // Clean up\n        hsv.release();\n        redMask1.release();\n        redMask2.release();\n        redMask.release();\n        blueMask.release();\n        greenMask.release();\n        \n        return output;\n    }"
    },
    {
      "type": "text",
      "title": "Color Mask Processing Method",
      "content": "The processColorMask method handles contour detection and visualization for each color. This method is called for each color mask to find and display detected objects."
    },
    {
      "type": "code",
      "title": "processColorMask Method Definition",
      "content": "Define the processColorMask method that processes a single color mask.",
      "code": "    private void processColorMask(Mat mask, Mat output, Scalar color, String label) {\n        List<MatOfPoint> contours = new ArrayList<>();\n        Mat hierarchy = new Mat();\n        Imgproc.findContours(mask, contours, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);\n        \n        for (MatOfPoint contour : contours) {\n            double area = Imgproc.contourArea(contour);\n            if (area > 300) {\n                // ..."
    },
    {
      "type": "text",
      "title": "Contour Visualization",
      "content": "Draw the detected contours and add visual annotations for each detected object."
    },
    {
      "type": "code",
      "title": "Contour Drawing and Annotation",
      "content": "Draw contours and add center points with labels for each detected object.",
      "code": "                // Draw contour\n                Imgproc.drawContours(output, contours, contours.indexOf(contour), color, 2);\n                \n                // Calculate and draw center\n                Moments moments = Imgproc.moments(contour);\n                if (moments.m00 != 0) {\n                    int centerX = (int) (moments.m10 / moments.m00);\n                    int centerY = (int) (moments.m01 / moments.m00);\n                    \n                    Imgproc.circle(output, new Point(centerX, centerY), 5, color, -1);\n                    Imgproc.putText(output, label, new Point(centerX + 10, centerY), \n                        Imgproc.FONT_HERSHEY_SIMPLEX, 0.5, color, 1);\n                }\n            }\n        }\n        \n        hierarchy.release();\n    }\n}"
    },
    {
      "type": "exercise-box",
      "title": "OpenCV Vision System Development",
      "description": "Create a custom OpenCV pipeline for FTC game element detection",
      "tasks": [
        "Set up a basic OpenCV pipeline with color space conversion",
        "Implement contour detection for game elements",
        "Add filtering to remove noise and small objects",
        "Create a system to detect multiple colors simultaneously",
        "Add shape analysis to distinguish different game elements",
        "Optimize the pipeline for real-time performance"
      ],
      "content": "Develop a complete OpenCV pipeline that can detect and classify different colored game elements. The pipeline should be robust to lighting variations and provide accurate position and size information for each detected object."
    },
    {
      "type": "link-grid",
      "title": "Additional Resources",
      "links": [
        "<a href=\"https://opencv.org/\" target=\"_blank\">OpenCV Official Documentation</a>",
        "<a href=\"https://docs.opencv.org/4.x/d6/d00/tutorial_py_root.html\" target=\"_blank\">OpenCV Tutorials</a>"
      ]
    }
  ]
}
