{
  "title": "Telemetry and Plotting",
  "sections": [
    {
      "type": "text",
      "title": "Enhanced Telemetry with FTCDashboard",
      "content": "FTCDashboard transforms basic telemetry into a powerful visualization tool. While traditional telemetry only displays text data, FTCDashboard provides real-time plotting capabilities that make it much easier to understand robot behavior, tune PID controllers, and debug autonomous programs."
    },
    {
      "type": "rules-box",
      "title": "Benefits of Dashboard Telemetry",
      "items": [
        "Real-time data visualization with live graphs",
        "Historical data tracking over time",
        "Multiple data series on the same plot",
        "Customizable plot appearance and behavior",
        "Automatic data scaling and formatting",
        "Export capabilities for data analysis"
      ]
    },
    {
      "type": "text",
      "title": "Basic Telemetry vs Dashboard Plotting",
      "content": "Traditional telemetry shows static text values that update each loop cycle. FTCDashboard plotting creates dynamic graphs that show how values change over time, making it much easier to identify trends, oscillations, and performance issues."
    },
    {
      "type": "code",
      "title": "Basic Dashboard Telemetry Setup (Step 1: Imports and Class Setup)",
      "content": "Start by importing the required classes and setting up your OpMode class:",
      "code": "import com.acmerobotics.dashboard.FtcDashboard;\nimport com.acmerobotics.dashboard.telemetry.MultipleTelemetry;\nimport com.acmerobotics.dashboard.telemetry.TelemetryPacket;\n\npublic class BasicTelemetryOpMode extends OpMode {\n    private FtcDashboard dashboard;\n    private MultipleTelemetry telemetry;\n    private TelemetryPacket packet;\n    // ..."
    },
    {
      "type": "text",
      "title": "Step 2: Initialization",
      "content": "In your init() method, initialize the dashboard, MultipleTelemetry, and TelemetryPacket."
    },
    {
      "type": "code",
      "title": "init() Method",
      "content": "Add this to your class:",
      "code": "    @Override\n    public void init() {\n        dashboard = FtcDashboard.getInstance();\n        telemetry = new MultipleTelemetry(this.telemetry, dashboard.getTelemetry());\n        packet = new TelemetryPacket();\n    }"
    },
    {
      "type": "text",
      "title": "Step 3: Sending Telemetry and Plot Data",
      "content": "In your loop() method, send both standard telemetry and dashboard-specific telemetry for plotting."
    },
    {
      "type": "code",
      "title": "loop() Method",
      "content": "Add this to your class:",
      "code": "    @Override\n    public void loop() {\n        // Basic telemetry (shows in both Driver Station and Dashboard)\n        telemetry.addData(\"Loop Time\", \"%.2f seconds\", getRuntime());\n        telemetry.addData(\"Battery Voltage\", \"%.2f V\", getBatteryVoltage());\n        \n        // Dashboard-specific telemetry (only shows in Dashboard)\n        packet.put(\"Loop Time\", getRuntime());\n        packet.put(\"Battery Voltage\", getBatteryVoltage());\n        \n        telemetry.update();\n        dashboard.sendTelemetryPacket(packet);\n    }\n    \n    private double getBatteryVoltage() {\n        return hardwareMap.voltageSensor.get(\"Expansion Hub 2\").getVoltage();\n    }"
    },
    {
      "type": "text",
      "title": "Real-time Data Plotting",
      "content": "The most powerful feature of FTCDashboard is its ability to create real-time plots of your robot's data. This is especially useful for tuning PID controllers, analyzing motor performance, and debugging sensor readings."
    },
    {
      "type": "code",
      "title": "Creating Real-time Plots",
      "content": "To create plots, use the TelemetryPacket's put() method with a key that ends with a specific suffix. The dashboard automatically recognizes these suffixes and creates appropriate visualizations:",
      "code": "public class PlottingOpMode extends OpMode {\n    private FtcDashboard dashboard;\n    private TelemetryPacket packet;\n    private DcMotor leftMotor, rightMotor;\n    private double time = 0;\n    \n    @Override\n    public void init() {\n        dashboard = FtcDashboard.getInstance();\n        packet = new TelemetryPacket();\n        \n        leftMotor = hardwareMap.get(DcMotor.class, \"left_motor\");\n        rightMotor = hardwareMap.get(DcMotor.class, \"right_motor\");\n    }\n    \n    @Override\n    public void loop() {\n        time = getRuntime();\n        \n        // Create a plot of motor power over time\n        packet.put(\"Left Motor Power\", leftMotor.getPower());\n        packet.put(\"Right Motor Power\", rightMotor.getPower());\n        \n        // Create a plot of motor encoder positions\n        packet.put(\"Left Encoder Position\", leftMotor.getCurrentPosition());\n        packet.put(\"Right Encoder Position\", rightMotor.getCurrentPosition());\n        \n        // Create a plot of time vs motor power (scatter plot)\n        packet.put(\"Time vs Left Power\", time, leftMotor.getPower());\n        packet.put(\"Time vs Right Power\", time, rightMotor.getPower());\n        \n        dashboard.sendTelemetryPacket(packet);\n        \n        // Update every 50ms for smooth plotting\n        sleep(50);\n    }\n}"
    },
    {
      "type": "rules-box",
      "title": "Plot Types and Suffixes",
      "items": [
        "Line plots: Use any key name (e.g., \"Motor Power\")",
        "Scatter plots: Use \"X vs Y\" format (e.g., \"Time vs Position\")",
        "Bar charts: Use \"Bar:\" prefix (e.g., \"Bar:Motor Power\")",
        "Histograms: Use \"Histogram:\" prefix (e.g., \"Histogram:Sensor Values\")",
        "Multiple series: Use different keys for the same plot type"
      ]
    },
    {
      "type": "text",
      "title": "Multiple Data Series",
      "content": "One of the most powerful features is the ability to plot multiple related values on the same graph. This is perfect for comparing left and right motor performance, setpoint vs actual values, or multiple sensor readings."
    },
    {
      "type": "code",
      "title": "Multiple Series Plotting Example",
      "content": "This example shows how to plot multiple related values on the same graph for easy comparison:",
      "code": "public class MultipleSeriesOpMode extends OpMode {\n    private FtcDashboard dashboard;\n    private TelemetryPacket packet;\n    private DcMotor leftMotor, rightMotor;\n    private ColorSensor colorSensor;\n    private double targetPower = 0.5;\n    \n    @Override\n    public void init() {\n        dashboard = FtcDashboard.getInstance();\n        packet = new TelemetryPacket();\n        \n        leftMotor = hardwareMap.get(DcMotor.class, \"left_motor\");\n        rightMotor = hardwareMap.get(DcMotor.class, \"right_motor\");\n        colorSensor = hardwareMap.get(ColorSensor.class, \"color_sensor\");\n    }\n    \n    @Override\n    public void loop() {\n        // Set motor powers\n        leftMotor.setPower(targetPower);\n        rightMotor.setPower(targetPower);\n        \n        // Plot motor powers on the same graph\n        packet.put(\"Left Motor Power\", leftMotor.getPower());\n        packet.put(\"Right Motor Power\", rightMotor.getPower());\n        packet.put(\"Target Power\", targetPower);\n        \n        // Plot encoder positions on the same graph\n        packet.put(\"Left Encoder\", leftMotor.getCurrentPosition());\n        packet.put(\"Right Encoder\", rightMotor.getCurrentPosition());\n        \n        // Plot color sensor values\n        packet.put(\"Red Value\", colorSensor.red());\n        packet.put(\"Green Value\", colorSensor.green());\n        packet.put(\"Blue Value\", colorSensor.blue());\n        \n        // Create a scatter plot of power vs encoder position\n        packet.put(\"Power vs Left Encoder\", leftMotor.getPower(), leftMotor.getCurrentPosition());\n        packet.put(\"Power vs Right Encoder\", rightMotor.getPower(), rightMotor.getCurrentPosition());\n        \n        dashboard.sendTelemetryPacket(packet);\n        sleep(100);\n    }\n}"
    },
    {
      "type": "text",
      "title": "Custom Plot Configuration",
      "content": "FTCDashboard allows you to customize the appearance and behavior of your plots. You can set colors, ranges, update frequencies, and other display options to make your data more readable and useful."
    },
    {
      "type": "code",
      "title": "Custom Plot Configuration Example",
      "content": "This example shows how to configure plot appearance and behavior:",
      "code": "public class CustomPlotOpMode extends OpMode {\n    private FtcDashboard dashboard;\n    private TelemetryPacket packet;\n    private DcMotor motor;\n    private double time = 0;\n    \n    @Override\n    public void init() {\n        dashboard = FtcDashboard.getInstance();\n        packet = new TelemetryPacket();\n        motor = hardwareMap.get(DcMotor.class, \"motor\");\n    }\n    \n    @Override\n    public void loop() {\n        time = getRuntime();\n        \n        // Configure plot properties using special keys\n        packet.put(\"Motor Power\", motor.getPower());\n        packet.put(\"Motor Power:color\", \"red\");\n        packet.put(\"Motor Power:min\", -1.0);\n        packet.put(\"Motor Power:max\", 1.0);\n        \n        // Configure encoder plot with different settings\n        packet.put(\"Encoder Position\", motor.getCurrentPosition());\n        packet.put(\"Encoder Position:color\", \"blue\");\n        packet.put(\"Encoder Position:min\", 0);\n        packet.put(\"Encoder Position:max\", 1000);\n        \n        // Create a scatter plot with custom configuration\n        packet.put(\"Time vs Power\", time, motor.getPower());\n        packet.put(\"Time vs Power:color\", \"green\");\n        packet.put(\"Time vs Power:pointSize\", 3);\n        \n        // Set update frequency for smoother plots\n        packet.put(\"updateFrequency\", 20); // 20 Hz update rate\n        \n        dashboard.sendTelemetryPacket(packet);\n        sleep(50);\n    }\n}"
    },
    {
      "type": "rules-box",
      "title": "Plot Configuration Options",
      "items": [
        "Color: Use \":color\" suffix (e.g., \"red\", \"blue\", \"green\", \"yellow\")",
        "Range: Use \":min\" and \":max\" suffixes to set axis limits",
        "Point size: Use \":pointSize\" for scatter plots",
        "Update frequency: Use \"updateFrequency\" key to control refresh rate",
        "Line style: Use \":lineStyle\" for different line patterns",
        "Legend: Use \":legend\" to customize plot labels"
      ]
    },
    {
      "type": "text",
      "title": "Advanced Plotting Techniques",
      "content": "For more advanced applications, you can create complex visualizations, combine multiple data sources, and use plotting for real-time analysis and debugging."
    },
    {
      "type": "code",
      "title": "Advanced Plotting Example",
      "content": "This example demonstrates advanced plotting techniques including PID tuning visualization:",
      "code": "public class AdvancedPlottingOpMode extends OpMode {\n    private FtcDashboard dashboard;\n    private TelemetryPacket packet;\n    private DcMotor motor;\n    private double setpoint = 500;\n    private double kp = 0.01, ki = 0.0, kd = 0.0;\n    private double integral = 0, lastError = 0;\n    private double time = 0;\n    \n    @Override\n    public void init() {\n        dashboard = FtcDashboard.getInstance();\n        packet = new TelemetryPacket();\n        motor = hardwareMap.get(DcMotor.class, \"motor\");\n        motor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\n        motor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\n    }\n    \n    @Override\n    public void loop() {\n        time = getRuntime();\n        \n        // PID control calculation\n        double currentPosition = motor.getCurrentPosition();\n        double error = setpoint - currentPosition;\n        integral += error * 0.02; // 50Hz loop\n        double derivative = (error - lastError) / 0.02;\n        \n        double output = kp * error + ki * integral + kd * derivative;\n        motor.setPower(output);\n        \n        // Plot PID components for tuning\n        packet.put(\"Setpoint\", setpoint);\n        packet.put(\"Current Position\", currentPosition);\n        packet.put(\"Error\", error);\n        packet.put(\"Integral\", integral);\n        packet.put(\"Derivative\", derivative);\n        packet.put(\"Output\", output);\n        \n        // Color code the plots for easy identification\n        packet.put(\"Setpoint:color\", \"red\");\n        packet.put(\"Current Position:color\", \"blue\");\n        packet.put(\"Error:color\", \"orange\");\n        packet.put(\"Output:color\", \"green\");\n        \n        // Create a scatter plot of error vs time for analysis\n        packet.put(\"Time vs Error\", time, error);\n        packet.put(\"Time vs Error:color\", \"purple\");\n        \n        lastError = error;\n        dashboard.sendTelemetryPacket(packet);\n        sleep(20);\n    }\n}"
    },
    {
      "type": "exercise-box",
      "title": "Practice Exercise: Motor Performance Analysis",
      "description": "Create an OpMode that plots motor performance data to analyze efficiency and behavior.",
      "tasks": [
        "Set up FTCDashboard with MultipleTelemetry",
        "Create plots for motor power, encoder position, and current draw",
        "Add a scatter plot showing power vs position relationship",
        "Configure different colors for each data series",
        "Test with different motor commands and analyze the results"
      ],
      "content": "// Your OpMode should include:\n// 1. Motor initialization and control\n// 2. Real-time plotting of multiple values\n// 3. Custom plot configuration\n// 4. Data analysis and interpretation"
    },
    {
      "type": "rules-box",
      "title": "Best Practices for Plotting",
      "items": [
        "Use meaningful key names that describe the data being plotted",
        "Set appropriate update frequencies to balance smoothness and performance",
        "Use different colors for related data series",
        "Set axis ranges to focus on relevant data ranges",
        "Combine line plots and scatter plots for comprehensive analysis",
        "Export data for offline analysis when needed"
      ]
    },
    {
      "type": "rules-box",
      "title": "Troubleshooting Plotting Issues",
      "items": [
        "No plots appearing: Check that TelemetryPacket is being sent with dashboard.sendTelemetryPacket()",
        "Poor performance: Reduce update frequency or number of data points",
        "Incorrect data: Verify data sources and calculation logic",
        "Plot not updating: Ensure loop() method is running and not blocked",
        "Memory issues: Limit the number of simultaneous plots and data points"
      ]
    },
    {
      "type": "link-grid",
      "title": "Related Topics and Resources",
      "links": [
        "<a href=\"https://acmerobotics.github.io/ftc-dashboard/telemetry\" target=\"_blank\">FTCDashboard Telemetry Documentation</a>",
        "<a href=\"https://acmerobotics.github.io/ftc-dashboard/telemetry#plotting\" target=\"_blank\">FTCDashboard Plotting Guide</a>",
        "<a href=\"https://acmerobotics.github.io/ftc-dashboard/telemetry#multiple-series\" target=\"_blank\">Multiple Series Plotting</a>",
        "<a href=\"https://acmerobotics.github.io/ftc-dashboard/telemetry#configuration\" target=\"_blank\">Plot Configuration Options</a>",
        "<a href=\"../motors/motor-encoders.json\">Motor Encoders</a>",
        "<a href=\"../sensors/sensors.json\">Sensors Overview</a>",
        "<a href=\"../advanced-movement-control/pid-control.json\">PID Control</a>"
      ]
    }
  ]
} 