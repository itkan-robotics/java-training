{
  "title": "Android Studio Introduction",
  "sections": [
    {
      "type": "text",
      "title": "Introduction to Android Studio",
      "content": "Android Studio is the official Integrated Development Environment (IDE) for Android development and is the preferred environment for advanced FTC programming. It provides powerful debugging tools, code completion, and professional development features that aren't available in OnBot Java."
    },
    {
      "type": "rules-box",
      "title": "Why Android Studio?",
      "items": [
        "<strong>Advanced Debugging:</strong> Step-through debugging, breakpoints, and variable inspection",
        "<strong>Code Completion:</strong> Intelligent code suggestions and auto-completion",
        "<strong>Version Control:</strong> Built-in Git integration for team collaboration",
        "<strong>Refactoring Tools:</strong> Advanced code restructuring and optimization",
        "<strong>Performance Profiling:</strong> Analyze and optimize your robot's performance",
        "<strong>Professional Development:</strong> Industry-standard tools and workflows"
      ],
      "subtitle": "Android Studio offers significant advantages over OnBot Java:"
    },
    {
      "type": "text",
      "title": "System Requirements",
      "content": "Before installing Android Studio, ensure your computer meets these requirements:"
    },
    {
      "type": "list",
      "items": [
        "Windows 10/11, macOS 10.14+, or Linux (Ubuntu 18.04+)",
        "8 GB RAM minimum (16 GB recommended)",
        "8 GB disk space minimum (SSD recommended)",
        "Intel i5 processor or equivalent",
        "Java Development Kit (JDK) 11 or higher"
      ]
    },
    {
      "type": "text",
      "title": "Installation Process",
      "content": "Follow these steps to install Android Studio and set it up for FTC development:"
    },
    {
      "type": "list",
      "title": "Installation Steps",
      "items": [
        "Download Android Studio from <a href='https://developer.android.com/studio' target='_blank'>developer.android.com</a>",
        "Run the installer and follow the setup wizard",
        "Install the Android SDK (included in the setup)",
        "Install the FTC SDK and dependencies",
        "Configure your development environment",
        "Set up your robot configuration"
      ]
    },
    {
      "type": "text",
      "title": "FTC SDK Setup",
      "content": "After installing Android Studio, you need to set up the FTC SDK for robot programming."
    },
    {
      "type": "code",
      "title": "FTC SDK Installation",
      "content": "// 1. Clone the FTC SDK repository\n// Open terminal/command prompt and run:\n// git clone https://github.com/FIRST-Tech-Challenge/FTC_SDK.git\n\n// 2. Open the project in Android Studio\n// File -> Open -> Select the FTC_SDK folder\n\n// 3. Sync Gradle files\n// Android Studio will automatically sync, or click the 'Sync Now' button\n\n// 4. Build the project\n// Build -> Make Project (or Ctrl+F9)\n\n// 5. Your project structure should look like:\n// FTC_SDK/\n// ├── TeamCode/\n// │   └── src/main/java/org/firstinspires/ftc/teamcode/\n// │       ├── MyFirstOpMode.java\n// │       └── ... (your op modes)\n// ├── FtcRobotController/\n// ├── FtcCommon/\n// └── build.gradle"
    },
    {
      "type": "text",
      "title": "Creating Your First OpMode",
      "content": "In Android Studio, you'll create OpModes in the TeamCode module. Here's how to create your first OpMode:"
    },
    {
      "type": "code",
      "title": "Basic Android Studio OpMode",
      "content": "package org.firstinspires.ftc.teamcode;\n\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.DcMotor;\nimport com.qualcomm.robotcore.hardware.DcMotorSimple;\nimport com.qualcomm.robotcore.util.ElapsedTime;\n\n/**\n * This OpMode demonstrates the basic structure of an OpMode in Android Studio.\n * It includes proper documentation, error handling, and telemetry.\n */\n@TeleOp(name=\"Android Studio TeleOp\", group=\"Intermediate\")\npublic class AndroidStudioTeleOp extends LinearOpMode {\n    \n    // Hardware declarations\n    private DcMotor leftFront;\n    private DcMotor rightFront;\n    private DcMotor leftBack;\n    private DcMotor rightBack;\n    \n    // Timer for performance monitoring\n    private ElapsedTime runtime = new ElapsedTime();\n    \n    // Configuration constants\n    private static final double DRIVE_SPEED = 0.6;\n    private static final double TURN_SPEED = 0.5;\n    \n    @Override\n    public void runOpMode() {\n        // Initialize hardware\n        initializeHardware();\n        \n        // Display status and wait for start\n        telemetry.addData(\"Status\", \"Initialized\");\n        telemetry.addData(\"Runtime\", \"%.2f seconds\", runtime.seconds());\n        telemetry.update();\n        \n        // Wait for the game to start (driver presses PLAY)\n        waitForStart();\n        runtime.reset();\n        \n        // Main loop\n        while (opModeIsActive()) {\n            // Drive the robot\n            driveRobot();\n            \n            // Update telemetry\n            updateTelemetry();\n            \n            // Small delay to prevent overwhelming the system\n            sleep(10);\n        }\n    }\n    \n    /**\n     * Initialize all hardware components\n     */\n    private void initializeHardware() {\n        try {\n            // Initialize motors\n            leftFront = hardwareMap.get(DcMotor.class, \"leftFront\");\n            rightFront = hardwareMap.get(DcMotor.class, \"rightFront\");\n            leftBack = hardwareMap.get(DcMotor.class, \"leftBack\");\n            rightBack = hardwareMap.get(DcMotor.class, \"rightBack\");\n            \n            // Set motor directions\n            leftFront.setDirection(DcMotorSimple.Direction.FORWARD);\n            rightFront.setDirection(DcMotorSimple.Direction.REVERSE);\n            leftBack.setDirection(DcMotorSimple.Direction.FORWARD);\n            rightBack.setDirection(DcMotorSimple.Direction.REVERSE);\n            \n            // Set motor modes\n            leftFront.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\n            rightFront.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\n            leftBack.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\n            rightBack.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\n            \n            // Set zero power behavior\n            leftFront.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n            rightFront.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n            leftBack.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n            rightBack.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n            \n            telemetry.addData(\"Status\", \"Hardware initialized successfully\");\n            \n        } catch (Exception e) {\n            telemetry.addData(\"Error\", \"Failed to initialize hardware: %s\", e.getMessage());\n            telemetry.update();\n            // You might want to stop the OpMode here\n            // requestOpModeStop();\n        }\n    }\n    \n    /**\n     * Main drive logic\n     */\n    private void driveRobot() {\n        // Get gamepad inputs\n        double leftStickY = -gamepad1.left_stick_y;\n        double leftStickX = gamepad1.left_stick_x;\n        double rightStickX = gamepad1.right_stick_x;\n        \n        // Apply deadzone\n        leftStickY = applyDeadzone(leftStickY, 0.1);\n        leftStickX = applyDeadzone(leftStickX, 0.1);\n        rightStickX = applyDeadzone(rightStickX, 0.1);\n        \n        // Calculate motor powers\n        double leftFrontPower = leftStickY + leftStickX + rightStickX;\n        double rightFrontPower = leftStickY - leftStickX - rightStickX;\n        double leftBackPower = leftStickY - leftStickX + rightStickX;\n        double rightBackPower = leftStickY + leftStickX - rightStickX;\n        \n        // Normalize powers\n        double maxPower = Math.max(Math.max(Math.abs(leftFrontPower), Math.abs(rightFrontPower)),\n                                  Math.max(Math.abs(leftBackPower), Math.abs(rightBackPower)));\n        if (maxPower > 1.0) {\n            leftFrontPower /= maxPower;\n            rightFrontPower /= maxPower;\n            leftBackPower /= maxPower;\n            rightBackPower /= maxPower;\n        }\n        \n        // Apply speed scaling\n        leftFrontPower *= DRIVE_SPEED;\n        rightFrontPower *= DRIVE_SPEED;\n        leftBackPower *= DRIVE_SPEED;\n        rightBackPower *= DRIVE_SPEED;\n        \n        // Set motor powers\n        leftFront.setPower(leftFrontPower);\n        rightFront.setPower(rightFrontPower);\n        leftBack.setPower(leftBackPower);\n        rightBack.setPower(rightBackPower);\n    }\n    \n    /**\n     * Apply deadzone to prevent motor drift\n     */\n    private double applyDeadzone(double input, double deadzone) {\n        if (Math.abs(input) < deadzone) {\n            return 0.0;\n        }\n        return input;\n    }\n    \n    /**\n     * Update telemetry with robot status\n     */\n    private void updateTelemetry() {\n        telemetry.addData(\"Runtime\", \"%.2f seconds\", runtime.seconds());\n        telemetry.addData(\"Left Front Power\", \"%.2f\", leftFront.getPower());\n        telemetry.addData(\"Right Front Power\", \"%.2f\", rightFront.getPower());\n        telemetry.addData(\"Left Back Power\", \"%.2f\", leftBack.getPower());\n        telemetry.addData(\"Right Back Power\", \"%.2f\", rightBack.getPower());\n        telemetry.update();\n    }\n}"
    },
    {
      "type": "text",
      "title": "Android Studio Features",
      "content": "Android Studio provides many powerful features that enhance your development experience:"
    },
    {
      "type": "rules-box",
      "title": "Key Features",
      "items": [
        "<strong>Debugger:</strong> Set breakpoints, inspect variables, step through code",
        "<strong>Logcat:</strong> View detailed logs and error messages",
        "<strong>Code Inspection:</strong> Automatic code analysis and suggestions",
        "<strong>Refactoring:</strong> Rename variables, extract methods, reorganize code",
        "<strong>Git Integration:</strong> Built-in version control with visual diff tools",
        "<strong>Performance Profiler:</strong> Monitor CPU, memory, and network usage"
      ],
      "subtitle": "Essential Android Studio features for FTC development:"
    },
    {
      "type": "text",
      "title": "Debugging in Android Studio",
      "content": "Debugging is one of the most powerful features of Android Studio. Here's how to use it effectively:"
    },
    {
      "type": "code",
      "title": "Debugging Example",
      "content": "// Add this method to your OpMode for debugging\nprivate void debugExample() {\n    // Set a breakpoint on the next line by clicking in the left margin\n    int debugValue = 42;\n    \n    // You can also set conditional breakpoints\n    if (debugValue > 40) {\n        // This will only break if debugValue > 40\n        telemetry.addData(\"Debug\", \"Value is greater than 40\");\n    }\n    \n    // Use Log.d for debug messages (visible in Logcat)\n    Log.d(\"MyOpMode\", \"Debug value: \" + debugValue);\n    \n    // Use Log.e for error messages\n    try {\n        // Some operation that might fail\n        int result = 100 / 0;\n    } catch (Exception e) {\n        Log.e(\"MyOpMode\", \"Error occurred: \" + e.getMessage());\n        telemetry.addData(\"Error\", e.getMessage());\n    }\n}\n\n// Add this import at the top of your file\n// import android.util.Log;"
    },
    {
      "type": "text",
      "title": "Project Structure",
      "content": "Understanding the Android Studio project structure is important for organizing your code effectively."
    },
    {
      "type": "code",
      "title": "Recommended Project Structure",
      "content": "// Recommended folder structure in TeamCode:\n// org.firstinspires.ftc.teamcode/\n// ├── hardware/\n// │   ├── HardwareMap.java\n// │   ├── Drivetrain.java\n// │   └── Mechanisms.java\n// ├── autonomous/\n// │   ├── BasicAutonomous.java\n// │   ├── AdvancedAutonomous.java\n// │   └── PedroPathingAutonomous.java\n// ├── teleop/\n// │   ├── BasicTeleOp.java\n// │   └── AdvancedTeleOp.java\n// ├── utils/\n// │   ├── PIDController.java\n// │   ├── StateMachine.java\n// │   └── MathUtils.java\n// └── config/\n//     ├── RobotConfig.java\n//     └── Constants.java\n\n// Example: HardwareMap class\npackage org.firstinspires.ftc.teamcode.hardware;\n\nimport com.qualcomm.robotcore.hardware.HardwareMap;\nimport com.qualcomm.robotcore.hardware.DcMotor;\nimport com.qualcomm.robotcore.hardware.Servo;\n\npublic class HardwareMap {\n    // Hardware components\n    public DcMotor leftFront, rightFront, leftBack, rightBack;\n    public DcMotor liftMotor, intakeMotor;\n    public Servo clawServo, armServo;\n    \n    // Hardware map reference\n    private HardwareMap hardwareMap;\n    \n    public HardwareMap(HardwareMap hwMap) {\n        this.hardwareMap = hwMap;\n        initializeHardware();\n    }\n    \n    private void initializeHardware() {\n        // Initialize all hardware components\n        leftFront = hardwareMap.get(DcMotor.class, \"leftFront\");\n        rightFront = hardwareMap.get(DcMotor.class, \"rightFront\");\n        // ... initialize other components\n    }\n}"
    },
    {
      "type": "rules-box",
      "title": "Best Practices",
      "items": [
        "<strong>Use proper package structure:</strong> Organize your code into logical packages",
        "<strong>Add comprehensive documentation:</strong> Use JavaDoc comments for all public methods",
        "<strong>Implement error handling:</strong> Use try-catch blocks for hardware operations",
        "<strong>Use constants:</strong> Define configuration values as constants",
        "<strong>Test frequently:</strong> Use the debugger to verify your code works correctly",
        "<strong>Keep backups:</strong> Use version control to track changes and create backups"
      ],
      "subtitle": "Follow these best practices when using Android Studio for FTC development:"
    },
    {
      "type": "exercise-box",
      "title": "Android Studio Practice",
      "description": "Set up Android Studio and create your first OpMode. Practice using the debugging features and organizing your code properly.",
      "tasks": [
        "Install Android Studio and the FTC SDK",
        "Create a new OpMode following the template provided",
        "Set up breakpoints and use the debugger to step through your code",
        "Organize your code into packages (hardware, autonomous, teleop, utils)",
        "Add comprehensive error handling and logging",
        "Use the Logcat to view debug messages and errors",
        "Create a simple autonomous OpMode and test it on your robot"
      ],
      "code": "// Example: Complete Android Studio project setup\n// 1. Create the following package structure:\n// org.firstinspires.ftc.teamcode.hardware.HardwareMap\n// org.firstinspires.ftc.teamcode.teleop.BasicTeleOp\n// org.firstinspires.ftc.teamcode.autonomous.BasicAutonomous\n// org.firstinspires.ftc.teamcode.utils.PIDController\n\n// 2. Add proper imports and documentation\n// 3. Implement error handling\n// 4. Use the debugger to test your code\n// 5. Commit your changes to version control"
    }
  ]
}