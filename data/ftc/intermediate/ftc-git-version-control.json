{
  "title": "Git & Version Control",
  "sections": [
    {
      "type": "text",
      "title": "Introduction to Version Control",
      "content": "Version control is essential for team-based software development. Git is the most popular version control system and is crucial for FTC teams to collaborate effectively, track changes, and maintain code history."
    },
    {
      "type": "rules-box",
      "title": "Why Version Control Matters",
      "items": [
        "<strong>Team Collaboration:</strong> Multiple programmers can work on the same codebase",
        "<strong>Change Tracking:</strong> See what changed, when, and by whom",
        "<strong>Backup & Recovery:</strong> Never lose code or revert to previous versions",
        "<strong>Code Review:</strong> Review changes before merging into main codebase",
        "<strong>Branching:</strong> Work on features without affecting main code",
        "<strong>Conflict Resolution:</strong> Handle when multiple people edit the same file"
      ],
      "subtitle": "Version control provides critical benefits for FTC teams:"
    },
    {
      "type": "text",
      "title": "Git Basics",
      "content": "Git works by tracking changes to files over time. Each change is recorded as a 'commit' with a unique identifier and description."
    },
    {
      "type": "code",
      "title": "Basic Git Commands",
      "content": "// Initialize a new Git repository\n// git init\n\n// Check the status of your repository\n// git status\n\n// Add files to staging area\n// git add filename.java\n// git add .  // Add all files\n\n// Commit changes with a message\n// git commit -m \"Add basic drivetrain functionality\"\n\n// View commit history\n// git log\n\n// View changes in a file\n// git diff filename.java\n\n// View changes in last commit\n// git show"
    },
    {
      "type": "text",
      "title": "Setting Up Git for FTC",
      "content": "Setting up Git for your FTC project involves creating a repository and connecting it to a remote hosting service like GitHub."
    },
    {
      "type": "code",
      "title": "FTC Git Setup",
      "content": "// 1. Configure Git with your information\n// git config --global user.name \"Your Name\"\n// git config --global user.email \"your.email@example.com\"\n\n// 2. Initialize repository in your FTC project folder\n// cd /path/to/your/ftc/project\n// git init\n\n// 3. Create a .gitignore file to exclude unnecessary files\n// touch .gitignore\n\n// 4. Add .gitignore contents:\n/*.iml\n.gradle\n/local.properties\n/.idea/caches\n/.idea/libraries\n/.idea/modules.xml\n/.idea/workspace.xml\n/.idea/navEditor.xml\n/.idea/assetWizardSettings.xml\n.DS_Store\n/build\n/captures\n.externalNativeBuild\n.cxx\nlocal.properties\n\n// 5. Add and commit initial files\n// git add .\n// git commit -m \"Initial commit: FTC robot code\"\n\n// 6. Connect to GitHub (create repository first on GitHub)\n// git remote add origin https://github.com/yourteam/ftc-robot-code.git\n// git branch -M main\n// git push -u origin main"
    },
    {
      "type": "text",
      "title": "Daily Git Workflow",
      "content": "A typical daily workflow for FTC development involves making changes, committing them, and pushing to the remote repository."
    },
    {
      "type": "code",
      "title": "Daily Workflow Example",
      "content": "// Start of day: Get latest changes\n// git pull origin main\n\n// Make changes to your code...\n// Edit TeleOp.java, Autonomous.java, etc.\n\n// Check what files have changed\n// git status\n\n// See the specific changes\n// git diff\n\n// Add your changes\n// git add .\n\n// Commit with descriptive message\n// git commit -m \"Add PID control to drivetrain for better turning\"\n\n// Push to remote repository\n// git push origin main\n\n// If working on a feature branch:\n// git checkout -b feature/pid-control\n// ... make changes ...\n// git add .\n// git commit -m \"Implement PID control system\"\n// git push origin feature/pid-control"
    },
    {
      "type": "text",
      "title": "Branching Strategy",
      "content": "Branching allows you to work on features without affecting the main codebase. This is especially important for FTC teams."
    },
    {
      "type": "code",
      "title": "Branching for FTC Development",
      "content": "// Main branch - stable, working code\n// git checkout main\n\n// Create feature branch for new autonomous\n// git checkout -b feature/advanced-autonomous\n\n// Work on your feature...\n// Edit autonomous code\n// Test on robot\n// Make improvements\n\n// Commit your changes\n// git add .\n// git commit -m \"Add vision-based autonomous routine\"\n\n// Push feature branch\n// git push origin feature/advanced-autonomous\n\n// When ready to merge:\n// git checkout main\n// git pull origin main\n// git merge feature/advanced-autonomous\n// git push origin main\n\n// Delete feature branch (optional)\n// git branch -d feature/advanced-autonomous\n// git push origin --delete feature/advanced-autonomous\n\n// Common branch naming conventions:\n// feature/autonomous-vision\n// bugfix/drivetrain-calibration\n// hotfix/emergency-stop\n// competition/state-championship"
    },
    {
      "type": "text",
      "title": "Team Collaboration",
      "content": "When multiple team members work on the same codebase, conflicts can arise. Git provides tools to handle these situations."
    },
    {
      "type": "code",
      "title": "Handling Merge Conflicts",
      "content": "// When pulling changes, conflicts might occur\n// git pull origin main\n// CONFLICT (content): Merge conflict in TeleOp.java\n// Automatic merge failed; fix conflicts and then commit the result.\n\n// Open the conflicted file and look for conflict markers:\n/*\n<<<<<<< HEAD\n// Your version of the code\nprivate void driveRobot() {\n    // Your implementation\n}\n=======\n// Their version of the code\nprivate void driveRobot() {\n    // Their implementation\n}\n>>>>>>> main\n*/\n\n// Resolve the conflict by choosing or combining code:\n/*\nprivate void driveRobot() {\n    // Combined implementation\n    // Use the best parts of both versions\n}\n*/\n\n// After resolving conflicts:\n// git add TeleOp.java\n// git commit -m \"Resolve merge conflict in TeleOp.java\"\n// git push origin main\n\n// Alternative: Abort merge if too complex\n// git merge --abort"
    },
    {
      "type": "text",
      "title": "Code Review Process",
      "content": "Code reviews help ensure code quality and catch bugs before they reach the main codebase."
    },
    {
      "type": "code",
      "title": "Pull Request Workflow",
      "content": "// 1. Create feature branch\n// git checkout -b feature/new-mechanism\n\n// 2. Make changes and commit\n// git add .\n// git commit -m \"Add new mechanism control\"\n// git push origin feature/new-mechanism\n\n// 3. Create Pull Request on GitHub\n// - Go to GitHub repository\n// - Click \"Compare & pull request\"\n// - Add description of changes\n// - Request review from team members\n\n// 4. Review process\n// - Team members review code\n// - Suggest changes if needed\n// - Approve when satisfied\n\n// 5. Merge to main\n// - Click \"Merge pull request\"\n// - Delete feature branch\n\n// 6. Update local repository\n// git checkout main\n// git pull origin main"
    },
    {
      "type": "text",
      "title": "Git Best Practices for FTC",
      "content": "Following best practices ensures your team can work efficiently and maintain code quality."
    },
    {
      "type": "rules-box",
      "title": "Commit Message Guidelines",
      "items": [
        "<strong>Use present tense:</strong> \"Add PID control\" not \"Added PID control\"",
        "<strong>Be specific:</strong> \"Fix drivetrain calibration for mecanum wheels\"",
        "<strong>Keep it short:</strong> First line under 50 characters",
        "<strong>Add details:</strong> Use body for complex changes",
        "<strong>Reference issues:</strong> \"Fix #123: Motor direction issue\""
      ],
      "subtitle": "Write clear, descriptive commit messages:"
    },
    {
      "type": "code",
      "title": "Good vs Bad Commit Messages",
      "content": "// Good commit messages:\n// git commit -m \"Add PID control to drivetrain for precise turning\"\n// git commit -m \"Fix motor direction issue in autonomous routine\"\n// git commit -m \"Update autonomous path for new field configuration\"\n// git commit -m \"Add emergency stop functionality to all mechanisms\"\n\n// Bad commit messages:\n// git commit -m \"stuff\"\n// git commit -m \"fixed it\"\n// git commit -m \"updated code\"\n// git commit -m \"changes\"\n\n// Complex commit with body:\n// git commit -m \"Implement vision-based autonomous targeting\" -m \"- Add OpenCV integration for target detection\" -m \"- Implement PID control for precise targeting\" -m \"- Add telemetry for vision debugging\" -m \"- Test with multiple lighting conditions\""
    },
    {
      "type": "text",
      "title": "Backup and Recovery",
      "content": "Git provides powerful tools for backing up your code and recovering from mistakes."
    },
    {
      "type": "code",
      "title": "Backup and Recovery Commands",
      "content": "// Create backup branch before major changes\n// git checkout -b backup/before-major-refactor\n// git push origin backup/before-major-refactor\n\n// View recent commits\n// git log --oneline -10\n\n// Revert to previous commit\n// git revert HEAD  // Revert last commit\n// git revert abc123  // Revert specific commit\n\n// Reset to previous state (dangerous - use carefully)\n// git reset --hard HEAD~1  // Go back one commit\n// git reset --hard abc123  // Go to specific commit\n\n// Recover deleted branch\n// git reflog  // Show all Git actions\n// git checkout -b recovered-branch abc123\n\n// Stash changes temporarily\n// git stash  // Save changes without committing\n// git stash pop  // Restore stashed changes\n// git stash list  // See all stashes"
    },
    {
      "type": "text",
      "title": "GitHub Integration",
      "content": "GitHub provides additional features that enhance team collaboration and project management."
    },
    {
      "type": "list",
      "title": "GitHub Features for FTC Teams",
      "items": [
        "<strong>Issues:</strong> Track bugs, feature requests, and tasks",
        "<strong>Projects:</strong> Organize work with kanban boards",
        "<strong>Wiki:</strong> Document robot setup and procedures",
        "<strong>Actions:</strong> Automate testing and deployment",
        "<strong>Releases:</strong> Tag stable versions for competitions",
        "<strong>Discussions:</strong> Team communication and planning"
      ]
    },
    {
      "type": "code",
      "title": "GitHub Workflow Example",
      "content": "// 1. Create issue for new feature\n// \"Add vision-based autonomous routine\"\n// - Description of requirements\n// - Acceptance criteria\n// - Assign to team member\n\n// 2. Create branch from issue\n// git checkout -b feature/vision-autonomous\n\n// 3. Work on feature and commit\n// git add .\n// git commit -m \"Add vision processing for autonomous #123\"\n\n// 4. Create pull request\n// - Link to issue: \"Closes #123\"\n// - Add description of changes\n// - Request code review\n\n// 5. Review and merge\n// - Address review comments\n// - Merge when approved\n// - Delete feature branch\n\n// 6. Create release for competition\n// git tag -a v1.0.0 -m \"Competition ready version\"\n// git push origin v1.0.0"
    },
    {
      "type": "rules-box",
      "title": "FTC-Specific Git Practices",
      "items": [
        "<strong>Competition branches:</strong> Create separate branches for each competition",
        "<strong>Configuration files:</strong> Keep robot-specific configs in separate files",
        "<strong>Backup before matches:</strong> Always commit before competition matches",
        "<strong>Emergency fixes:</strong> Use hotfix branches for urgent competition fixes",
        "<strong>Documentation:</strong> Include setup instructions in README files",
        "<strong>Team access:</strong> Ensure all team members have repository access"
      ],
      "subtitle": "Special considerations for FTC development:"
    },
    {
      "type": "exercise-box",
      "title": "Git Practice",
      "description": "Set up Git for your FTC project and practice the basic workflow with your team.",
      "tasks": [
        "Install Git and create a GitHub account",
        "Set up a repository for your FTC project",
        "Create initial commit with your current robot code",
        "Practice creating branches for different features",
        "Simulate a merge conflict and resolve it",
        "Set up a pull request workflow with your team",
        "Create a release for a competition-ready version",
        "Document your Git workflow for the team"
      ],
      "code": "// Example: Complete Git setup for FTC team\n// 1. Initialize repository\n// git init\n// git add .\n// git commit -m \"Initial commit: FTC robot code\"\n\n// 2. Connect to GitHub\n// git remote add origin https://github.com/yourteam/ftc-robot-code.git\n// git push -u origin main\n\n// 3. Create development workflow\n// git checkout -b develop\n// git push origin develop\n\n// 4. Create feature branch\n// git checkout -b feature/new-autonomous\n// ... make changes ...\n// git add .\n// git commit -m \"Add new autonomous routine\"\n// git push origin feature/new-autonomous\n\n// 5. Create pull request and merge\n// 6. Tag competition releases\n// git tag -a v1.0.0 -m \"State Championship version\"\n// git push origin v1.0.0"
    }
  ]
}