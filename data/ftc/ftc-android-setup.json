{
  "title": "Android Studio Setup",
  "sections": [
    {
      "title": "Introduction to Android Studio",
      "content": "Android Studio is the professional development environment for FTC programming. While OnBot Java is great for learning, Android Studio provides more powerful features, better debugging tools, and the ability to create more complex and efficient code."
    },
    {
      "title": "System Requirements",
      "content": "Before installing Android Studio, ensure your computer meets these requirements:\n\n**Minimum Requirements**:\n- Windows 10/11, macOS 10.14+, or Linux\n- 8 GB RAM (16 GB recommended)\n- 8 GB available disk space\n- Intel i3 processor or equivalent\n\n**Recommended Requirements**:\n- 16 GB RAM\n- 16 GB available disk space\n- Intel i5 processor or better\n- SSD storage\n\n**Additional Requirements**:\n- Java Development Kit (JDK) 11 or 17\n- Git for version control\n- USB cable for robot connection"
    },
    {
      "title": "Installation Process",
      "content": "Follow these steps to install Android Studio:\n\n1. **Download Android Studio**:\n   - Go to https://developer.android.com/studio\n   - Download the latest version for your operating system\n\n2. **Install Android Studio**:\n   - Run the installer and follow the setup wizard\n   - Choose \"Standard\" installation for most users\n   - Let it install the Android SDK automatically\n\n3. **Install JDK**:\n   - Android Studio will prompt you to install JDK if needed\n   - Choose JDK 11 or 17 (recommended for FTC)\n\n4. **First Launch Setup**:\n   - Android Studio will download additional components\n   - This may take 10-30 minutes depending on your internet speed\n\n5. **Install FTC SDK**:\n   - Download the FTC SDK from the official GitHub repository\n   - Extract it to a location on your computer"
    },
    {
      "title": "Project Structure and Organization",
      "content": "Understanding the FTC project structure is crucial for effective development:\n\n```\nFTC_Project/\n├── TeamCode/\n│   ├── src/main/java/org/firstinspires/ftc/teamcode/\n│   │   ├── Autonomous/\n│   │   │   ├── BasicAuto.java\n│   │   │   ├── AdvancedAuto.java\n│   │   │   └── VisionAuto.java\n│   │   ├── TeleOp/\n│   │   │   ├── BasicTeleOp.java\n│   │   │   ├── AdvancedTeleOp.java\n│   │   │   └── DriverControlled.java\n│   │   ├── Hardware/\n│   │   │   ├── RobotHardware.java\n│   │   │   ├── MotorController.java\n│   │   │   └── SensorManager.java\n│   │   ├── Utilities/\n│   │   │   ├── PIDController.java\n│   │   │   ├── PathPlanner.java\n│   │   │   └── VisionProcessor.java\n│   │   └── Config/\n│   │       ├── RobotConfig.java\n│   │       └── Constants.java\n│   ├── src/main/res/\n│   │   └── values/\n│   │       └── strings.xml\n│   └── build.gradle\n├── FtcRobotController/\n├── build.gradle\n└── settings.gradle\n```\n\n**Key Directories**:\n- **TeamCode**: Your team's code goes here\n- **Autonomous**: All autonomous programs\n- **TeleOp**: All teleop programs\n- **Hardware**: Robot hardware abstractions\n- **Utilities**: Helper classes and utilities\n- **Config**: Configuration and constants"
    },
    {
      "title": "Creating Your First Project",
      "content": "Here's how to create your first FTC project in Android Studio:\n\n1. **Open Android Studio** and click \"Open an existing project\"\n\n2. **Navigate to the FTC SDK folder** and select it\n\n3. **Wait for Gradle sync** to complete (this may take several minutes)\n\n4. **Create your first OpMode**:\n```java\npackage org.firstinspires.ftc.teamcode.TeleOp;\n\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.hardware.DcMotor;\nimport com.qualcomm.robotcore.hardware.Servo;\n\n@TeleOp(name=\"My First TeleOp\", group=\"TeleOp\")\npublic class MyFirstTeleOp extends LinearOpMode {\n    \n    private DcMotor leftMotor;\n    private DcMotor rightMotor;\n    private Servo armServo;\n    \n    @Override\n    public void runOpMode() {\n        // Initialize hardware\n        leftMotor = hardwareMap.get(DcMotor.class, \"left_motor\");\n        rightMotor = hardwareMap.get(DcMotor.class, \"right_motor\");\n        armServo = hardwareMap.get(Servo.class, \"arm_servo\");\n        \n        // Wait for start\n        waitForStart();\n        \n        // Main loop\n        while (opModeIsActive()) {\n            // Read controller input\n            double forward = gamepad1.left_stick_y;\n            double turn = gamepad1.right_stick_x;\n            \n            // Calculate motor powers\n            double leftPower = forward + turn;\n            double rightPower = forward - turn;\n            \n            // Clamp values\n            leftPower = Math.max(-1.0, Math.min(1.0, leftPower));\n            rightPower = Math.max(-1.0, Math.min(1.0, rightPower));\n            \n            // Set motor powers\n            leftMotor.setPower(leftPower);\n            rightMotor.setPower(rightPower);\n            \n            // Arm control\n            if (gamepad1.a) {\n                armServo.setPosition(1.0);\n            } else if (gamepad1.b) {\n                armServo.setPosition(0.0);\n            }\n            \n            // Telemetry\n            telemetry.addData(\"Left Power\", leftPower);\n            telemetry.addData(\"Right Power\", rightPower);\n            telemetry.addData(\"Arm Position\", armServo.getPosition());\n            telemetry.update();\n        }\n    }\n}\n```"
    },
    {
      "title": "Version Control with Git",
      "content": "Version control is essential for team development:\n\n1. **Initialize Git Repository**:\n```bash\ncd /path/to/your/ftc/project\ngit init\ngit add .\ngit commit -m \"Initial commit\"\n```\n\n2. **Create .gitignore file**:\n```\n# Android Studio files\n.idea/\n*.iml\n.gradle/\nbuild/\n\n# Generated files\n*.class\n*.dex\n*.apk\n\n# Logs\n*.log\n\n# Temporary files\n*.tmp\n*.temp\n```\n\n3. **Basic Git Workflow**:\n```bash\n# Check status\ngit status\n\n# Add changes\ngit add .\n\n# Commit changes\ngit commit -m \"Added new autonomous program\"\n\n# Push to remote repository\ngit push origin main\n\n# Pull latest changes\ngit pull origin main\n```\n\n4. **Branching Strategy**:\n- **main**: Stable, working code\n- **develop**: Development branch\n- **feature/autonomous**: Feature branches for specific features\n- **hotfix/bug-fix**: Quick fixes for critical issues"
    },
    {
      "title": "Build and Deployment Process",
      "content": "Building and deploying your code to the robot:\n\n1. **Build the Project**:\n   - Click Build → Make Project (Ctrl+F9)\n   - Or use the Gradle build system\n\n2. **Check for Errors**:\n   - Review the Build window for any compilation errors\n   - Fix any issues before proceeding\n\n3. **Deploy to Robot**:\n   - Connect your robot via USB\n   - Click Run → Run 'app' (Shift+F10)\n   - Select your device (Control Hub or Driver Station)\n\n4. **Alternative Deployment**:\n   - Build APK: Build → Build Bundle(s) / APK(s) → Build APK(s)\n   - Transfer APK to robot manually\n\n**Common Build Issues**:\n- **Gradle sync failed**: Check internet connection, update Gradle\n- **SDK not found**: Verify Android SDK installation\n- **Missing dependencies**: Check build.gradle files\n- **Version conflicts**: Update to compatible versions"
    },
    {
      "title": "Debugging Tools",
      "content": "Android Studio provides powerful debugging tools:\n\n1. **Logcat**:\n```java\n// Add logging to your code\nLog.d(\"MyTeleOp\", \"Motor power set to: \" + leftPower);\nLog.e(\"MyTeleOp\", \"Error occurred: \" + errorMessage);\n```\n\n2. **Breakpoints**:\n   - Click in the gutter next to line numbers to set breakpoints\n   - Use Debug mode to step through code\n   - Inspect variables during execution\n\n3. **Telemetry**:\n```java\n// Use telemetry for debugging\ntelemetry.addData(\"Debug\", \"Current state: \" + currentState);\ntelemetry.addData(\"Debug\", \"Sensor value: \" + sensorValue);\ntelemetry.update();\n```\n\n4. **Performance Profiling**:\n   - Monitor CPU and memory usage\n   - Identify performance bottlenecks\n   - Optimize code based on profiling data"
    },
    {
      "title": "Practice Exercise",
      "content": "Set up your Android Studio environment and create your first project:\n\n1. **Install Android Studio** and FTC SDK\n2. **Create a new project** following the structure guidelines\n3. **Set up Git repository** with proper .gitignore\n4. **Create a simple TeleOp program** that controls your robot\n5. **Build and deploy** the program to your robot\n6. **Test the program** and verify it works correctly\n\n**Requirements**:\n- Follow the project structure guidelines\n- Include proper comments and documentation\n- Use meaningful variable and method names\n- Implement basic error handling\n- Add comprehensive telemetry\n\n**Advanced Challenge**:\n- Set up a shared repository for team collaboration\n- Create multiple OpModes for different scenarios\n- Implement a basic hardware abstraction layer\n- Add configuration files for different robot setups"
    },
    {
      "title": "Common Issues and Solutions",
      "content": "**Problem**: Android Studio won't start\n- **Solution**: Check system requirements, reinstall if necessary\n\n**Problem**: Gradle sync fails\n- **Solution**: Check internet connection, update Gradle version\n\n**Problem**: Can't find FTC SDK\n- **Solution**: Download from official repository, check file paths\n\n**Problem**: Build errors\n- **Solution**: Check Java version compatibility, review error messages\n\n**Problem**: Robot not detected\n- **Solution**: Check USB connection, install proper drivers\n\n**Problem**: Code doesn't deploy\n- **Solution**: Check build process, verify APK generation"
    },
    {
      "title": "Next Steps",
      "content": "You now have Android Studio set up and ready for advanced development! In the next lessons, you'll learn about:\n\n- FTC SDK deep dive and advanced features\n- Computer vision integration\n- Advanced control systems and PID tuning\n- Performance optimization and debugging\n\nPractice using Android Studio and become comfortable with the development workflow before moving to more advanced topics."
    }
  ]
} 