{
  "title": "DC Motors in FTC",
  "sections": [
    {
      "type": "text",
      "title": "What is a DC Motor?",
      "content": "A <a href='https://en.wikipedia.org/wiki/DC_motor' target='_blank'>DC motor</a> is a device that converts electrical energy into mechanical motion. In FTC, DC motors are used to drive wheels, arms, and other moving parts. Understanding how to control DC motors is essential for building a functional robot."
    },
    {
      "type": "code",
      "title": "Declaring and Initializing a DcMotor",
      "content": "You must declare and initialize each motor in your OpMode. The name must match your robot configuration.",
      "code": "private DcMotor leftDrive;\n\n@Override\npublic void runOpMode() {\n    leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n    // ... rest of your code ...\n}"
    },
    {
      "type": "code",
      "title": "Setting Motor Power",
      "content": "Set the power of a motor using <code>setPower()</code>. Power values range from -1.0 (full reverse) to 1.0 (full forward).",
      "code": "leftDrive.setPower(0.5); // Half speed forward\nleftDrive.setPower(-1.0); // Full speed reverse\nleftDrive.setPower(0.0); // Stop the motor"
    },
    {
      "type": "text",
      "title": "Controlling Motor Direction",
      "content": "You can reverse a motor's direction in code using <code>setDirection()</code>. This is useful if your motors are mounted in opposite directions, such as on a drivetrain."
    },
    {
      "type": "code",
      "title": "Example: Setting Motor Direction",
      "content": "",
      "code": "leftDrive.setDirection(DcMotor.Direction.REVERSE);\nrightDrive.setDirection(DcMotor.Direction.FORWARD);"
    },
    {
      "type": "text",
      "title": "DcMotor Zero Power Behavior",
      "content": "There are two different 'zero power behavior' settings for motors. The default is <code>BRAKE</code>, which means the motor will resist motion and stop quickly. The other option is <code>FLOAT</code>, which means the motor will coast to a stop. <br><br>You can set the zero power behavior using the <code>setZeroPowerBehavior()</code> method."
    },
    {
      "type": "code",
      "title": "Example: Setting the Zero Power Behavior",
      "content": "",
      "code": "leftDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\nrightDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.FLOAT);"
    },
    {
      "type": "text",
      "title": "DcMotor Run Mode",
      "content": "There are three different 'run mode' settings for motors. The default is <code>RUN_WITHOUT_ENCODER</code>, which means the motor will run at the power you set. The other options are <code>RUN_USING_ENCODER</code>, which means the motor will run at the power you set, but will also use the encoder to determine the motor's position, and <code>RUN_TO_POSITION</code>, which means the motor will run at the power you set, but will also use the encoder to determine the motor's position. <br><br>You can set the run mode using the <code>setMode()</code> method."
    },
    {
      "type": "code",
      "title": "Example: Setting the Run Mode",
      "content": "",
      "code": "leftDrive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\nrightDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\nleftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);"
    },
    {
      "type": "text",
      "title": "Note When Using RUN_TO_POSITION",
      "content": "When using the <code>RUN_TO_POSITION</code> mode, you must set the target position using the <code>setTargetPosition()</code> method and the power using the <code>setPower()</code> method. You can also set the time to reach the target position using the <code>setTargetPositionTolerance()</code> method."
    },
    {
      "type": "code",
      "title": "Example: Setting the Target Position",
      "content": "",
      "code": "leftDrive.setTargetPosition(100);\nleftDrive.setPower(0.5);\nleftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);"
    },
    {
      "type": "text",
      "title": "Safety and Best Practices",
      "content": "Always set motor power to zero at the end of your OpMode to prevent unexpected movement. Use try/catch blocks when accessing hardware to handle errors gracefully. For more information about try-catch blocks, see <a href='../java-programing-logic/java-try-catch.json'>Try-Catch Blocks</a>."
    },
    {
      "type": "code",
      "title": "Example: Safe Motor Shutdown",
      "content": "",
      "code": "try {\n    leftDrive.setPower(0);\n    rightDrive.setPower(0);\n} catch (Exception e) {\n    telemetry.addData(\"Error\", e.getMessage());\n    telemetry.update();\n}"
    },
    {
      "type": "text",
      "title": "Troubleshooting Motor Issues",
      "content": "If your motor doesn't move, check the following:<ul><li>Is the motor name in code exactly the same as in the configuration?</li><li>Is the motor plugged into the correct port?</li><li>Is the power set to a nonzero value?</li></ul>"
    },
    {
      "type": "exercise-box",
      "title": "Practice: Motor Initialization and Control",
      "description": "Write code to initialize two drive motors and set their power based on a variable <code>drivePower</code>. Then, safely stop both motors at the end of the OpMode.",
      "tasks": [
        "Declare two DcMotor variables.",
        "Initialize them in <code>runOpMode()</code>.",
        "Set their power using <code>setPower()</code>.",
        "Stop both motors at the end using a try/catch block."
      ],
      "answers": [
        {
          "task": "Declare two DcMotor variables",
          "content": "// Declare two DcMotor variables as private member variables\n// This makes them accessible throughout the class\nprivate DcMotor leftDrive;\nprivate DcMotor rightDrive;\n\n// Alternative: Declare both on one line\n// private DcMotor leftDrive, rightDrive;"
        },
        {
          "task": "Initialize them in runOpMode()",
          "content": "// Initialize motors using hardwareMap.get()\n// Make sure the names match your robot configuration\nleftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\nrightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n\n// Optional: Set motor directions if needed\n// leftDrive.setDirection(DcMotor.Direction.REVERSE);\n// rightDrive.setDirection(DcMotor.Direction.FORWARD);\n\n// Optional: Set zero power behavior\n// leftDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n// rightDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);"
        },
        {
          "task": "Set their power using setPower()",
          "content": "// Set motor power using setPower() method\n// Power values range from -1.0 to 1.0\ndouble drivePower = 0.7; // 70% forward power\n\nleftDrive.setPower(drivePower);\nrightDrive.setPower(drivePower);\n\n// You can also set different powers for each motor:\n// leftDrive.setPower(0.5);\n// rightDrive.setPower(0.8);\n\n// Or use negative values for reverse:\n// leftDrive.setPower(-0.5);\n// rightDrive.setPower(-0.5);"
        },
        {
          "task": "Stop both motors at the end using a try/catch block",
          "content": "// Safely stop motors using try/catch block\ntry {\n    leftDrive.setPower(0);\n    rightDrive.setPower(0);\n} catch (Exception e) {\n    // Handle any errors that occur when stopping motors\n    telemetry.addData(\"Error stopping motors\", e.getMessage());\n    telemetry.update();\n}\n\n// Alternative: Stop motors without try/catch (less safe)\n// leftDrive.setPower(0);\n// rightDrive.setPower(0);"
        },
        {
          "task": "Combine all tasks into one complete OpMode",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.DcMotor;\n\n@TeleOp(name = \"MotorControlExample\")\npublic class MotorControlExample extends LinearOpMode {\n    // Task 1: Declare two DcMotor variables\n    private DcMotor leftDrive;\n    private DcMotor rightDrive;\n\n    @Override\n    public void runOpMode() {\n        // Task 2: Initialize them in runOpMode()\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        \n        // Optional: Configure motor settings\n        leftDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n        rightDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n        \n        // Show initialization status\n        telemetry.addData(\"Status\", \"Motors initialized\");\n        telemetry.update();\n        \n        waitForStart();\n        \n        while (opModeIsActive()) {\n            // Task 3: Set their power using setPower()\n            double drivePower = 0.7; // 70% forward power\n            \n            leftDrive.setPower(drivePower);\n            rightDrive.setPower(drivePower);\n            \n            // Show motor status\n            telemetry.addData(\"Left Motor Power\", leftDrive.getPower());\n            telemetry.addData(\"Right Motor Power\", rightDrive.getPower());\n            telemetry.update();\n            \n            // Run for a short time\n            sleep(2000); // 2 seconds\n            \n            // Stop motors\n            break;\n        }\n        \n        // Task 4: Stop both motors at the end using a try/catch block\n        try {\n            leftDrive.setPower(0);\n            rightDrive.setPower(0);\n            telemetry.addData(\"Status\", \"Motors stopped safely\");\n        } catch (Exception e) {\n            telemetry.addData(\"Error stopping motors\", e.getMessage());\n        }\n        telemetry.update();\n    }\n}"
        }
      ]
  }
  ]
}
