{
  "title": "Robot Hardware Overview",
  "sections": [
    {
      "type": "text",
      "title": "Introduction to FTC Robot Hardware",
      "content": "Understanding how your code connects to the robot's hardware is foundational for FTC programming. In FTC, the <code>hardwareMap</code> object is used to access and control motors, sensors, and other devices. This lesson will show you how to organize and initialize your robot's hardware in code."
    },
    {
      "type": "text",
      "title": "What is the hardwareMap?",
      "content": "The <code>hardwareMap</code> is a special object provided by the FTC SDK that lets you access the physical devices configured on your robot. You use it to get references to motors, servos, and sensors by their configuration names. <br><br>For more details, see <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/tutorial_specific/onbot_java/creating_op_modes/Creating-and-Running-an-Op-Mode-%28Android-Studio%29.html#examining-the-structure-of-your-op-mode\" target=\"_blank\">FTC Docs: Examining the Structure of Your Op Mode</a>."
    },
    {
      "type": "code",
      "title": "Declaring Hardware Devices",
      "content": "Declare each device as a private member variable in your OpMode class. This makes your code organized and easy to read.",
      "code": "private DcMotor leftDrive;\nprivate DcMotor rightDrive;\nprivate Servo armServo;\nprivate DistanceSensor frontSensor;"
    },
    {
      "type": "code",
      "title": "Initializing Hardware Devices",
      "content": "Initialize each device in the <code>runOpMode()</code> method using <code>hardwareMap.get()</code>. The string must match the device name in your robot configuration.",
      "code": "leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\nrightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\narmServo = hardwareMap.get(Servo.class, \"arm_servo\");\nfrontSensor = hardwareMap.get(DistanceSensor.class, \"front_sensor\");"
    },
    {
      "type": "text",
      "title": "Best Practices for Hardware Organization",
      "content": "To keep your code clean and maintainable, group hardware initialization into a separate method or class. This makes it easier to debug and expand your robot's capabilities. <br><br>For more on code organization, see <a href=\"https://github.com/FIRST-Tech-Challenge/FtcRobotController/blob/master/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/readme.md\" target=\"_blank\">FtcRobotController: TeamCode README</a>."
    },
    {
      "type": "code",
      "title": "Example: Hardware Initialization Method",
      "content": "Here's how you might separate hardware initialization into its own method:",
      "code": "private void initHardware() {\n    leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n    rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n    armServo = hardwareMap.get(Servo.class, \"arm_servo\");\n    frontSensor = hardwareMap.get(DistanceSensor.class, \"front_sensor\");\n}\n\n@Override\npublic void runOpMode() {\n    initHardware();\n    // ... rest of your code ...\n}"
    },
    {
      "type": "text",
      "title": "Avoiding Monolithic Code",
      "content": "Large, single-file code is hard to maintain. Always break up your logic into small, focused methods or classes. This makes your code easier to read, debug, and expand."
    },
    {
      "type": "exercise-box",
      "title": "Practice: Organize Your Hardware",
      "description": "Given a robot with two drive motors and a claw servo, write a method to initialize all hardware devices. Then, call this method from <code>runOpMode()</code>.",
      "tasks": [
        "Declare member variables for two motors and one servo.",
        "Write an <code>initHardware()</code> method to initialize them using <code>hardwareMap.get()</code>.",
        "Call <code>initHardware()</code> at the start of <code>runOpMode()</code>."
      ],
      "content": "// Example code\nprivate DcMotor leftDrive, rightDrive;\nprivate Servo clawServo;\n\nprivate void initHardware() {\n    leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n    rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n    clawServo = hardwareMap.get(Servo.class, \"claw_servo\");\n}\n\n@Override\npublic void runOpMode() {\n    initHardware();\n    // ... rest of your code ...\n}"
    }
  ]
}
