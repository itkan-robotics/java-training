{
  "title": "Robot Hardware Overview",
  "sections": [
    {
      "type": "text",
      "title": "Introduction to FTC Robot Hardware",
      "content": "Understanding how your code connects to the robot's hardware is foundational for FTC programming. In FTC, the <code>hardwareMap</code> object is used to access and control motors, sensors, and other devices. This lesson will show you how to organize and initialize your robot's hardware in code."
    },
    {
      "type": "text",
      "title": "What is the hardwareMap?",
      "content": "We have been using the <code>hardwareMap</code> throughout the course, but what actually is it? The <code>hardwareMap</code> is a special object provided by the FTC SDK that lets you access the physical devices configured on your robot. You use it to get references to motors, servos, and sensors by their configuration names."
    },
    {
      "type": "code",
      "title": "Declaring Hardware Devices",
      "content": "Declare each device as a private member variable in your OpMode class. This makes your code organized and easy to read.",
      "code": "private DcMotor leftDrive;\nprivate DcMotor rightDrive;\nprivate Servo armServo;\nprivate DistanceSensor frontSensor;"
    },
    {
      "type": "code",
      "title": "Initializing Hardware Devices",
      "content": "Initialize each device in the <code>runOpMode()</code> method using <code>hardwareMap.get()</code>. The string must match the device name in your robot configuration.",
      "code": "leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\nrightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\narmServo = hardwareMap.get(Servo.class, \"arm_servo\");\nfrontSensor = hardwareMap.get(DistanceSensor.class, \"front_sensor\");"
    },
    {
      "type": "text",
      "title": "Best Practices for Hardware Organization",
      "content": "To keep your code clean and maintainable, group hardware initialization into a separate method or class. This makes it easier to debug and expand your robot's capabilities."
    },
    {
      "type": "code",
      "title": "Example: Hardware Initialization Method",
      "content": "Here's how you might separate hardware initialization into its own method:",
      "code": "private void initHardware() {\n    leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n    rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n    armServo = hardwareMap.get(Servo.class, \"arm_servo\");\n    frontSensor = hardwareMap.get(DistanceSensor.class, \"front_sensor\");\n}\n\n@Override\npublic void runOpMode() {\n    initHardware();\n    // ... rest of your code ...\n}"
    },
    {
      "type": "exercise-box",
      "title": "Practice: Organize Your Hardware",
      "description": "Given a robot with two drive motors and a claw servo, write a method to initialize all hardware devices. Then, call this method from <code>runOpMode()</code>.",
      "tasks": [
        "Declare member variables for two motors and one servo.",
        "Write an <code>initHardware()</code> method to initialize them using <code>hardwareMap.get()</code>.",
        "Call <code>initHardware()</code> at the start of <code>runOpMode()</code>."
      ],
      "answers": [
        {
          "task": "Declare member variables for two motors and one servo",
          "content": "// Declare hardware devices as private member variables\n// This makes them accessible throughout the class\nprivate DcMotor leftDrive;\nprivate DcMotor rightDrive;\nprivate Servo clawServo;\n\n// You can also declare them on one line:\n// private DcMotor leftDrive, rightDrive;\n// private Servo clawServo;"
        },
        {
          "task": "Write an initHardware() method to initialize them using hardwareMap.get()",
          "content": "private void initHardware() {\n    // Initialize drive motors\n    leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n    rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n    \n    // Initialize claw servo\n    clawServo = hardwareMap.get(Servo.class, \"claw_servo\");\n    \n    // Optional: Set initial servo position\n    clawServo.setPosition(0.5); // Middle position\n    \n    // Optional: Set motor directions if needed\n    // leftDrive.setDirection(DcMotor.Direction.REVERSE);\n    // rightDrive.setDirection(DcMotor.Direction.FORWARD);\n}"
        },
        {
          "task": "Call initHardware() at the start of runOpMode()",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.DcMotor;\nimport com.qualcomm.robotcore.hardware.Servo;\n\n@TeleOp(name = \"HardwareOrganization\")\npublic class HardwareOrganization extends LinearOpMode {\n    // Declare hardware devices\n    private DcMotor leftDrive, rightDrive;\n    private Servo clawServo;\n\n    @Override\n    public void runOpMode() {\n        // Initialize hardware first\n        initHardware();\n        \n        // Show initialization status\n        telemetry.addData(\"Status\", \"Hardware initialized\");\n        telemetry.update();\n        \n        // Wait for game to start\n        waitForStart();\n        \n        // Main loop\n        while (opModeIsActive()) {\n            // Your robot control code here\n            double leftPower = -gamepad1.left_stick_y;\n            double rightPower = -gamepad1.right_stick_y;\n            \n            leftDrive.setPower(leftPower);\n            rightDrive.setPower(rightPower);\n            \n            // Control claw with buttons\n            if (gamepad1.a) {\n                clawServo.setPosition(0.0); // Close\n            } else if (gamepad1.b) {\n                clawServo.setPosition(1.0); // Open\n            }\n            \n            // Show telemetry\n            telemetry.addData(\"Left Power\", leftPower);\n            telemetry.addData(\"Right Power\", rightPower);\n            telemetry.addData(\"Claw Position\", clawServo.getPosition());\n            telemetry.update();\n        }\n    }\n\n    private void initHardware() {\n        // Initialize drive motors\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        \n        // Initialize claw servo\n        clawServo = hardwareMap.get(Servo.class, \"claw_servo\");\n        \n        // Set initial servo position\n        clawServo.setPosition(0.5);\n    }\n}"
        }
      ]
    }
  ]
}
