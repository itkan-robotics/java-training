{
  "title": "Servos",
  "sections": [
    {
      "type": "text",
      "title": "Introduction to Servos",
      "content": "Servos are precision actuators that can move to specific positions, making them ideal for mechanisms that require accurate positioning such as arms, claws, lifts, and other mechanical systems. Understanding servo control is essential for creating sophisticated robot mechanisms."
    },
    {
      "type": "rules-box",
      "title": "What are Servos?",
      "subtitle": "Key servo characteristics:",
      "items": [
        "Position-controlled actuators with built-in feedback",
        "Move to specific angles or positions (0.0 to 1.0 range)",
        "Hold position without continuous power",
        "Precise control for mechanisms requiring accuracy",
        "Built-in gearbox for torque multiplication"
      ]
    },
    {
      "type": "text",
      "title": "Servo Types in FTC",
      "content": "FTC allows several types of servos, each with different characteristics and applications. Understanding these differences helps teams choose the right servo for their needs."
    },
    {
      "type": "list",
      "title": "Common FTC Servo Types",
      "items": [
        "<strong>Standard Servos:</strong> 180-degree rotation, most common type",
        "<strong>Continuous Rotation Servos:</strong> Full 360-degree rotation",
        "<strong>Digital Servos:</strong> Enhanced precision and programmability",
        "<strong>High-Torque Servos:</strong> Increased lifting capacity",
        "<strong>Micro Servos:</strong> Smaller size for space-constrained applications"
      ]
    },
    {
      "type": "code",
      "title": "Servo Specifications Comparison",
      "language": "java",
      "content": "// Common servo specifications and applications\n\n// Standard Servo (180 degrees)\n// Position range: 0.0 to 1.0\n// Applications: Arms, claws, flaps, mechanisms\n// Torque: 2-20 kg-cm depending on model\n// Speed: 0.1-0.3 seconds per 60 degrees\n\n// Continuous Rotation Servo\n// Position range: 0.0 to 1.0 (controls speed and direction)\n// Applications: Conveyors, continuous mechanisms\n// Speed control: 0.0 = full reverse, 0.5 = stop, 1.0 = full forward\n\n// Digital Servo\n// Enhanced precision and programmability\n// Applications: High-precision mechanisms\n// Features: Programmable speed, acceleration, deadband\n\n// High-Torque Servo\n// Increased lifting capacity\n// Applications: Heavy mechanisms, lifts\n// Torque: 20+ kg-cm"
    },
    {
      "type": "text",
      "title": "Servo Configuration",
      "content": "Proper servo configuration is essential for reliable operation. This includes setting positions, directions, and understanding the servo's range of motion."
    },
    {
      "type": "code",
      "title": "Basic Servo Setup",
      "language": "java",
      "content": "// Servo configuration and initialization\nServo armServo = hardwareMap.get(Servo.class, \"arm_servo\");\nServo clawServo = hardwareMap.get(Servo.class, \"claw_servo\");\nServo continuousServo = hardwareMap.get(Servo.class, \"continuous_servo\");\n\n// Set servo directions (if needed)\narmServo.setDirection(Servo.Direction.FORWARD);\nclawServo.setDirection(Servo.Direction.FORWARD);\ncontinuousServo.setDirection(Servo.Direction.FORWARD);\n\n// Set initial positions\narmServo.setPosition(0.5); // Middle position\nclawServo.setPosition(0.0); // Closed position\ncontinuousServo.setPosition(0.5); // Stop position\n\n// Servo position constants for readability\nfinal double ARM_UP_POSITION = 0.0;\nfinal double ARM_DOWN_POSITION = 1.0;\nfinal double CLAW_OPEN_POSITION = 1.0;\nfinal double CLAW_CLOSED_POSITION = 0.0;"
    },
    {
      "type": "text",
      "title": "Position Control",
      "content": "Position control is the primary way to control standard servos. Positions range from 0.0 to 1.0, representing the servo's full range of motion."
    },
    {
      "type": "code",
      "title": "Position Control Examples",
      "language": "java",
      "content": "// Basic position control\nservo.setPosition(0.0);   // Full counterclockwise\nservo.setPosition(0.5);   // Middle position\nservo.setPosition(1.0);   // Full clockwise\n\n// Position control with variables\ndouble position = 0.75;\nservo.setPosition(position);\n\n// Conditional position control\nif (gamepad1.a) {\n    servo.setPosition(0.0); // Move to position 0\n} else if (gamepad1.b) {\n    servo.setPosition(1.0); // Move to position 1\n} else if (gamepad1.x) {\n    servo.setPosition(0.5); // Move to middle\n}\n\n// Gradual position changes\npublic void moveServoGradually(Servo servo, double targetPosition, double stepSize) {\n    double currentPosition = servo.getPosition();\n    \n    if (currentPosition < targetPosition) {\n        servo.setPosition(Math.min(currentPosition + stepSize, targetPosition));\n    } else if (currentPosition > targetPosition) {\n        servo.setPosition(Math.max(currentPosition - stepSize, targetPosition));\n    }\n}\n\n// Smooth servo movement\npublic void smoothMoveToPosition(Servo servo, double targetPosition) {\n    double currentPosition = servo.getPosition();\n    double stepSize = 0.01; // Small steps for smooth movement\n    \n    while (Math.abs(currentPosition - targetPosition) > stepSize) {\n        moveServoGradually(servo, targetPosition, stepSize);\n        currentPosition = servo.getPosition();\n        sleep(50); // Small delay for smooth movement\n    }\n    \n    servo.setPosition(targetPosition); // Final position\n}"
    },
    {
      "type": "text",
      "title": "Continuous Rotation Servos",
      "content": "Continuous rotation servos behave differently from standard servos. They use position commands to control speed and direction rather than absolute position."
    },
    {
      "type": "list",
      "title": "Continuous Servo Control",
      "items": [
        "<strong>Position 0.0:</strong> Full speed counterclockwise",
        "<strong>Position 0.5:</strong> Stop (no movement)",
        "<strong>Position 1.0:</strong> Full speed clockwise",
        "<strong>Intermediate values:</strong> Proportional speed control"
      ]
    },
    {
      "type": "code",
      "title": "Continuous Servo Examples",
      "language": "java",
      "content": "// Continuous rotation servo control\nServo continuousServo = hardwareMap.get(Servo.class, \"continuous_servo\");\n\n// Stop the servo\ncontinuousServo.setPosition(0.5);\n\n// Full speed clockwise\ncontinuousServo.setPosition(1.0);\n\n// Full speed counterclockwise\ncontinuousServo.setPosition(0.0);\n\n// Half speed clockwise\ncontinuousServo.setPosition(0.75);\n\n// Half speed counterclockwise\ncontinuousServo.setPosition(0.25);\n\n// Variable speed control\npublic void setContinuousServoSpeed(Servo servo, double speed) {\n    // speed ranges from -1.0 (full reverse) to 1.0 (full forward)\n    double position = 0.5 + (speed * 0.5); // Convert to 0.0-1.0 range\n    position = Math.max(0.0, Math.min(1.0, position)); // Clamp to valid range\n    servo.setPosition(position);\n}\n\n// Gamepad control for continuous servo\nwhile (opModeIsActive()) {\n    double speed = gamepad1.right_stick_y; // -1.0 to 1.0\n    setContinuousServoSpeed(continuousServo, speed);\n    \n    telemetry.addData(\"Speed\", speed);\n    telemetry.addData(\"Position\", continuousServo.getPosition());\n    telemetry.update();\n}"
    },
    {
      "type": "text",
      "title": "Servo Safety and Best Practices",
      "content": "Servos require careful handling to prevent damage and ensure reliable operation. Following safety guidelines extends servo life and prevents mechanical issues."
    },
    {
      "type": "rules-box",
      "title": "Servo Safety Guidelines",
      "subtitle": "Follow these practices for reliable servo operation:",
      "items": [
        "Never force servos beyond their mechanical limits",
        "Test servos at low speeds before full operation",
        "Monitor servo temperature during extended use",
        "Use appropriate servo for the load requirements",
        "Implement position limits in software",
        "Check for mechanical binding before operation"
      ]
    },
    {
      "type": "code",
      "title": "Servo Safety Implementation",
      "language": "java",
      "content": "// Servo safety and position limiting\npublic class SafeServoController {\n    private Servo servo;\n    private double minPosition = 0.0;\n    private double maxPosition = 1.0;\n    private double currentPosition = 0.5;\n    \n    public SafeServoController(Servo servo, double minPos, double maxPos) {\n        this.servo = servo;\n        this.minPosition = minPos;\n        this.maxPosition = maxPos;\n        this.currentPosition = (minPos + maxPos) / 2.0; // Start at middle\n        servo.setPosition(currentPosition);\n    }\n    \n    public void setPosition(double position) {\n        // Limit position to safe range\n        position = Math.max(minPosition, Math.min(maxPosition, position));\n        \n        // Check for sudden large movements\n        double positionChange = Math.abs(position - currentPosition);\n        if (positionChange > 0.5) {\n            // Large movement detected, move gradually\n            moveToPositionGradually(position);\n        } else {\n            servo.setPosition(position);\n        }\n        \n        currentPosition = position;\n    }\n    \n    private void moveToPositionGradually(double targetPosition) {\n        double stepSize = 0.05; // Small steps\n        \n        while (Math.abs(currentPosition - targetPosition) > stepSize) {\n            if (currentPosition < targetPosition) {\n                currentPosition += stepSize;\n            } else {\n                currentPosition -= stepSize;\n            }\n            \n            servo.setPosition(currentPosition);\n            sleep(100); // Delay for smooth movement\n        }\n        \n        servo.setPosition(targetPosition);\n        currentPosition = targetPosition;\n    }\n}\n\n// Usage example\nSafeServoController armController = new SafeServoController(armServo, 0.1, 0.9);\narmController.setPosition(0.5); // Safe movement"
    },
    {
      "type": "text",
      "title": "Servo Applications",
      "content": "Servos are used in various robot mechanisms, each requiring different control strategies and considerations."
    },
    {
      "type": "list",
      "title": "Common Servo Applications",
      "items": [
        "<strong>Arms and Lifts:</strong> Position control for raising/lowering mechanisms",
        "<strong>Claws and Grippers:</strong> Opening and closing for object manipulation",
        "<strong>Flaps and Doors:</strong> Binary position control for game elements",
        "<strong>Conveyors:</strong> Continuous rotation for material transport",
        "<strong>Steering:</strong> Precise angle control for directional mechanisms"
      ]
    },
    {
      "type": "code",
      "title": "Servo Application Examples",
      "language": "java",
      "content": "// Arm control example\npublic class ArmController {\n    private Servo armServo;\n    private final double ARM_UP = 0.0;\n    private final double ARM_DOWN = 1.0;\n    private final double ARM_MIDDLE = 0.5;\n    \n    public ArmController(Servo servo) {\n        this.armServo = servo;\n        armServo.setPosition(ARM_MIDDLE); // Start in middle\n    }\n    \n    public void moveUp() {\n        armServo.setPosition(ARM_UP);\n    }\n    \n    public void moveDown() {\n        armServo.setPosition(ARM_DOWN);\n    }\n    \n    public void moveToPosition(double position) {\n        position = Math.max(0.0, Math.min(1.0, position));\n        armServo.setPosition(position);\n    }\n}\n\n// Claw control example\npublic class ClawController {\n    private Servo clawServo;\n    private final double CLAW_OPEN = 1.0;\n    private final double CLAW_CLOSED = 0.0;\n    private boolean isOpen = false;\n    \n    public ClawController(Servo servo) {\n        this.clawServo = servo;\n        clawServo.setPosition(CLAW_CLOSED); // Start closed\n    }\n    \n    public void open() {\n        clawServo.setPosition(CLAW_OPEN);\n        isOpen = true;\n    }\n    \n    public void close() {\n        clawServo.setPosition(CLAW_CLOSED);\n        isOpen = false;\n    }\n    \n    public void toggle() {\n        if (isOpen) {\n            close();\n        } else {\n            open();\n        }\n    }\n}\n\n// Usage in OpMode\nArmController arm = new ArmController(armServo);\nClawController claw = new ClawController(clawServo);\n\n// Gamepad control\nif (gamepad1.a) {\n    arm.moveUp();\n} else if (gamepad1.b) {\n    arm.moveDown();\n}\n\nif (gamepad1.x) {\n    claw.toggle();\n}"
    },
    {
      "type": "text",
      "title": "Servo Troubleshooting",
      "content": "Common servo issues and their solutions help teams quickly resolve problems during competitions and practice."
    },
    {
      "type": "rules-box",
      "title": "Common Servo Issues",
      "subtitle": "Troubleshooting guide:",
      "items": [
        "Servo doesn't move: Check wiring, configuration, and power",
        "Servo moves in wrong direction: Change setDirection() or adjust position values",
        "Servo jitters or vibrates: Check for mechanical binding or power issues",
        "Servo gets hot: Reduce load or check for mechanical resistance",
        "Inconsistent positioning: Calibrate servo positions and check for wear"
      ]
    },
    {
      "type": "code",
      "title": "Servo Diagnostics",
      "language": "java",
      "content": "// Servo diagnostic method\npublic void diagnoseServo(Servo servo, String servoName) {\n    telemetry.addData(servoName + \" Position\", servo.getPosition());\n    telemetry.addData(servoName + \" Direction\", servo.getDirection());\n    telemetry.addData(servoName + \" Port\", servo.getPortNumber());\n    \n    // Test servo functionality\n    if (gamepad1.a) {\n        servo.setPosition(0.0);\n        telemetry.addData(\"Action\", \"Move to position 0.0\");\n    }\n    \n    if (gamepad1.b) {\n        servo.setPosition(1.0);\n        telemetry.addData(\"Action\", \"Move to position 1.0\");\n    }\n    \n    if (gamepad1.x) {\n        servo.setPosition(0.5);\n        telemetry.addData(\"Action\", \"Move to position 0.5\");\n    }\n}\n\n// Use in main loop\nwhile (opModeIsActive()) {\n    diagnoseServo(armServo, \"Arm Servo\");\n    diagnoseServo(clawServo, \"Claw Servo\");\n    telemetry.update();\n}"
    },
    {
      "type": "link-grid",
      "title": "Related Topics",
      "links": [
        {
          "label": "Servo Types",
          "id": "servo-types"
        },
        {
          "label": "Servo Positions",
          "id": "servo-positions"
        },
        {
          "label": "Continuous vs Non-Continuous",
          "id": "continuous-vs-noncontinuous"
        }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Servo Practice",
      "description": "Practice these exercises to master servo control:",
      "tasks": [
        "Create an OpMode that controls a servo with gamepad input",
        "Test different servo positions and verify movement",
        "Implement servo safety features and position limiting",
        "Create a claw mechanism with open/close functionality",
        "Practice continuous rotation servo speed control",
        "Test servo behavior with different loads",
        "Create a multi-servo mechanism (arm with claw)"
      ],
      "content": "// Practice Exercise: Servo Control\n// Create an OpMode that demonstrates servo functionality\n// Include safety features and telemetry display\n// Test different servo types and applications\n\n@TeleOp(name=\"Servo Test\", group=\"Testing\")\npublic class ServoTestOpMode extends LinearOpMode {\n    \n    private Servo testServo;\n    private double currentPosition = 0.5;\n    \n    @Override\n    public void runOpMode() {\n        // Initialize servo\n        testServo = hardwareMap.get(Servo.class, \"test_servo\");\n        testServo.setDirection(Servo.Direction.FORWARD);\n        testServo.setPosition(currentPosition);\n        \n        waitForStart();\n        \n        while (opModeIsActive()) {\n            // Control servo with gamepad\n            if (gamepad1.a) {\n                currentPosition = 0.0; // Full counterclockwise\n            } else if (gamepad1.b) {\n                currentPosition = 1.0; // Full clockwise\n            } else if (gamepad1.x) {\n                currentPosition = 0.5; // Middle\n            }\n            \n            // Gradual position changes with joystick\n            double joystickInput = gamepad1.right_stick_y;\n            if (Math.abs(joystickInput) > 0.1) {\n                currentPosition += joystickInput * 0.01; // Small increments\n                currentPosition = Math.max(0.0, Math.min(1.0, currentPosition));\n            }\n            \n            testServo.setPosition(currentPosition);\n            \n            // Display telemetry\n            telemetry.addData(\"Servo Position\", currentPosition);\n            telemetry.addData(\"Joystick Input\", joystickInput);\n            telemetry.update();\n        }\n    }\n}"
    }
  ]
} 
