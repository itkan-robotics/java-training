{
  "title": "Advanced Servo Control",
  "sections": [
    {
      "type": "text",
      "title": "Servo Position Range and Units",
      "content": "Servo positions in FTC are set using values from 0.0 to 1.0. 0.0 usually means one end of the servo's range (e.g., 0 degrees), and 1.0 means the other end (e.g., 180 degrees). The actual angle may vary by servo model."
    },
    {
      "type": "code",
      "title": "Setting and Reading Servo Position",
      "content": "This code shows how to set a servo to a specific position and read its current position.",
      "code": "myServo.setPosition(0.25); // Move to 25% of range\ndouble pos = myServo.getPosition(); // Read current position\ntelemetry.addData(\"Servo Position\", pos);\ntelemetry.update();"
    },
    {
      "type": "text",
      "title": "Calibrating Servo Positions for Mechanisms",
      "content": "To ensure your mechanism moves correctly, you may need to calibrate the servo's range. Use small increments and telemetry to find the correct values for your application."
    },
    {
      "type": "code",
      "title": "Incremental Calibration Example",
      "content": "This code lets you adjust the servo position in small steps using gamepad buttons, and see the result in telemetry.",
      "code": "double position = 0.5;\nwhile (opModeIsActive()) {\n    if (gamepad1.dpad_up) {\n        position += 0.01;\n    } else if (gamepad1.dpad_down) {\n        position -= 0.01;\n    }\n    position = Math.max(0.0, Math.min(1.0, position));\n    myServo.setPosition(position);\n    telemetry.addData(\"Servo Position\", position);\n    telemetry.update();\n}"
    },
    {
      "type": "text",
      "title": "Declaring and Initializing Multiple Servos",
      "content": "Many FTC mechanisms require more than one servo. You can declare and initialize multiple servos in your OpMode by giving each a unique name in the hardware map."
    },
    {
      "type": "code",
      "title": "Example: Initializing Two Servos",
      "content": "This code shows how to declare and initialize two servos in your OpMode.",
      "code": "private Servo leftClaw;\nprivate Servo rightClaw;\n\n@Override\npublic void runOpMode() {\n    leftClaw = hardwareMap.get(Servo.class, \"leftClaw\");\n    rightClaw = hardwareMap.get(Servo.class, \"rightClaw\");\n    // ...\n}"
    },
    {
      "type": "text",
      "title": "Coordinating Servo Movements",
      "content": "To move two servos together (e.g., for a claw), set their positions in the same loop. You can use variables or constants to keep their movement synchronized."
    },
    {
      "type": "code",
      "title": "Synchronized Claw Example",
      "content": "This code opens and closes a claw by moving two servos in opposite directions.",
      "code": "double openPosition = 0.8;\ndouble closedPosition = 0.2;\n\nif (gamepad1.a) {\n    leftClaw.setPosition(openPosition);\n    rightClaw.setPosition(1.0 - openPosition);\n} else if (gamepad1.b) {\n    leftClaw.setPosition(closedPosition);\n    rightClaw.setPosition(1.0 - closedPosition);\n}"
    },
    {
      "type": "text",
      "title": "Why Gradual Movement?",
      "content": "Moving a servo instantly between positions can cause jerky motion or damage mechanisms. Gradual movement (servo ramping) is smoother and safer for your robot."
    },
    {
      "type": "text",
      "title": "Implementing Gradual Movement in Code",
      "content": "You can move a servo gradually by incrementally changing its position in small steps over time. This is useful for arms, claws, or any mechanism that needs smooth motion."
    },
    {
      "type": "code",
      "title": "Gradual Movement Example",
      "content": "This code moves a servo from its current position to a target position in small increments, updating every 20ms.",
      "code": "double currentPos = myServo.getPosition();\ndouble targetPos = 1.0; // Target position\ndouble step = 0.01;\n\nwhile (Math.abs(currentPos - targetPos) > 0.01 && opModeIsActive()) {\n    if (currentPos < targetPos) {\n        currentPos += step;\n    } else {\n        currentPos -= step;\n    }\n    currentPos = Math.max(0.0, Math.min(1.0, currentPos));\n    myServo.setPosition(currentPos);\n    telemetry.addData(\"Servo Position\", currentPos);\n    telemetry.update();\n    sleep(20); // Wait 20ms between steps\n}"
    },
    {
      "type": "text",
      "title": "Synchronizing and Safely Controlling Multiple Servos",
      "content": "When controlling multiple servos—such as for a claw or arm mechanism—it's important to update each servo's position within the same loop to keep their movements synchronized. Use separate variables for each servo's position and adjust them incrementally for smooth, coordinated motion. Always use named constants for key positions (like open and closed) to make your code easier to read and maintain.<br><br>To prevent mechanical binding or damage, only command your servos to positions that are safe for your specific mechanism. Avoid values outside the servo's supported range (usually 0.0 to 1.0), and test your mechanism carefully. If you need to move several servos at once, be aware that this can cause voltage drops—especially if your battery is low. If possible, stagger servo movements or monitor battery voltage using telemetry to avoid power issues.<br><br>For smooth movement, use short delays (10-20ms) between position updates, and always check <code>opModeIsActive()</code> in your loops to allow for safe interruption. Avoid long blocking delays, as these can make your robot unresponsive.<br><br>Debugging is much easier if you use telemetry to monitor servo positions in real time. This lets you verify that your code is working as expected and helps you quickly spot issues. If a servo isn't moving smoothly, check your step size and delay values—too large a step or too short a delay can cause jerky motion. If a servo isn't moving at all, double-check your hardware map names, wiring, and code logic, and use telemetry to confirm the values being sent to each servo.<br><br>By following these best practices, you can achieve reliable, safe, and smooth control of multiple servos in your FTC robot."
    },
    {
      "type": "exercise-box",
      "title": "Practice: Advanced Servo Control",
      "description": "Create an OpMode that demonstrates multiple servo control with gradual movement. Use two servos for a claw mechanism that opens and closes smoothly.",
      "tasks": [
        "Initialize two servos for a claw mechanism.",
        "Implement gradual movement for opening and closing the claw.",
        "Add telemetry to monitor both servo positions.",
        "Include safety checks to prevent servo damage."
      ],
      "answers": [
        {
          "task": "Initialize two servos for a claw mechanism",
          "content": "// Declare servo variables\nprivate Servo leftClaw, rightClaw;\n\n// Initialize servos in runOpMode()\nleftClaw = hardwareMap.get(Servo.class, \"left_claw\");\nrightClaw = hardwareMap.get(Servo.class, \"right_claw\");\n\n// Set initial positions (claw closed)\nleftClaw.setPosition(0.2);\nrightClaw.setPosition(0.8);\n\n// Show initialization status\ntelemetry.addData(\"Status\", \"Claw servos initialized\");\ntelemetry.update();"
        },
        {
          "task": "Implement gradual movement for opening and closing the claw",
          "content": "// Define claw positions\nfinal double CLAW_CLOSED_LEFT = 0.2;\nfinal double CLAW_CLOSED_RIGHT = 0.8;\nfinal double CLAW_OPEN_LEFT = 0.8;\nfinal double CLAW_OPEN_RIGHT = 0.2;\n\n// Gradual movement method\nprivate void moveClawGradually(double targetLeft, double targetRight) {\n    double currentLeft = leftClaw.getPosition();\n    double currentRight = rightClaw.getPosition();\n    double step = 0.02; // Small step size for smooth movement\n    \n    while ((Math.abs(currentLeft - targetLeft) > 0.01 || \n            Math.abs(currentRight - targetRight) > 0.01) && \n           opModeIsActive()) {\n        \n        // Move left servo gradually\n        if (currentLeft < targetLeft) {\n            currentLeft += step;\n        } else if (currentLeft > targetLeft) {\n            currentLeft -= step;\n        }\n        \n        // Move right servo gradually\n        if (currentRight < targetRight) {\n            currentRight += step;\n        } else if (currentRight > targetRight) {\n            currentRight -= step;\n        }\n        \n        // Set servo positions\n        leftClaw.setPosition(currentLeft);\n        rightClaw.setPosition(currentRight);\n        \n        sleep(20); // 20ms delay for smooth movement\n    }\n}"
        },
        {
          "task": "Add telemetry to monitor both servo positions",
          "content": "// Display servo information\ntelemetry.addData(\"Left Claw Position\", \"%.2f\", leftClaw.getPosition());\ntelemetry.addData(\"Right Claw Position\", \"%.2f\", rightClaw.getPosition());\ntelemetry.addData(\"Claw Status\", getClawStatus());\ntelemetry.addData(\"Instructions\", \"A: Open Claw, B: Close Claw\");\ntelemetry.update();\n\n// Helper method to describe claw status\nprivate String getClawStatus() {\n    double leftPos = leftClaw.getPosition();\n    double rightPos = rightClaw.getPosition();\n    \n    if (leftPos < 0.3 && rightPos > 0.7) {\n        return \"Closed\";\n    } else if (leftPos > 0.7 && rightPos < 0.3) {\n        return \"Open\";\n    } else {\n        return \"Moving\";\n    }\n}"
        },
        {
          "task": "Include safety checks to prevent servo damage",
          "content": "// Safety method to ensure servo positions are within safe limits\nprivate boolean isSafePosition(double position) {\n    return position >= 0.0 && position <= 1.0;\n}\n\n// Safe servo setting method\nprivate void setServoSafely(Servo servo, double position) {\n    if (isSafePosition(position)) {\n        servo.setPosition(position);\n    } else {\n        telemetry.addData(\"Warning\", \"Invalid servo position: \" + position);\n        telemetry.update();\n    }\n}\n\n// Enhanced gradual movement with safety checks\nprivate void moveClawGradually(double targetLeft, double targetRight) {\n    if (!isSafePosition(targetLeft) || !isSafePosition(targetRight)) {\n        telemetry.addData(\"Error\", \"Target position out of safe range\");\n        telemetry.update();\n        return;\n    }\n    \n    // ... rest of gradual movement code with safety checks\n}"
        },
        {
          "task": "Combine all tasks into one complete advanced servo control OpMode",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.Servo;\n\n@TeleOp(name = \"AdvancedServoControl\")\npublic class AdvancedServoControl extends LinearOpMode {\n    private Servo leftClaw, rightClaw;\n    \n    // Claw position constants\n    final double CLAW_CLOSED_LEFT = 0.2;\n    final double CLAW_CLOSED_RIGHT = 0.8;\n    final double CLAW_OPEN_LEFT = 0.8;\n    final double CLAW_OPEN_RIGHT = 0.2;\n    \n    // Button state tracking\n    private boolean aWasPressed = false;\n    private boolean bWasPressed = false;\n\n    @Override\n    public void runOpMode() {\n        // Initialize servos\n        leftClaw = hardwareMap.get(Servo.class, \"left_claw\");\n        rightClaw = hardwareMap.get(Servo.class, \"right_claw\");\n        \n        // Set initial positions (claw closed)\n        setServoSafely(leftClaw, CLAW_CLOSED_LEFT);\n        setServoSafely(rightClaw, CLAW_CLOSED_RIGHT);\n        \n        // Show initialization status\n        telemetry.addData(\"Status\", \"Advanced Servo Control Ready\");\n        telemetry.addData(\"Instructions\", \"A: Open Claw, B: Close Claw\");\n        telemetry.update();\n        \n        waitForStart();\n        \n        while (opModeIsActive()) {\n            // Check for button presses\n            if (gamepad1.a && !aWasPressed) {\n                moveClawGradually(CLAW_OPEN_LEFT, CLAW_OPEN_RIGHT);\n                aWasPressed = true;\n            } else if (!gamepad1.a) {\n                aWasPressed = false;\n            }\n            \n            if (gamepad1.b && !bWasPressed) {\n                moveClawGradually(CLAW_CLOSED_LEFT, CLAW_CLOSED_RIGHT);\n                bWasPressed = true;\n            } else if (!gamepad1.b) {\n                bWasPressed = false;\n            }\n            \n            // Display telemetry\n            telemetry.addData(\"Left Claw Position\", \"%.2f\", leftClaw.getPosition());\n            telemetry.addData(\"Right Claw Position\", \"%.2f\", rightClaw.getPosition());\n            telemetry.addData(\"Claw Status\", getClawStatus());\n            telemetry.addData(\"Status\", \"Advanced Servo Control Active\");\n            telemetry.update();\n        }\n    }\n    \n    // Gradual movement method\n    private void moveClawGradually(double targetLeft, double targetRight) {\n        if (!isSafePosition(targetLeft) || !isSafePosition(targetRight)) {\n            telemetry.addData(\"Error\", \"Target position out of safe range\");\n            telemetry.update();\n            return;\n        }\n        \n        double currentLeft = leftClaw.getPosition();\n        double currentRight = rightClaw.getPosition();\n        double step = 0.02;\n        \n        while ((Math.abs(currentLeft - targetLeft) > 0.01 || \n                Math.abs(currentRight - targetRight) > 0.01) && \n               opModeIsActive()) {\n            \n            // Move left servo gradually\n            if (currentLeft < targetLeft) {\n                currentLeft += step;\n            } else if (currentLeft > targetLeft) {\n                currentLeft -= step;\n            }\n            \n            // Move right servo gradually\n            if (currentRight < targetRight) {\n                currentRight += step;\n            } else if (currentRight > targetRight) {\n                currentRight -= step;\n            }\n            \n            // Set servo positions safely\n            setServoSafely(leftClaw, currentLeft);\n            setServoSafely(rightClaw, currentRight);\n            \n            sleep(20);\n        }\n    }\n    \n    // Safety check method\n    private boolean isSafePosition(double position) {\n        return position >= 0.0 && position <= 1.0;\n    }\n    \n    // Safe servo setting method\n    private void setServoSafely(Servo servo, double position) {\n        if (isSafePosition(position)) {\n            servo.setPosition(position);\n        } else {\n            telemetry.addData(\"Warning\", \"Invalid servo position: \" + position);\n            telemetry.update();\n        }\n    }\n    \n    // Helper method to describe claw status\n    private String getClawStatus() {\n        double leftPos = leftClaw.getPosition();\n        double rightPos = rightClaw.getPosition();\n        \n        if (leftPos < 0.3 && rightPos > 0.7) {\n            return \"Closed\";\n        } else if (leftPos > 0.7 && rightPos < 0.3) {\n            return \"Open\";\n        } else {\n            return \"Moving\";\n        }\n    }\n}"
        }
      ]
    }
  ]
} 