{
  "title": "Introduction to Servos in FTC",
  "sections": [
    {
      "type": "text",
      "title": "What is a Servo?",
      "content": "A servo is a special type of motor designed for precise, controlled movement over a limited range. In FTC, servos are used for mechanisms like arms, claws, and sensors that need to move to specific positions and hold them. Unlike DC motors, servos are not used for continuous rotation (unless they are a special type called continuous rotation servos)."
    },
    {
      "type": "text",
      "title": "Types of Servos Used in FTC",
      "content": "FTC robots use two main types of servos: standard (positional) and continuous rotation. Standard servos move to a specific position and hold it, while continuous rotation servos spin like a motor. Choosing the right type is important for your mechanism's function."
    },
    {
      "type": "text",
      "title": "How Servos are Controlled in Code",
      "content": "Servos are controlled in code by setting their position (for standard servos) or power (for continuous rotation servos). The position is a value between 0.0 and 1.0, representing the servo's range of motion. To determine the angular range of motion for your servo, make sure to refer to the manufacturer's documentation. You must initialize the servo in your OpMode before using it."
    },
    {
      "type": "code",
      "title": "Basic Servo Initialization and Use",
      "content": "This example shows how to declare, initialize, and set the position of a standard servo in an FTC OpMode.",
      "code": "import com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.hardware.Servo;\n\n@TeleOp\npublic class ServoExample extends LinearOpMode {\n    private Servo myServo;\n\n    @Override\n    public void runOpMode() {\n        myServo = hardwareMap.get(Servo.class, \"myServo\");\n        telemetry.addData(\"Status\", \"Initialized\");\n        telemetry.update();\n        waitForStart();\n        while (opModeIsActive()) {\n            myServo.setPosition(0.5); // Move to middle position\n            telemetry.addData(\"Servo Position\", myServo.getPosition());\n            telemetry.update();\n        }\n    }\n}"
    },
    {
      "type": "list",
      "title": "Further Reading and References",
      "items": [
        "<a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/tutorial_specific/onbot_java/controlling_a_servo/Controlling-a-Servo-%28OnBot-Java%29.html\" target=\"_blank\">FTC Docs: Controlling a Servo (OnBot Java)</a>",
        "<a href=\"https://gm0.org/en/latest/docs/power-and-electronics/servo-guide/usage-tips.html\" target=\"_blank\">gm0: Servo Usage Tips</a>"
      ]
    },
    {
      "type": "exercise-box",
      "title": "Practice: D-Pad Servo Control",
      "description": "Create an OpMode that allows the user to move a servo to four different positions using the D-pad buttons on the gamepad. Use the up, down, left, and right D-pad buttons to control different servo positions.",
      "tasks": [
        "Initialize a servo in your OpMode.",
        "Set up D-pad button detection for four different positions.",
        "Move the servo to different positions based on D-pad input.",
        "Display the current servo position with telemetry."
      ],
      "answers": [
        {
          "task": "Initialize a servo in your OpMode",
          "content": "// Declare servo as a private member variable\nprivate Servo controlServo;\n\n// In your runOpMode() method, initialize the servo\ncontrolServo = hardwareMap.get(Servo.class, \"control_servo\");\n\n// Set an initial position (optional)\ncontrolServo.setPosition(0.5); // Middle position\n\n// Show initialization status\ntelemetry.addData(\"Status\", \"Servo initialized\");\ntelemetry.update();"
        },
        {
          "task": "Set up D-pad button detection for four different positions",
          "content": "// In your main loop, check for D-pad button presses\nwhile (opModeIsActive()) {\n    // Check each D-pad button\n    if (gamepad1.dpad_up) {\n        // Move to position 1 (e.g., 0.0 - fully closed)\n        controlServo.setPosition(0.0);\n    } else if (gamepad1.dpad_down) {\n        // Move to position 2 (e.g., 0.33 - partially open)\n        controlServo.setPosition(0.33);\n    } else if (gamepad1.dpad_left) {\n        // Move to position 3 (e.g., 0.66 - mostly open)\n        controlServo.setPosition(0.66);\n    } else if (gamepad1.dpad_right) {\n        // Move to position 4 (e.g., 1.0 - fully open)\n        controlServo.setPosition(1.0);\n    }\n    \n    // Continue with telemetry and other logic...\n}"
        },
        {
          "task": "Move the servo to different positions based on D-pad input",
          "content": "// Enhanced D-pad control with button state tracking\nboolean dpadUpPressed = false;\nboolean dpadDownPressed = false;\nboolean dpadLeftPressed = false;\nboolean dpadRightPressed = false;\n\nwhile (opModeIsActive()) {\n    // Check for button press (not hold)\n    if (gamepad1.dpad_up && !dpadUpPressed) {\n        controlServo.setPosition(0.0);\n        dpadUpPressed = true;\n    } else if (!gamepad1.dpad_up) {\n        dpadUpPressed = false;\n    }\n    \n    if (gamepad1.dpad_down && !dpadDownPressed) {\n        controlServo.setPosition(0.33);\n        dpadDownPressed = true;\n    } else if (!gamepad1.dpad_down) {\n        dpadDownPressed = false;\n    }\n    \n    if (gamepad1.dpad_left && !dpadLeftPressed) {\n        controlServo.setPosition(0.66);\n        dpadLeftPressed = true;\n    } else if (!gamepad1.dpad_left) {\n        dpadLeftPressed = false;\n    }\n    \n    if (gamepad1.dpad_right && !dpadRightPressed) {\n        controlServo.setPosition(1.0);\n        dpadRightPressed = true;\n    } else if (!gamepad1.dpad_right) {\n        dpadRightPressed = false;\n    }\n}"
        },
        {
          "task": "Display the current servo position with telemetry",
          "content": "// Display servo information on Driver Station\ntelemetry.addData(\"Servo Position\", \"%.2f\", controlServo.getPosition());\ntelemetry.addData(\"D-Pad Controls\", \"Up:0.0 Down:0.33 Left:0.66 Right:1.0\");\ntelemetry.addData(\"Status\", \"D-Pad Servo Control Active\");\ntelemetry.update();\n\n// You can also add more detailed telemetry:\n// telemetry.addData(\"Position Description\", getPositionDescription(controlServo.getPosition()));\n// telemetry.addData(\"Servo Ready\", controlServo.getPosition() == targetPosition ? \"Yes\" : \"No\");"
        },
        {
          "task": "Combine all tasks into one complete D-pad servo control OpMode",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.Servo;\n\n@TeleOp(name = \"DpadServoControl\")\npublic class DpadServoControl extends LinearOpMode {\n    private Servo controlServo;\n    \n    // Button state tracking variables\n    private boolean dpadUpPressed = false;\n    private boolean dpadDownPressed = false;\n    private boolean dpadLeftPressed = false;\n    private boolean dpadRightPressed = false;\n\n    @Override\n    public void runOpMode() {\n        // Task 1: Initialize a servo in your OpMode\n        controlServo = hardwareMap.get(Servo.class, \"control_servo\");\n        \n        // Set initial position\n        controlServo.setPosition(0.5);\n        \n        // Show initialization status\n        telemetry.addData(\"Status\", \"D-Pad Servo Control Ready\");\n        telemetry.addData(\"Instructions\", \"Use D-pad to control servo positions\");\n        telemetry.addData(\"D-Pad Up\", \"Position 0.0 (Closed)\");\n        telemetry.addData(\"D-Pad Down\", \"Position 0.33 (Partially Open)\");\n        telemetry.addData(\"D-Pad Left\", \"Position 0.66 (Mostly Open)\");\n        telemetry.addData(\"D-Pad Right\", \"Position 1.0 (Fully Open)\");\n        telemetry.update();\n        \n        waitForStart();\n        \n        while (opModeIsActive()) {\n            // Task 2 & 3: Set up D-pad button detection and move servo\n            if (gamepad1.dpad_up && !dpadUpPressed) {\n                controlServo.setPosition(0.0);\n                dpadUpPressed = true;\n            } else if (!gamepad1.dpad_up) {\n                dpadUpPressed = false;\n            }\n            \n            if (gamepad1.dpad_down && !dpadDownPressed) {\n                controlServo.setPosition(0.33);\n                dpadDownPressed = true;\n            } else if (!gamepad1.dpad_down) {\n                dpadDownPressed = false;\n            }\n            \n            if (gamepad1.dpad_left && !dpadLeftPressed) {\n                controlServo.setPosition(0.66);\n                dpadLeftPressed = true;\n            } else if (!gamepad1.dpad_left) {\n                dpadLeftPressed = false;\n            }\n            \n            if (gamepad1.dpad_right && !dpadRightPressed) {\n                controlServo.setPosition(1.0);\n                dpadRightPressed = true;\n            } else if (!gamepad1.dpad_right) {\n                dpadRightPressed = false;\n            }\n            \n            // Task 4: Display the current servo position with telemetry\n            telemetry.addData(\"Current Position\", \"%.2f\", controlServo.getPosition());\n            telemetry.addData(\"Position Description\", getPositionDescription(controlServo.getPosition()));\n            telemetry.addData(\"D-Pad Status\", \"Up:%b Down:%b Left:%b Right:%b\", \n                dpadUpPressed, dpadDownPressed, dpadLeftPressed, dpadRightPressed);\n            telemetry.addData(\"Status\", \"D-Pad Servo Control Active\");\n            telemetry.update();\n        }\n    }\n    \n    // Helper method to describe servo positions\n    private String getPositionDescription(double position) {\n        if (position == 0.0) return \"Fully Closed\";\n        else if (position == 0.33) return \"Partially Open\";\n        else if (position == 0.66) return \"Mostly Open\";\n        else if (position == 1.0) return \"Fully Open\";\n        else return \"Custom Position\";\n    }\n}"
        }
      ]
    }
  ]
}
