{
  "type": "lesson",
  "title": "Servo Positions",
  "content": [
    {
      "type": "text",
      "title": "Understanding Servo Positions",
      "content": "<p>Servo position control is essential for precise mechanism movement in FTC robots. Servos are commanded to move to a position between 0.0 (minimum) and 1.0 (maximum), with intermediate values for partial movement.</p><p>For more, see <a href='https://gm0.org/en/latest/docs/software/servos/index.html' target='_blank'>gm0: Servos</a> and <a href='https://docs.revrobotics.com/duo-control/programming/servo-control' target='_blank'>REV Robotics: Servo Control</a>.</p>"
    },
    {
      "type": "rules-box",
      "title": "Servo Position Basics",
      "subtitle": "Key concepts:",
      "items": [
        "Position value ranges from 0.0 (min) to 1.0 (max)",
        "Intermediate values allow partial movement",
        "Position is relative to servo's physical range",
        "Some servos may not reach full 0.0 or 1.0 due to mechanical limits",
        "Test and calibrate positions for your mechanism"
      ]
    },
    {
      "type": "code",
      "title": "Setting Servo Positions",
      "language": "java",
      "content": "// Set servo to specific positions\nServo armServo = hardwareMap.get(Servo.class, \"arm_servo\");\narmServo.setPosition(0.0); // Minimum\narmServo.setPosition(0.5); // Middle\narmServo.setPosition(1.0); // Maximum\n// Use gamepad to control positions\nif (gamepad1.a) {\n    armServo.setPosition(1.0);\n} else if (gamepad1.b) {\n    armServo.setPosition(0.0);\n} else if (gamepad1.x) {\n    armServo.setPosition(0.5);\n}"
    },
    {
      "type": "text",
      "title": "Calibrating Servo Positions",
      "content": "<p>Calibration ensures that servo positions correspond to the desired physical locations. Always test and adjust position values for your specific mechanism. See <a href='https://ftc-docs.firstinspires.org/en/latest/programming_resources/ftc_sdk/servo.html' target='_blank'>FTC Docs: Servo Programming</a>.</p>"
    },
    {
      "type": "list",
      "title": "Calibration Steps",
      "items": [
        "Move servo to 0.0 and check physical position",
        "Move servo to 1.0 and check physical position",
        "Test intermediate positions (e.g., 0.25, 0.5, 0.75)",
        "Adjust code values to match desired mechanism movement",
        "Document calibrated values for future reference"
      ]
    },
    {
      "type": "code",
      "title": "Calibration Example",
      "language": "java",
      "content": "// Calibrate servo positions\npublic void calibrateServo(Servo servo) {\n    double[] testPositions = {0.0, 0.25, 0.5, 0.75, 1.0};\n    for (double pos : testPositions) {\n        servo.setPosition(pos);\n        sleep(1000); // Wait for movement\n        telemetry.addData(\"Position\", pos);\n        telemetry.update();\n    }\n}\n// Use in OpMode\ncalibrateServo(armServo);"
    },
    {
      "type": "text",
      "title": "Servo Position Safety",
      "content": "<p>Always limit servo positions to the safe range (0.0 to 1.0) and avoid forcing the servo against mechanical stops. See <a href='https://docs.revrobotics.com/duo-control/programming/servo-control#servo-safety' target='_blank'>REV Robotics: Servo Safety</a>.</p>"
    },
    {
      "type": "rules-box",
      "title": "Safety Guidelines",
      "subtitle": "Follow these practices for safe servo use:",
      "items": [
        "Never force a servo beyond its range (0.0 to 1.0)",
        "Test servo movement before attaching to mechanisms",
        "Use appropriate mounting hardware",
        "Monitor servo temperature during extended use",
        "Implement limits in code to prevent overdriving"
      ]
    },
    {
      "type": "link-grid",
      "title": "Related Topics",
      "links": [
        { "label": "Intro to Servos", "id": "intro-to-servos" },
        { "label": "Continuous vs Noncontinuous Servos", "id": "continuous-vs-noncontinuous" },
        { "label": "Servo Types", "id": "servo-types" }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Servo Position Practice",
      "description": "Practice these exercises to master servo position control:",
      "tasks": [
        "Create an OpMode that moves a servo to different positions",
        "Test and calibrate servo range for your mechanism",
        "Implement safe position limiting in code",
        "Attach a servo to a mechanism and test movement",
        "Practice troubleshooting common servo issues",
        "Test servo operation with different loads",
        "Document calibrated position values"
      ],
      "content": "// Practice Exercise: Servo Position Control\n// Create an OpMode that tests servo positions and calibration\n// Include safety features and telemetry\n// Test different positions and loads\n\n@TeleOp(name=\"Servo Position Test\", group=\"Testing\")\npublic class ServoPositionTestOpMode extends LinearOpMode {\n    private Servo testServo;\n    @Override\n    public void runOpMode() {\n        testServo = hardwareMap.get(Servo.class, \"test_servo\");\n        waitForStart();\n        while (opModeIsActive()) {\n            if (gamepad1.a) {\n                testServo.setPosition(1.0);\n            } else if (gamepad1.b) {\n                testServo.setPosition(0.0);\n            } else if (gamepad1.x) {\n                testServo.setPosition(0.5);\n            }\n            telemetry.addData(\"Servo Position\", testServo.getPosition());\n            telemetry.update();\n        }\n    }"
    }
  ]
} 
