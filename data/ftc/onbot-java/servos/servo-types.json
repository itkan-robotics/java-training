{
  "title": "Servo Types",
  "sections": [
    {
      "type": "text",
      "title": "Introduction to Servo Types",
      "content": "FTC teams have access to various servo types, each designed for specific applications and performance requirements. Understanding the differences between servo types helps teams choose the right servo for their robot's needs and optimize performance."
    },
    {
      "type": "rules-box",
      "title": "Servo Selection Factors",
      "subtitle": "Consider these factors when choosing servos:",
      "items": [
        "Torque requirements for your mechanism",
        "Speed requirements for your application",
        "Position accuracy and precision needs",
        "Size and weight constraints",
        "Power consumption and efficiency",
        "Cost and availability"
      ]
    },
    {
      "type": "text",
      "title": "Standard Servos",
      "content": "Standard servos are the most common type used in FTC. They provide position control over a limited range, typically 180 degrees, and are suitable for most mechanism applications."
    },
    {
      "type": "list",
      "title": "Standard Servo Characteristics",
      "items": [
        "<strong>Rotation Range:</strong> Typically 180 degrees (0.0 to 1.0 position range)",
        "<strong>Position Control:</strong> Precise positioning with built-in feedback",
        "<strong>Torque Output:</strong> 2-20 kg-cm depending on model",
        "<strong>Speed:</strong> 0.1-0.3 seconds per 60 degrees",
        "<strong>Applications:</strong> Arms, claws, flaps, mechanisms requiring precise positioning"
      ]
    },
    {
      "type": "code",
      "title": "Standard Servo Implementation",
      "language": "java",
      "content": "// Standard servo configuration and control\nServo standardServo = hardwareMap.get(Servo.class, \"standard_servo\");\n\n// Standard servo specifications\nfinal double MIN_POSITION = 0.0;  // Full counterclockwise\nfinal double MAX_POSITION = 1.0;  // Full clockwise\nfinal double MIDDLE_POSITION = 0.5; // Center position\n\n// Configure standard servo\nstandardServo.setDirection(Servo.Direction.FORWARD);\nstandardServo.setPosition(MIDDLE_POSITION); // Start at center\n\n// Position control methods\npublic void moveToPosition(Servo servo, double position) {\n    // Ensure position is within valid range\n    position = Math.max(MIN_POSITION, Math.min(MAX_POSITION, position));\n    servo.setPosition(position);\n}\n\n// Predefined positions for common applications\npublic void moveToUpPosition(Servo servo) {\n    moveToPosition(servo, 0.0);\n}\n\npublic void moveToDownPosition(Servo servo) {\n    moveToPosition(servo, 1.0);\n}\n\npublic void moveToMiddlePosition(Servo servo) {\n    moveToPosition(servo, 0.5);\n}\n\n// Gradual movement for smooth operation\npublic void moveGradually(Servo servo, double targetPosition, double stepSize) {\n    double currentPosition = servo.getPosition();\n    \n    if (currentPosition < targetPosition) {\n        double newPosition = Math.min(currentPosition + stepSize, targetPosition);\n        servo.setPosition(newPosition);\n    } else if (currentPosition > targetPosition) {\n        double newPosition = Math.max(currentPosition - stepSize, targetPosition);\n        servo.setPosition(newPosition);\n    }\n}"
    },
    {
      "type": "text",
      "title": "Continuous Rotation Servos",
      "content": "Continuous rotation servos are modified standard servos that can rotate continuously in both directions. They use position commands to control speed and direction rather than absolute position."
    },
    {
      "type": "list",
      "title": "Continuous Servo Characteristics",
      "items": [
        "<strong>Rotation Range:</strong> Full 360-degree continuous rotation",
        "<strong>Speed Control:</strong> Position commands control speed and direction",
        "<strong>Position 0.0:</strong> Full speed counterclockwise",
        "<strong>Position 0.5:</strong> Stop (no movement)",
        "<strong>Position 1.0:</strong> Full speed clockwise",
        "<strong>Applications:</strong> Conveyors, continuous mechanisms, material transport"
      ]
    },
    {
      "type": "code",
      "title": "Continuous Servo Implementation",
      "language": "java",
      "content": "// Continuous rotation servo control\nServo continuousServo = hardwareMap.get(Servo.class, \"continuous_servo\");\n\n// Continuous servo control constants\nfinal double CONTINUOUS_STOP = 0.5;\nfinal double CONTINUOUS_FULL_FORWARD = 1.0;\nfinal double CONTINUOUS_FULL_REVERSE = 0.0;\n\n// Configure continuous servo\ncontinuousServo.setDirection(Servo.Direction.FORWARD);\ncontinuousServo.setPosition(CONTINUOUS_STOP); // Start stopped\n\n// Speed control methods\npublic void setContinuousServoSpeed(Servo servo, double speed) {\n    // speed ranges from -1.0 (full reverse) to 1.0 (full forward)\n    double position = CONTINUOUS_STOP + (speed * 0.5);\n    position = Math.max(0.0, Math.min(1.0, position));\n    servo.setPosition(position);\n}\n\npublic void stopContinuousServo(Servo servo) {\n    servo.setPosition(CONTINUOUS_STOP);\n}\n\npublic void setContinuousServoForward(Servo servo, double speed) {\n    // speed ranges from 0.0 to 1.0\n    double position = CONTINUOUS_STOP + (speed * 0.5);\n    servo.setPosition(position);\n}\n\npublic void setContinuousServoReverse(Servo servo, double speed) {\n    // speed ranges from 0.0 to 1.0\n    double position = CONTINUOUS_STOP - (speed * 0.5);\n    servo.setPosition(position);\n}\n\n// Gamepad control for continuous servo\nwhile (opModeIsActive()) {\n    double speed = -gamepad1.left_stick_y; // -1.0 to 1.0\n    setContinuousServoSpeed(continuousServo, speed);\n    \n    // Display current speed\n    telemetry.addData(\"Speed\", speed);\n    telemetry.addData(\"Position\", continuousServo.getPosition());\n    telemetry.update();\n}"
    },
    {
      "type": "text",
      "title": "Digital Servos",
      "content": "Digital servos offer enhanced precision, programmability, and performance compared to analog servos. They use digital signal processing for improved control and feedback."
    },
    {
      "type": "list",
      "title": "Digital Servo Advantages",
      "items": [
        "<strong>Enhanced Precision:</strong> Better position accuracy and repeatability",
        "<strong>Programmable Parameters:</strong> Adjustable speed, acceleration, deadband",
        "<strong>Faster Response:</strong> Improved control loop performance",
        "<strong>Better Holding Torque:</strong> Maintains position more reliably",
        "<strong>Digital Communication:</strong> More sophisticated control protocols"
      ]
    },
    {
      "type": "code",
      "title": "Digital Servo Features",
      "language": "java",
      "content": "// Digital servo configuration (if supported by your servo)\nServo digitalServo = hardwareMap.get(Servo.class, \"digital_servo\");\n\n// Digital servos may support additional features\n// Note: Not all features are available through the standard FTC SDK\n\n// Enhanced position control for digital servos\npublic class DigitalServoController {\n    private Servo servo;\n    private double lastPosition = 0.5;\n    private double moveSpeed = 0.1; // Speed of movement\n    \n    public DigitalServoController(Servo servo) {\n        this.servo = servo;\n        servo.setPosition(0.5); // Start at center\n    }\n    \n    public void setPosition(double position) {\n        // Smooth movement for digital servos\n        double currentPosition = servo.getPosition();\n        double stepSize = moveSpeed;\n        \n        if (currentPosition < position) {\n            servo.setPosition(Math.min(currentPosition + stepSize, position));\n        } else if (currentPosition > position) {\n            servo.setPosition(Math.max(currentPosition - stepSize, position));\n        }\n        \n        lastPosition = position;\n    }\n    \n    public void setMoveSpeed(double speed) {\n        this.moveSpeed = Math.max(0.01, Math.min(0.5, speed));\n    }\n}\n\n// Usage example\nDigitalServoController digitalController = new DigitalServoController(digitalServo);\ndigitalController.setMoveSpeed(0.05); // Slow, precise movement\ndigitalController.setPosition(0.8);"
    },
    {
      "type": "text",
      "title": "High-Torque Servos",
      "content": "High-torque servos are designed for applications requiring significant lifting capacity or holding force. They sacrifice speed for increased torque output."
    },
    {
      "type": "list",
      "title": "High-Torque Servo Characteristics",
      "items": [
        "<strong>Increased Torque:</strong> 20+ kg-cm torque output",
        "<strong>Slower Speed:</strong> Reduced speed for higher torque",
        "<strong>Higher Power Consumption:</strong> Requires more current",
        "<strong>Larger Size:</strong> Typically bigger than standard servos",
        "<strong>Applications:</strong> Heavy lifts, arms with significant loads, mechanisms requiring high holding force"
      ]
    },
    {
      "type": "code",
      "title": "High-Torque Servo Implementation",
      "language": "java",
      "content": "// High-torque servo control with safety features\nServo highTorqueServo = hardwareMap.get(Servo.class, \"high_torque_servo\");\n\n// High-torque servo safety considerations\npublic class HighTorqueServoController {\n    private Servo servo;\n    private double minPosition = 0.0;\n    private double maxPosition = 1.0;\n    private double currentPosition = 0.5;\n    private double moveSpeed = 0.02; // Slower for high-torque servos\n    \n    public HighTorqueServoController(Servo servo, double minPos, double maxPos) {\n        this.servo = servo;\n        this.minPosition = minPos;\n        this.maxPosition = maxPos;\n        this.currentPosition = (minPos + maxPos) / 2.0;\n        servo.setPosition(currentPosition);\n    }\n    \n    public void setPosition(double position) {\n        // Limit position to safe range\n        position = Math.max(minPosition, Math.min(maxPosition, position));\n        \n        // Move gradually to prevent stalling\n        while (Math.abs(currentPosition - position) > moveSpeed) {\n            if (currentPosition < position) {\n                currentPosition += moveSpeed;\n            } else {\n                currentPosition -= moveSpeed;\n            }\n            \n            servo.setPosition(currentPosition);\n            sleep(50); // Delay for smooth movement\n        }\n        \n        servo.setPosition(position);\n        currentPosition = position;\n    }\n    \n    public void setMoveSpeed(double speed) {\n        this.moveSpeed = Math.max(0.01, Math.min(0.05, speed));\n    }\n}\n\n// Usage example\nHighTorqueServoController liftController = new HighTorqueServoController(highTorqueServo, 0.1, 0.9);\nliftController.setMoveSpeed(0.02); // Slow, safe movement\nliftController.setPosition(0.8); // Move to upper position"
    },
    {
      "type": "text",
      "title": "Micro Servos",
      "content": "Micro servos are smaller versions of standard servos, designed for space-constrained applications where size and weight are critical factors."
    },
    {
      "type": "list",
      "title": "Micro Servo Characteristics",
      "items": [
        "<strong>Small Size:</strong> Compact footprint for tight spaces",
        "<strong>Reduced Torque:</strong> Lower torque output due to smaller size",
        "<strong>Light Weight:</strong> Minimal weight impact on robot",
        "<strong>Standard Control:</strong> Same control interface as standard servos",
        "<strong>Applications:</strong> Small mechanisms, lightweight applications, space-constrained designs"
      ]
    },
    {
      "type": "code",
      "title": "Micro Servo Implementation",
      "language": "java",
      "content": "// Micro servo control with appropriate power management\nServo microServo = hardwareMap.get(Servo.class, \"micro_servo\");\n\n// Micro servo considerations\npublic class MicroServoController {\n    private Servo servo;\n    private double currentPosition = 0.5;\n    \n    public MicroServoController(Servo servo) {\n        this.servo = servo;\n        servo.setPosition(0.5); // Start at center\n    }\n    \n    public void setPosition(double position) {\n        // Micro servos may have limited torque, so move carefully\n        position = Math.max(0.0, Math.min(1.0, position));\n        \n        // Check for large position changes\n        double positionChange = Math.abs(position - currentPosition);\n        if (positionChange > 0.3) {\n            // Large movement, move gradually\n            moveToPositionGradually(position);\n        } else {\n            servo.setPosition(position);\n        }\n        \n        currentPosition = position;\n    }\n    \n    private void moveToPositionGradually(double targetPosition) {\n        double stepSize = 0.05; // Small steps for micro servos\n        \n        while (Math.abs(currentPosition - targetPosition) > stepSize) {\n            if (currentPosition < targetPosition) {\n                currentPosition += stepSize;\n            } else {\n                currentPosition -= stepSize;\n            }\n            \n            servo.setPosition(currentPosition);\n            sleep(100); // Longer delay for micro servos\n        }\n        \n        servo.setPosition(targetPosition);\n        currentPosition = targetPosition;\n    }\n}\n\n// Usage example\nMicroServoController microController = new MicroServoController(microServo);\nmicroController.setPosition(0.8); // Careful movement"
    },
    {
      "type": "text",
      "title": "Servo Selection Guide",
      "content": "Choosing the right servo type for your application requires understanding the requirements and servo characteristics."
    },
    {
      "type": "rules-box",
      "title": "Servo Selection Guidelines",
      "subtitle": "Choose servos based on application:",
      "items": [
        "Standard positioning: Standard servos for arms, claws, flaps",
        "Continuous movement: Continuous rotation servos for conveyors",
        "High precision: Digital servos for critical positioning",
        "Heavy loads: High-torque servos for lifts and heavy mechanisms",
        "Space constraints: Micro servos for compact applications"
      ]
    },
    {
      "type": "code",
      "title": "Servo Selection Helper",
      "language": "java",
      "content": "// Servo selection helper method\npublic String recommendServoType(String application, double loadWeight, boolean needPrecision, boolean spaceConstrained) {\n    if (spaceConstrained) {\n        return \"Micro Servo\";\n    }\n    \n    if (needPrecision) {\n        return \"Digital Servo\";\n    }\n    \n    switch (application) {\n        case \"continuous\":\n            return \"Continuous Rotation Servo\";\n        case \"lift\":\n            if (loadWeight > 5) {\n                return \"High-Torque Servo\";\n            } else {\n                return \"Standard Servo\";\n            }\n        case \"arm\":\n            if (loadWeight > 3) {\n                return \"High-Torque Servo\";\n            } else {\n                return \"Standard Servo\";\n            }\n        case \"claw\":\n            return \"Standard Servo\";\n        case \"flap\":\n            return \"Standard Servo\";\n        default:\n            return \"Standard Servo\";\n    }\n}\n\n// Example usage\nString armServoType = recommendServoType(\"arm\", 2.0, true, false);\nString liftServoType = recommendServoType(\"lift\", 8.0, false, false);\nString conveyorServoType = recommendServoType(\"continuous\", 1.0, false, false);"
    },
    {
      "type": "text",
      "title": "Servo Testing and Validation",
      "content": "Testing different servo types helps verify they meet your application requirements and operate reliably."
    },
    {
      "type": "list",
      "title": "Testing Procedures",
      "items": [
        "<strong>Torque Testing:</strong> Test lifting capacity and holding force",
        "<strong>Speed Testing:</strong> Measure movement speed and responsiveness",
        "<strong>Precision Testing:</strong> Verify position accuracy and repeatability",
        "<strong>Temperature Testing:</strong> Monitor servo temperature during extended use",
        "<strong>Noise Testing:</strong> Check for unusual sounds indicating problems"
      ]
    },
    {
      "type": "link-grid",
      "title": "Related Topics",
      "links": [
        {
          "label": "Servos",
          "id": "servos"
        },
        {
          "label": "Servo Positions",
          "id": "servo-positions"
        },
        {
          "label": "Continuous vs Non-Continuous",
          "id": "continuous-vs-noncontinuous"
        }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Servo Types Practice",
      "description": "Practice these exercises to understand servo types:",
      "tasks": [
        "Identify servo types on your robot and their specifications",
        "Test different servo types with the same load",
        "Compare torque and speed characteristics",
        "Practice servo selection for different applications",
        "Test precision and repeatability of different servo types",
        "Create a servo testing and validation procedure",
        "Document servo performance characteristics"
      ],
      "content": "// Practice Exercise: Servo Type Comparison\n// Create an OpMode that tests different servo types\n// Compare performance characteristics\n// Document the results for future reference\n\n@TeleOp(name=\"Servo Type Test\", group=\"Testing\")\npublic class ServoTypeTestOpMode extends LinearOpMode {\n    \n    private Servo standardServo, continuousServo;\n    \n    @Override\n    public void runOpMode() {\n        // Initialize different servo types\n        standardServo = hardwareMap.get(Servo.class, \"standard_servo\");\n        continuousServo = hardwareMap.get(Servo.class, \"continuous_servo\");\n        \n        // Configure servos\n        standardServo.setDirection(Servo.Direction.FORWARD);\n        continuousServo.setDirection(Servo.Direction.FORWARD);\n        \n        waitForStart();\n        \n        while (opModeIsActive()) {\n            // Test standard servo\n            if (gamepad1.a) {\n                standardServo.setPosition(0.0);\n            } else if (gamepad1.b) {\n                standardServo.setPosition(1.0);\n            } else if (gamepad1.x) {\n                standardServo.setPosition(0.5);\n            }\n            \n            // Test continuous servo\n            double speed = -gamepad1.right_stick_y;\n            double position = 0.5 + (speed * 0.5);\n            position = Math.max(0.0, Math.min(1.0, position));\n            continuousServo.setPosition(position);\n            \n            // Display telemetry\n            telemetry.addData(\"Standard Position\", standardServo.getPosition());\n            telemetry.addData(\"Continuous Position\", continuousServo.getPosition());\n            telemetry.addData(\"Speed\", speed);\n            telemetry.update();\n        }\n    }\n}"
    }
  ]
} 
