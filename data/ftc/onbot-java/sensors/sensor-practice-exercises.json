{
  "title": "Sensor Practice Exercises",
  "sections": [
    {
      "type": "text",
      "title": "Introduction to Sensor Practice",
      "content": "Now that you've learned about different types of sensors in FTC, it's time to practice using them! These exercises will help you apply your knowledge and build confidence with sensor programming. Each exercise focuses on practical applications you might encounter in real FTC competitions."
    },
    {
      "type": "exercise-box",
      "title": "Exercise 1: Touch Sensor Line Following",
      "description": "Create a robot that uses a touch sensor to detect when it hits a wall and automatically backs up and turns.",
      "tasks": [
        "Initialize a touch sensor and two drive motors.",
        "Drive forward until the touch sensor is pressed.",
        "When pressed, back up for 1 second.",
        "Turn right for 0.5 seconds.",
        "Repeat the process."
      ],
      "answers": [
        {
          "task": "Initialize a touch sensor and two drive motors",
          "content": "// Declare hardware components\nprivate TouchSensor touchSensor;\nprivate DcMotor leftDrive, rightDrive;\n\n// Initialize in runOpMode()\ntouchSensor = hardwareMap.get(TouchSensor.class, \"touch_sensor\");\nleftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\nrightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n\n// Show initialization status\ntelemetry.addData(\"Status\", \"Touch Sensor Line Following Ready\");\ntelemetry.update();"
        },
        {
          "task": "Drive forward until the touch sensor is pressed",
          "content": "// Drive forward until touch sensor is pressed\nwhile (opModeIsActive() && !touchSensor.isPressed()) {\n    leftDrive.setPower(0.5);\n    rightDrive.setPower(0.5);\n    \n    // Display sensor status\ntelemetry.addData(\"Touch Sensor\", touchSensor.isPressed() ? \"Pressed\" : \"Not Pressed\");\ntelemetry.update();\n}\n\n// Stop motors when sensor is pressed\nleftDrive.setPower(0);\nrightDrive.setPower(0);"
        },
        {
          "task": "When pressed, back up for 1 second",
          "content": "// Back up for 1 second\nleftDrive.setPower(-0.5);\nrightDrive.setPower(-0.5);\nsleep(1000);\n\n// Stop motors\nleftDrive.setPower(0);\nrightDrive.setPower(0);\n\ntelemetry.addData(\"Action\", \"Backed up for 1 second\");\ntelemetry.update();"
        },
        {
          "task": "Turn right for 0.5 seconds",
          "content": "// Turn right for 0.5 seconds\nleftDrive.setPower(0.5);\nrightDrive.setPower(-0.5);\nsleep(500);\n\n// Stop motors\nleftDrive.setPower(0);\nrightDrive.setPower(0);\n\ntelemetry.addData(\"Action\", \"Turned right for 0.5 seconds\");\ntelemetry.update();"
        },
        {
          "task": "Combine all tasks into a complete line following OpMode",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\nimport com.qualcomm.robotcore.hardware.TouchSensor;\nimport com.qualcomm.robotcore.hardware.DcMotor;\n\n@Autonomous(name = \"TouchSensorLineFollowing\")\npublic class TouchSensorLineFollowing extends LinearOpMode {\n    private TouchSensor touchSensor;\n    private DcMotor leftDrive, rightDrive;\n\n    @Override\n    public void runOpMode() {\n        // Initialize hardware\n        touchSensor = hardwareMap.get(TouchSensor.class, \"touch_sensor\");\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        \n        telemetry.addData(\"Status\", \"Touch Sensor Line Following Ready\");\n        telemetry.addData(\"Instructions\", \"Robot will drive forward until it hits a wall\");\n        telemetry.update();\n        \n        waitForStart();\n        \n        while (opModeIsActive()) {\n            // Drive forward until touch sensor is pressed\n            telemetry.addData(\"Status\", \"Driving forward...\");\n            telemetry.update();\n            \n            while (opModeIsActive() && !touchSensor.isPressed()) {\n                leftDrive.setPower(0.5);\n                rightDrive.setPower(0.5);\n                \n                telemetry.addData(\"Touch Sensor\", touchSensor.isPressed() ? \"Pressed\" : \"Not Pressed\");\n                telemetry.update();\n            }\n            \n            // Stop when sensor is pressed\n            leftDrive.setPower(0);\n            rightDrive.setPower(0);\n            \n            telemetry.addData(\"Status\", \"Wall detected! Backing up...\");\n            telemetry.update();\n            \n            // Back up for 1 second\n            leftDrive.setPower(-0.5);\n            rightDrive.setPower(-0.5);\n            sleep(1000);\n            \n            leftDrive.setPower(0);\n            rightDrive.setPower(0);\n            \n            telemetry.addData(\"Status\", \"Turning right...\");\n            telemetry.update();\n            \n            // Turn right for 0.5 seconds\n            leftDrive.setPower(0.5);\n            rightDrive.setPower(-0.5);\n            sleep(500);\n            \n            leftDrive.setPower(0);\n            rightDrive.setPower(0);\n            \n            telemetry.addData(\"Status\", \"Ready for next cycle\");\n            telemetry.update();\n            \n            sleep(500); // Brief pause before next cycle\n        }\n    }\n}"
        }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Exercise 2: Distance Sensor Obstacle Avoidance",
      "description": "Create a robot that uses a distance sensor to avoid obstacles by stopping when objects are too close and turning to find a clear path.",
      "tasks": [
        "Initialize a distance sensor and drive motors.",
        "Drive forward while monitoring distance.",
        "Stop when an object is closer than 10cm.",
        "Turn left until the path is clear (>15cm).",
        "Continue driving forward."
      ],
      "answers": [
        {
          "task": "Initialize a distance sensor and drive motors",
          "content": "// Declare hardware components\nprivate DistanceSensor distanceSensor;\nprivate DcMotor leftDrive, rightDrive;\n\n// Initialize in runOpMode()\ndistanceSensor = hardwareMap.get(DistanceSensor.class, \"distance_sensor\");\nleftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\nrightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n\n// Show initialization status\ntelemetry.addData(\"Status\", \"Distance Sensor Obstacle Avoidance Ready\");\ntelemetry.update();"
        },
        {
          "task": "Drive forward while monitoring distance",
          "content": "// Drive forward while monitoring distance\nwhile (opModeIsActive()) {\n    double distance = distanceSensor.getDistance(DistanceUnit.CM);\n    \n    // Display distance information\ntelemetry.addData(\"Distance (cm)\", \"%.1f\", distance);\ntelemetry.addData(\"Status\", \"Driving forward\");\ntelemetry.update();\n    \n    // Continue with obstacle detection logic...\n}"
        },
        {
          "task": "Stop when an object is closer than 10cm",
          "content": "// Check for obstacles\nif (distance < 10.0) {\n    // Stop motors\n    leftDrive.setPower(0);\n    rightDrive.setPower(0);\n    \n    telemetry.addData(\"Warning\", \"Obstacle detected! Stopping.\");\ntelemetry.update();\n    \n    // Wait a moment\n    sleep(500);\n} else {\n    // Continue driving forward\n    leftDrive.setPower(0.5);\n    rightDrive.setPower(0.5);\n}"
        },
        {
          "task": "Turn left until the path is clear (>15cm)",
          "content": "// Turn left until path is clear\nwhile (opModeIsActive() && distance < 15.0) {\n    leftDrive.setPower(-0.3);\n    rightDrive.setPower(0.3);\n    \n    distance = distanceSensor.getDistance(DistanceUnit.CM);\n    telemetry.addData(\"Distance (cm)\", \"%.1f\", distance);\n    telemetry.addData(\"Status\", \"Turning left to find clear path\");\ntelemetry.update();\n}\n\n// Stop turning\nleftDrive.setPower(0);\nrightDrive.setPower(0);\n\ntelemetry.addData(\"Status\", \"Clear path found!\");\ntelemetry.update();"
        },
        {
          "task": "Combine all tasks into a complete obstacle avoidance OpMode",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.DistanceSensor;\nimport com.qualcomm.robotcore.hardware.DcMotor;\nimport org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;\n\n@TeleOp(name = \"ObstacleAvoidance\")\npublic class ObstacleAvoidance extends LinearOpMode {\n    private DistanceSensor distanceSensor;\n    private DcMotor leftDrive, rightDrive;\n\n    @Override\n    public void runOpMode() {\n        // Initialize hardware\n        distanceSensor = hardwareMap.get(DistanceSensor.class, \"distance_sensor\");\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        \n        telemetry.addData(\"Status\", \"Obstacle Avoidance Ready\");\n        telemetry.addData(\"Instructions\", \"Robot will avoid obstacles automatically\");\ntelemetry.update();\n        \n        waitForStart();\n        \n        while (opModeIsActive()) {\n            double distance = distanceSensor.getDistance(DistanceUnit.CM);\n            \n            telemetry.addData(\"Distance (cm)\", \"%.1f\", distance);\n            \n            // Check for obstacles\n            if (distance < 10.0) {\n                // Stop and find clear path\n                leftDrive.setPower(0);\n                rightDrive.setPower(0);\n                \n                telemetry.addData(\"Status\", \"Obstacle detected! Finding clear path...\");\ntelemetry.update();\n                \n                // Turn left until path is clear\n                while (opModeIsActive() && distance < 15.0) {\n                    leftDrive.setPower(-0.3);\n                    rightDrive.setPower(0.3);\n                    \n                    distance = distanceSensor.getDistance(DistanceUnit.CM);\n                    telemetry.addData(\"Distance (cm)\", \"%.1f\", distance);\ntelemetry.update();\n                }\n                \n                leftDrive.setPower(0);\n                rightDrive.setPower(0);\n                \n                telemetry.addData(\"Status\", \"Clear path found!\");\ntelemetry.update();\n                \n                sleep(500);\n            } else {\n                // Drive forward\n                leftDrive.setPower(0.5);\n                rightDrive.setPower(0.5);\n                \n                telemetry.addData(\"Status\", \"Driving forward\");\ntelemetry.update();\n            }\n        }\n        \n        // Stop motors\n        leftDrive.setPower(0);\n        rightDrive.setPower(0);\n    }\n}"
        }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Exercise 3: Color Sensor Line Following",
      "description": "Create a robot that uses a color sensor to follow a line by detecting the difference between the line color and the background.",
      "tasks": [
        "Initialize a color sensor and drive motors.",
        "Read RGB values from the color sensor.",
        "Determine if the sensor is over the line or background.",
        "Adjust robot direction based on line position.",
        "Implement smooth line following behavior."
      ],
      "answers": [
        {
          "task": "Initialize a color sensor and drive motors",
          "content": "// Declare hardware components\nprivate ColorSensor colorSensor;\nprivate DcMotor leftDrive, rightDrive;\n\n// Initialize in runOpMode()\ncolorSensor = hardwareMap.get(ColorSensor.class, \"color_sensor\");\nleftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\nrightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n\n// Enable LED for better detection\ncolorSensor.enableLed(true);\n\n// Show initialization status\ntelemetry.addData(\"Status\", \"Color Sensor Line Following Ready\");\ntelemetry.update();"
        },
        {
          "task": "Read RGB values from the color sensor",
          "content": "// Read RGB values\nint red = colorSensor.red();\nint green = colorSensor.green();\nint blue = colorSensor.blue();\n\n// Calculate brightness (average of RGB)\ndouble brightness = (red + green + blue) / 3.0;\n\n// Display color information\ntelemetry.addData(\"Red\", red);\ntelemetry.addData(\"Green\", green);\ntelemetry.addData(\"Blue\", blue);\ntelemetry.addData(\"Brightness\", \"%.1f\", brightness);\ntelemetry.update();"
        },
        {
          "task": "Determine if the sensor is over the line or background",
          "content": "// Define thresholds (adjust based on your line and background)\nfinal int LINE_THRESHOLD = 100; // Dark line threshold\nfinal int BACKGROUND_THRESHOLD = 200; // Light background threshold\n\n// Determine position\nboolean isOverLine = brightness < LINE_THRESHOLD;\nboolean isOverBackground = brightness > BACKGROUND_THRESHOLD;\n\n// Display position information\ntelemetry.addData(\"Over Line\", isOverLine);\ntelemetry.addData(\"Over Background\", isOverBackground);\ntelemetry.update();"
        },
        {
          "task": "Adjust robot direction based on line position",
          "content": "// Line following logic\nif (isOverLine) {\n    // Sensor is over the line - turn left to find edge\n    leftDrive.setPower(0.3);\n    rightDrive.setPower(0.7);\n    telemetry.addData(\"Action\", \"Turning left (over line)\");\n} else if (isOverBackground) {\n    // Sensor is over background - turn right to find line\n    leftDrive.setPower(0.7);\n    rightDrive.setPower(0.3);\n    telemetry.addData(\"Action\", \"Turning right (over background)\");\n} else {\n    // In transition zone - drive straight\n    leftDrive.setPower(0.5);\n    rightDrive.setPower(0.5);\n    telemetry.addData(\"Action\", \"Driving straight (on edge)\");\n}\n\ntelemetry.update();"
        },
        {
          "task": "Combine all tasks into a complete line following OpMode",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\nimport com.qualcomm.robotcore.hardware.ColorSensor;\nimport com.qualcomm.robotcore.hardware.DcMotor;\n\n@Autonomous(name = \"ColorSensorLineFollowing\")\npublic class ColorSensorLineFollowing extends LinearOpMode {\n    private ColorSensor colorSensor;\n    private DcMotor leftDrive, rightDrive;\n    \n    // Line following thresholds\n    final int LINE_THRESHOLD = 100;\n    final int BACKGROUND_THRESHOLD = 200;\n\n    @Override\n    public void runOpMode() {\n        // Initialize hardware\n        colorSensor = hardwareMap.get(ColorSensor.class, \"color_sensor\");\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        \n        // Enable LED\n        colorSensor.enableLed(true);\n        \n        telemetry.addData(\"Status\", \"Color Sensor Line Following Ready\");\ntelemetry.addData(\"Instructions\", \"Place sensor over line to start following\");\ntelemetry.update();\n        \n        waitForStart();\n        \n        while (opModeIsActive()) {\n            // Read color values\n            int red = colorSensor.red();\n            int green = colorSensor.green();\n            int blue = colorSensor.blue();\n            double brightness = (red + green + blue) / 3.0;\n            \n            // Determine position\n            boolean isOverLine = brightness < LINE_THRESHOLD;\n            boolean isOverBackground = brightness > BACKGROUND_THRESHOLD;\n            \n            // Display sensor data\n            telemetry.addData(\"Red\", red);\ntelemetry.addData(\"Green\", green);\ntelemetry.addData(\"Blue\", blue);\ntelemetry.addData(\"Brightness\", \"%.1f\", brightness);\ntelemetry.addData(\"Over Line\", isOverLine);\ntelemetry.addData(\"Over Background\", isOverBackground);\n            \n            // Line following logic\n            if (isOverLine) {\n                leftDrive.setPower(0.3);\n                rightDrive.setPower(0.7);\n                telemetry.addData(\"Action\", \"Turning left (over line)\");\n            } else if (isOverBackground) {\n                leftDrive.setPower(0.7);\n                rightDrive.setPower(0.3);\n                telemetry.addData(\"Action\", \"Turning right (over background)\");\n            } else {\n                leftDrive.setPower(0.5);\n                rightDrive.setPower(0.5);\n                telemetry.addData(\"Action\", \"Driving straight (on edge)\");\n            }\n            \n            telemetry.update();\n        }\n        \n        // Stop motors\n        leftDrive.setPower(0);\n        rightDrive.setPower(0);\n    }\n}"
        }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Exercise 4: IMU Gyro Turning",
      "description": "Create a robot that uses the IMU gyroscope to make precise turns to specific angles.",
      "tasks": [
        "Initialize the IMU sensor.",
        "Read the current heading (yaw angle).",
        "Create a method to turn to a specific angle.",
        "Implement a 90-degree turn sequence.",
        "Add telemetry to monitor the turning process."
      ],
      "answers": [
        {
          "task": "Initialize the IMU sensor",
          "content": "// Declare IMU\nprivate BNO055IMU imu;\n\n// Initialize in runOpMode()\nimu = hardwareMap.get(BNO055IMU.class, \"imu\");\n\n// Configure IMU parameters\nBNO055IMU.Parameters parameters = new BNO055IMU.Parameters();\nparameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;\nparameters.accelUnit = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;\nparameters.calibrationDataFile = \"BNO055IMUCalibration.json\";\nparameters.loggingEnabled = true;\nparameters.loggingTag = \"IMU\";\n\n// Initialize the sensor\nimu.initialize(parameters);\n\n// Show initialization status\ntelemetry.addData(\"Status\", \"IMU Gyro Turning Ready\");\ntelemetry.update();"
        },
        {
          "task": "Read the current heading (yaw angle)",
          "content": "// Get current orientation\nOrientation angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);\n\n// Extract yaw angle (rotation around Z-axis)\ndouble currentHeading = angles.firstAngle;\n\n// Normalize angle to 0-360 degrees\nif (currentHeading < 0) {\n    currentHeading += 360;\n}\n\n// Display current heading\ntelemetry.addData(\"Current Heading\", \"%.1f°\", currentHeading);\ntelemetry.update();"
        },
        {
          "task": "Create a method to turn to a specific angle",
          "content": "// Method to turn to a specific angle\nprivate void turnToAngle(double targetAngle, double power) {\n    Orientation angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);\ndouble currentHeading = angles.firstAngle;\nif (currentHeading < 0) currentHeading += 360;\n\n// Calculate shortest turn direction\ndouble angleDifference = targetAngle - currentHeading;\nif (angleDifference > 180) angleDifference -= 360;\nif (angleDifference < -180) angleDifference += 360;\n\n// Turn until target angle is reached\nwhile (Math.abs(angleDifference) > 2.0 && opModeIsActive()) {\n    if (angleDifference > 0) {\n        // Turn left\n        leftDrive.setPower(-power);\n        rightDrive.setPower(power);\n    } else {\n        // Turn right\n        leftDrive.setPower(power);\n        rightDrive.setPower(-power);\n    }\n    \n    // Update current heading\n    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);\n    currentHeading = angles.firstAngle;\n    if (currentHeading < 0) currentHeading += 360;\n    \n    angleDifference = targetAngle - currentHeading;\n    if (angleDifference > 180) angleDifference -= 360;\n    if (angleDifference < -180) angleDifference += 360;\n    \n    telemetry.addData(\"Target Angle\", \"%.1f°\", targetAngle);\ntelemetry.addData(\"Current Angle\", \"%.1f°\", currentHeading);\ntelemetry.addData(\"Difference\", \"%.1f°\", angleDifference);\ntelemetry.update();\n}\n\n// Stop motors\nleftDrive.setPower(0);\nrightDrive.setPower(0);"
        },
        {
          "task": "Implement a 90-degree turn sequence",
          "content": "// Turn sequence: 0° -> 90° -> 180° -> 270° -> 0°\ntelemetry.addData(\"Status\", \"Starting 90-degree turn sequence\");\ntelemetry.update();\n\n// Turn to 90 degrees\nturnToAngle(90, 0.5);\nsleep(1000);\n\n// Turn to 180 degrees\nturnToAngle(180, 0.5);\nsleep(1000);\n\n// Turn to 270 degrees\nturnToAngle(270, 0.5);\nsleep(1000);\n\n// Return to 0 degrees\nturnToAngle(0, 0.5);\n\ntelemetry.addData(\"Status\", \"Turn sequence complete!\");\ntelemetry.update();"
        },
        {
          "task": "Combine all tasks into a complete IMU turning OpMode",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\nimport com.qualcomm.robotcore.hardware.DcMotor;\nimport com.qualcomm.hardware.bosch.BNO055IMU;\nimport org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;\nimport org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;\nimport org.firstinspires.ftc.robotcore.external.navigation.AxesReference;\nimport org.firstinspires.ftc.robotcore.external.navigation.Orientation;\n\n@Autonomous(name = \"IMUGyroTurning\")\npublic class IMUGyroTurning extends LinearOpMode {\n    private BNO055IMU imu;\n    private DcMotor leftDrive, rightDrive;\n\n    @Override\n    public void runOpMode() {\n        // Initialize hardware\n        imu = hardwareMap.get(BNO055IMU.class, \"imu\");\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        \n        // Configure IMU\n        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();\n        parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;\n        parameters.accelUnit = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;\n        parameters.calibrationDataFile = \"BNO055IMUCalibration.json\";\n        parameters.loggingEnabled = true;\n        parameters.loggingTag = \"IMU\";\n        \n        imu.initialize(parameters);\n        \n        telemetry.addData(\"Status\", \"IMU Gyro Turning Ready\");\ntelemetry.addData(\"Instructions\", \"Robot will perform 90-degree turn sequence\");\ntelemetry.update();\n        \n        waitForStart();\n        \n        // Perform turn sequence\n        telemetry.addData(\"Status\", \"Starting 90-degree turn sequence\");\ntelemetry.update();\n        \n        // Turn to 90 degrees\nturnToAngle(90, 0.5);\nsleep(1000);\n\n// Turn to 180 degrees\nturnToAngle(180, 0.5);\nsleep(1000);\n\n// Turn to 270 degrees\nturnToAngle(270, 0.5);\nsleep(1000);\n\n// Return to 0 degrees\nturnToAngle(0, 0.5);\n\ntelemetry.addData(\"Status\", \"Turn sequence complete!\");\ntelemetry.update();\n        \n        sleep(2000);\n    }\n    \n    // Method to turn to a specific angle\n    private void turnToAngle(double targetAngle, double power) {\n        Orientation angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);\ndouble currentHeading = angles.firstAngle;\nif (currentHeading < 0) currentHeading += 360;\n\n// Calculate shortest turn direction\ndouble angleDifference = targetAngle - currentHeading;\nif (angleDifference > 180) angleDifference -= 360;\nif (angleDifference < -180) angleDifference += 360;\n\n// Turn until target angle is reached\nwhile (Math.abs(angleDifference) > 2.0 && opModeIsActive()) {\n    if (angleDifference > 0) {\n        // Turn left\n        leftDrive.setPower(-power);\n        rightDrive.setPower(power);\n    } else {\n        // Turn right\n        leftDrive.setPower(power);\n        rightDrive.setPower(-power);\n    }\n    \n    // Update current heading\n    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);\n    currentHeading = angles.firstAngle;\n    if (currentHeading < 0) currentHeading += 360;\n    \n    angleDifference = targetAngle - currentHeading;\n    if (angleDifference > 180) angleDifference -= 360;\n    if (angleDifference < -180) angleDifference += 360;\n    \n    telemetry.addData(\"Target Angle\", \"%.1f°\", targetAngle);\ntelemetry.addData(\"Current Angle\", \"%.1f°\", currentHeading);\ntelemetry.addData(\"Difference\", \"%.1f°\", angleDifference);\ntelemetry.update();\n}\n\n// Stop motors\nleftDrive.setPower(0);\nrightDrive.setPower(0);\n    }\n}"
        }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Exercise 5: Multi-Sensor Integration",
      "description": "Create a robot that combines multiple sensors to perform a complex task: navigate to a colored object while avoiding obstacles.",
      "tasks": [
        "Initialize all sensors (color, distance, touch, IMU).",
        "Create a state machine for navigation.",
        "Use distance sensor for obstacle avoidance.",
        "Use color sensor to detect target objects.",
        "Use IMU for orientation and touch sensor for backup detection."
      ],
      "answers": [
        {
          "task": "Initialize all sensors (color, distance, touch, IMU)",
          "content": "// Declare all sensors\nprivate ColorSensor colorSensor;\nprivate DistanceSensor distanceSensor;\nprivate TouchSensor touchSensor;\nprivate BNO055IMU imu;\nprivate DcMotor leftDrive, rightDrive;\n\n// Initialize in runOpMode()\ncolorSensor = hardwareMap.get(ColorSensor.class, \"color_sensor\");\ndistanceSensor = hardwareMap.get(DistanceSensor.class, \"distance_sensor\");\ntouchSensor = hardwareMap.get(TouchSensor.class, \"touch_sensor\");\nimu = hardwareMap.get(BNO055IMU.class, \"imu\");\nleftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\nrightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n\n// Configure IMU\nBNO055IMU.Parameters parameters = new BNO055IMU.Parameters();\nparameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;\nimu.initialize(parameters);\n\n// Enable color sensor LED\ncolorSensor.enableLed(true);\n\n// Show initialization status\ntelemetry.addData(\"Status\", \"Multi-Sensor Integration Ready\");\ntelemetry.update();"
        },
        {
          "task": "Create a state machine for navigation",
          "content": "// Define navigation states\nenum NavigationState {\n    SEARCHING,      // Looking for target\n    APPROACHING,    // Moving toward target\n    AVOIDING,       // Avoiding obstacle\n    BACKING_UP,     // Backing up from collision\n    TARGET_FOUND    // Target reached\n}\n\n// Current state\nNavigationState currentState = NavigationState.SEARCHING;\n\n// State machine loop\nwhile (opModeIsActive()) {\n    switch (currentState) {\n        case SEARCHING:\n            // Look for target\n            break;\n        case APPROACHING:\n            // Move toward target\n            break;\n        case AVOIDING:\n            // Avoid obstacles\n            break;\n        case BACKING_UP:\n            // Back up from collision\n            break;\n        case TARGET_FOUND:\n            // Target reached\n            break;\n    }\n    \n    telemetry.addData(\"Current State\", currentState.toString());\ntelemetry.update();\n}"
        },
        {
          "task": "Use distance sensor for obstacle avoidance",
          "content": "// Check for obstacles using distance sensor\ndouble distance = distanceSensor.getDistance(DistanceUnit.CM);\n\n// Obstacle detection logic\nif (distance < 8.0) {\n    // Very close obstacle - back up\n    currentState = NavigationState.BACKING_UP;\n    telemetry.addData(\"Warning\", \"Very close obstacle detected!\");\n} else if (distance < 15.0) {\n    // Obstacle detected - avoid\n    currentState = NavigationState.AVOIDING;\n    telemetry.addData(\"Warning\", \"Obstacle detected - avoiding\");\n} else {\n    // Clear path\n    if (currentState == NavigationState.AVOIDING) {\n        currentState = NavigationState.SEARCHING;\n    }\n    telemetry.addData(\"Status\", \"Path clear\");\n}\n\ntelemetry.addData(\"Distance (cm)\", \"%.1f\", distance);\ntelemetry.update();"
        },
        {
          "task": "Use color sensor to detect target objects",
          "content": "// Read color values\nint red = colorSensor.red();\nint green = colorSensor.green();\nint blue = colorSensor.blue();\n\n// Define target color (adjust for your target)\nfinal int TARGET_RED_MIN = 100;\nfinal int TARGET_GREEN_MIN = 50;\nfinal int TARGET_BLUE_MAX = 80;\n\n// Check if target color is detected\nboolean targetDetected = (red > TARGET_RED_MIN && \n                          green > TARGET_GREEN_MIN && \n                          blue < TARGET_BLUE_MAX);\n\n// Target detection logic\nif (targetDetected) {\n    if (currentState == NavigationState.SEARCHING) {\n        currentState = NavigationState.APPROACHING;\n        telemetry.addData(\"Status\", \"Target detected! Approaching...\");\n    } else if (currentState == NavigationState.APPROACHING && distance < 5.0) {\n        currentState = NavigationState.TARGET_FOUND;\n        telemetry.addData(\"Status\", \"Target reached!\");\n    }\n} else {\n    if (currentState == NavigationState.APPROACHING) {\n        currentState = NavigationState.SEARCHING;\n        telemetry.addData(\"Status\", \"Target lost - searching...\");\n    }\n}\n\ntelemetry.addData(\"Target Detected\", targetDetected);\ntelemetry.addData(\"Red\", red);\ntelemetry.addData(\"Green\", green);\ntelemetry.addData(\"Blue\", blue);\ntelemetry.update();"
        },
        {
          "task": "Combine all tasks into a complete multi-sensor OpMode",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\nimport com.qualcomm.robotcore.hardware.ColorSensor;\nimport com.qualcomm.robotcore.hardware.DistanceSensor;\nimport com.qualcomm.robotcore.hardware.TouchSensor;\nimport com.qualcomm.robotcore.hardware.DcMotor;\nimport com.qualcomm.hardware.bosch.BNO055IMU;\nimport org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;\nimport org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;\nimport org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;\nimport org.firstinspires.ftc.robotcore.external.navigation.AxesReference;\nimport org.firstinspires.ftc.robotcore.external.navigation.Orientation;\n\n@Autonomous(name = \"MultiSensorNavigation\")\npublic class MultiSensorNavigation extends LinearOpMode {\n    private ColorSensor colorSensor;\n    private DistanceSensor distanceSensor;\n    private TouchSensor touchSensor;\n    private BNO055IMU imu;\n    private DcMotor leftDrive, rightDrive;\n    \n    // Navigation states\n    enum NavigationState {\n        SEARCHING, APPROACHING, AVOIDING, BACKING_UP, TARGET_FOUND\n    }\n    NavigationState currentState = NavigationState.SEARCHING;\n    \n    // Target color thresholds\n    final int TARGET_RED_MIN = 100;\n    final int TARGET_GREEN_MIN = 50;\n    final int TARGET_BLUE_MAX = 80;\n\n    @Override\n    public void runOpMode() {\n        // Initialize all sensors\n        colorSensor = hardwareMap.get(ColorSensor.class, \"color_sensor\");\ndistanceSensor = hardwareMap.get(DistanceSensor.class, \"distance_sensor\");\ntouchSensor = hardwareMap.get(TouchSensor.class, \"touch_sensor\");\nimu = hardwareMap.get(BNO055IMU.class, \"imu\");\nleftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\nrightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        \n        // Configure IMU\n        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();\n        parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;\n        imu.initialize(parameters);\n        \n        // Enable color sensor LED\n        colorSensor.enableLed(true);\n        \n        telemetry.addData(\"Status\", \"Multi-Sensor Navigation Ready\");\ntelemetry.addData(\"Instructions\", \"Navigate to colored target while avoiding obstacles\");\ntelemetry.update();\n        \n        waitForStart();\n        \n        while (opModeIsActive()) {\n            // Read all sensor values\n            double distance = distanceSensor.getDistance(DistanceUnit.CM);\n            int red = colorSensor.red();\n            int green = colorSensor.green();\n            int blue = colorSensor.blue();\n            boolean touchPressed = touchSensor.isPressed();\n            \n            // Check for target color\n            boolean targetDetected = (red > TARGET_RED_MIN && \n                                      green > TARGET_GREEN_MIN && \n                                      blue < TARGET_BLUE_MAX);\n            \n            // State machine logic\n            switch (currentState) {\n                case SEARCHING:\n                    if (targetDetected) {\n                        currentState = NavigationState.APPROACHING;\n                    } else {\n                        // Search pattern - turn slowly\n                        leftDrive.setPower(0.3);\n                        rightDrive.setPower(-0.3);\n                    }\n                    break;\n                    \n                case APPROACHING:\n                    if (distance < 5.0) {\n                        currentState = NavigationState.TARGET_FOUND;\n                    } else if (distance < 15.0) {\n                        currentState = NavigationState.AVOIDING;\n                    } else {\n                        // Move toward target\n                        leftDrive.setPower(0.5);\n                        rightDrive.setPower(0.5);\n                    }\n                    break;\n                    \n                case AVOIDING:\n                    // Turn right to avoid obstacle\n                    leftDrive.setPower(0.5);\n                    rightDrive.setPower(-0.5);\n                    if (distance > 20.0) {\n                        currentState = NavigationState.SEARCHING;\n                    }\n                    break;\n                    \n                case BACKING_UP:\n                    // Back up from collision\n                    leftDrive.setPower(-0.5);\n                    rightDrive.setPower(-0.5);\n                    sleep(1000);\n                    currentState = NavigationState.SEARCHING;\n                    break;\n                    \n                case TARGET_FOUND:\n                    // Stop and celebrate\n                    leftDrive.setPower(0);\n                    rightDrive.setPower(0);\n                    break;\n            }\n            \n            // Check for emergency backup (touch sensor)\n            if (touchPressed && currentState != NavigationState.BACKING_UP) {\n                currentState = NavigationState.BACKING_UP;\n            }\n            \n            // Display telemetry\n            telemetry.addData(\"Current State\", currentState.toString());\ntelemetry.addData(\"Distance (cm)\", \"%.1f\", distance);\ntelemetry.addData(\"Target Detected\", targetDetected);\ntelemetry.addData(\"Touch Pressed\", touchPressed);\ntelemetry.addData(\"Red\", red);\ntelemetry.addData(\"Green\", green);\ntelemetry.addData(\"Blue\", blue);\ntelemetry.update();\n        }\n        \n        // Stop motors\n        leftDrive.setPower(0);\n        rightDrive.setPower(0);\n    }\n}"
        }
      ]
    }
  ]
} 