{
  "title": "IMU (Inertial Measurement Unit)",
  "sections": [
    {
      "type": "text",
      "title": "What is an IMU?",
      "content": "An IMU (Inertial Measurement Unit) is a sensor that measures orientation (heading, pitch, roll) and acceleration. In FTC, the IMU is critical for tasks like navigation, turning, and field-centric control."
    },
    {
      "type": "text",
      "title": "REV Hub IMU vs. External IMU: Key Differences",
      "content": "FTC robots can use two main types of IMUs: the built-in IMU inside the REV Control/Expansion Hub, and external IMUs such as the Bosch BNO055 module. Both provide orientation data, but they differ in how you initialize and access them in code.<br><br><b>REV Hub IMU:</b> This IMU is built into the REV Control and Expansion Hubs. It is accessed using the <code>BNO055IMU</code> class, and requires explicit initialization with parameters.<br><br><b>External IMU (e.g., Bosch BNO055):</b> This is a separate sensor module connected to the I2C port. It is also accessed using the <code>BNO055IMU</code> class, but you must ensure the correct I2C address and port are set in your hardware configuration. <br><br><strong>Note:</strong> You MUST use a port other than port 0 on the Control Hub to wire your external IMU into to avoid conflicts with the REV Internal IMU. Additionally, both types must be added to your robot's hardware configuration and given a clear name (commonly <code>imu</code>)."
    },
    {
      "type": "code",
      "title": "Initializing the REV Hub IMU (Built-in)",
      "content": "To use the built-in IMU, map it as a <code>BNO055IMU</code> and initialize it with parameters:",
      "code": "import com.qualcomm.hardware.bosch.BNO055IMU;\n\nprivate BNO055IMU imu;\n\n@Override\npublic void runOpMode() {\n    imu = hardwareMap.get(BNO055IMU.class, \"imu\");\n    BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();\n    parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;\n    imu.initialize(parameters);\n    // Now you can use imu in your code\n}"
    },
    {
      "type": "code",
      "title": "Initializing an External BNO055 IMU (I2C)",
      "content": "For an external BNO055 IMU, the code is almost identical, but make sure your hardware configuration matches the I2C port and address. Initialization is the same:",
      "code": "import com.qualcomm.hardware.bosch.BNO055IMU;\n\nprivate BNO055IMU imu;\n\n@Override\npublic void runOpMode() {\n    imu = hardwareMap.get(BNO055IMU.class, \"imu\"); // Name must match your config\n    BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();\n    parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;\n    imu.initialize(parameters);\n    // Now you can use imu in your code\n}"
    },
    {
      "type": "emphasis-box",
      "title": "Summary: Initialization Differences",
      "content": "Both the REV Hub IMU and external BNO055 IMU use the <code>BNO055IMU</code> class and require initialization with parameters. The main difference is in the hardware setup: the built-in IMU is part of the hub, while the external IMU connects via I2C and may require setting the correct I2C address in the configuration. Always check your hardware configuration for the correct device name and port."
    },
    {
      "type": "code",
      "title": "Reading Orientation Data",
      "content": "You can read the robot's heading (rotation) from the IMU. The exact method depends on your IMU model. Here's a generic example:",
      "code": "float heading = imu.getAngularOrientation().firstAngle;\ntelemetry.addData(\"Heading\", heading);\ntelemetry.update();"
    },
    {
      "type": "text",
      "title": "Using IMU Data in Robot Logic",
      "content": "IMU data is used for tasks like turning to a specific angle, maintaining orientation, or implementing field-centric drive."
    },
    {
      "type": "code",
      "title": "Example: Turning to a Target Angle",
      "content": "This snippet shows how you might use IMU data to turn the robot to a specific heading (simplified):",
      "code": "float targetAngle = 90;\nwhile (Math.abs(imu.getAngularOrientation().firstAngle - targetAngle) > 2) {\n    // Set motor powers to turn\n    // ...\n    telemetry.addData(\"Current Angle\", imu.getAngularOrientation().firstAngle);\n    telemetry.update();\n}"
    },
    {
      "type": "emphasis-box",
      "title": "Troubleshooting and Best Practices",
      "content": "IMUs may require calibration and can drift over time. Always test your IMU before matches and handle exceptions in your code."
    },
    {
      "type": "link-grid",
      "title": "Related Topics",
      "content": [
        {"label": "Intro to Sensors", "url": "#intro-to-sensors"},
        {"label": "Touch Sensors", "url": "#touch-sensors"}
      ]
    },
    {
      "type": "link-grid",
      "title": "See Also",
      "content": [
        {"label": "FTC OpMode API: BNO055IMU", "url": "https://javadoc.io/doc/org.firstinspires.ftc/Hardware/latest/com/qualcomm/hardware/bosch/BNO055IMU.html"},
        {"label": "FTC OpMode API: Gyroscope", "url": "https://javadoc.io/doc/org.firstinspires.ftc/RobotCore/latest/com/qualcomm/robotcore/hardware/Gyroscope.html"}
      ]
    }
  ]
}
