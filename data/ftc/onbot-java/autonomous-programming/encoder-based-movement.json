{
  "title": "Encoder-Based Movement (OnBot Java)",
  "sections": [
    {
      "type": "text",
      "title": "What are Motor Encoders?",
      "content": "Motor encoders are sensors built into motors that measure rotation. In FTC, encoders allow you to move your robot a precise distance by counting the number of rotations or partial rotations of the wheels. This makes autonomous movement much more accurate than time-based methods."
    },
    {
      "type": "text",
      "title": "Using Encoders in FTC SDK",
      "content": "To use encoders in OnBot Java, you need to reset the encoders, set a target position, and run the motors to that position. The FTC SDK provides methods like <code>setMode()</code>, <code>setTargetPosition()</code>, and <code>setPower()</code> for this purpose."
    },
    {
      "type": "code",
      "title": "Encoder-Based Movement Example",
      "content": "This example shows how to drive forward a set distance using encoders. Each step is explained in the comments.",
      "code": "@Autonomous(name=\"EncoderMove\")\npublic class EncoderMove extends LinearOpMode {\n    private DcMotor leftDrive;\n    private DcMotor rightDrive;\n\n    @Override\n    public void runOpMode() {\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n\n        // Reset encoders\n        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\n        rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\n\n        // Set target position (e.g., 1000 encoder counts)\n        leftDrive.setTargetPosition(1000);\n        rightDrive.setTargetPosition(1000);\n\n        // Set to RUN_TO_POSITION mode\n        leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);\n        rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);\n\n        // Start moving\n        leftDrive.setPower(0.5);\n        rightDrive.setPower(0.5);\n\n        // Wait until motors reach target\n        while (opModeIsActive() && (leftDrive.isBusy() || rightDrive.isBusy())) {\n            telemetry.addData(\"Left Position\", leftDrive.getCurrentPosition());\n            telemetry.addData(\"Right Position\", rightDrive.getCurrentPosition());\n            telemetry.update();\n        }\n\n        // Stop all motion\n        leftDrive.setPower(0);\n        rightDrive.setPower(0);\n    }\n}"
    },
    {
      "type": "text",
      "title": "Writing Modular Encoder Movement Methods",
      "content": "To keep your code organized, write helper methods for common encoder-based movements. For example, create a <code>driveForward(int counts, double power)</code> method that handles all the encoder logic. This makes your code easier to read and reuse."
    },
    {
      "type": "code",
      "title": "Modular Encoder Movement Method Example",
      "content": "This snippet shows how to write a helper method for driving forward a set distance using encoders.",
      "code": "public void driveForward(int counts, double power) {\n    leftDrive.setTargetPosition(leftDrive.getCurrentPosition() + counts);\n    rightDrive.setTargetPosition(rightDrive.getCurrentPosition() + counts);\n    leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);\n    rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);\n    leftDrive.setPower(power);\n    rightDrive.setPower(power);\n    while (opModeIsActive() && (leftDrive.isBusy() || rightDrive.isBusy())) {\n        telemetry.addData(\"Left Position\", leftDrive.getCurrentPosition());\n        telemetry.addData(\"Right Position\", rightDrive.getCurrentPosition());\n        telemetry.update();\n    }\n    leftDrive.setPower(0);\n    rightDrive.setPower(0);\n}"
    },
    {
      "type": "text",
      "title": "Troubleshooting Encoder Issues",
      "content": "- If your robot doesn't move as expected, check that your motors are properly mapped and encoders are connected.\n- Make sure to reset encoders before starting a new movement.\n- If the robot moves the wrong distance, verify your counts-per-revolution and gear ratio calculations.\n- Use telemetry to monitor encoder values during testing."
    },
    {
      "type": "exercise-box",
      "title": "Practice Exercise: Encoder-Based Turn",
      "description": "Write a helper method that turns the robot in place using encoders. Test it by turning 90 degrees. Use telemetry to display encoder values during the turn.",
      "tasks": [
        "Write a method to set opposite target positions for left and right motors.",
        "Use RUN_TO_POSITION mode and set appropriate power.",
        "Monitor encoder values with telemetry.",
        "Stop motors after the turn is complete."
      ],
      "content": "// Your code here"
    }
  ]
}
