{
  "title": "Basic Autonomous Programming",
  "sections": [
    {
      "type": "text",
      "title": "What is Autonomous Mode?",
      "content": "Autonomous mode is a period at the start of every FTC match where the robot operates without human control. It is critical for scoring early points and demonstrating programming skill. Understanding autonomous is essential for competition success. <a href=\"https://gm0.org/en/latest/docs/software/getting-started/autonomous.html\" target=\"_blank\">gm0: Autonomous Programming</a> <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/autonomous/autonomous.html\" target=\"_blank\">FTC Docs: Autonomous Programming</a>"
    },
    {
      "type": "text",
      "title": "Structure of an Autonomous OpMode",
      "content": "An autonomous OpMode in FTC is a special Java class with the @Autonomous annotation. It contains an initialization section and a runOpMode() method where the main routine is written. <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/opmode/creating-an-opmode.html\" target=\"_blank\">FTC Docs: Creating an OpMode</a> <a href=\"https://gm0.org/en/latest/docs/software/tutorials/creating-an-opmode.html\" target=\"_blank\">gm0: Creating an OpMode</a>"
    },
    {
      "type": "code",
      "title": "Basic Autonomous OpMode Example",
      "language": "java",
      "content": "@Autonomous(name=\"My Autonomous\")\npublic class MyAutonomous extends LinearOpMode {\n    private DcMotor leftMotor, rightMotor;\n    @Override\n    public void runOpMode() {\n        leftMotor = hardwareMap.get(DcMotor.class, \"left_motor\");\n        rightMotor = hardwareMap.get(DcMotor.class, \"right_motor\");\n        leftMotor.setDirection(DcMotor.Direction.FORWARD);\n        rightMotor.setDirection(DcMotor.Direction.REVERSE);\n        telemetry.addData(\"Status\", \"Initialized\");\n        telemetry.update();\n        waitForStart();\n        // Autonomous actions go here\n    }\n}"
    },
    {
      "type": "text",
      "title": "Initialization vs. Autonomous Execution",
      "content": "Initialization (before waitForStart()) is for hardware setup and sensor calibration. Autonomous execution (after waitForStart()) is for robot actions. Place all movement and scoring code after waitForStart(). <a href=\"https://gm0.org/en/latest/docs/software/tutorials/creating-an-opmode.html#structure-of-an-opmode\" target=\"_blank\">gm0: Structure of an OpMode</a>"
    },
    {
      "type": "code",
      "title": "Initialization vs. Execution Example",
      "language": "java",
      "content": "@Override\npublic void runOpMode() {\n    // Initialization\n    leftMotor = hardwareMap.get(DcMotor.class, \"left_motor\");\n    // ...\n    waitForStart();\n    // Autonomous actions\n    leftMotor.setPower(0.5);\n    sleep(1000);\n    leftMotor.setPower(0);\n}"
    },
    {
      "type": "text",
      "title": "Basic Movement Commands",
      "content": "You can move the robot by setting motor power. Use small, focused code blocks for each movement type. <a href=\"https://gm0.org/en/latest/docs/software/tutorials/basic-movement.html\" target=\"_blank\">gm0: Basic Movement</a>"
    },
    {
      "type": "code",
      "title": "Drive Forward Example",
      "language": "java",
      "content": "leftMotor.setPower(0.5);\nrightMotor.setPower(0.5);\nsleep(1000); // Move forward for 1 second\nleftMotor.setPower(0);\nrightMotor.setPower(0);"
    },
    {
      "type": "text",
      "title": "Timing and Pausing (sleep)",
      "content": "Use sleep(milliseconds) to pause the robot for a set time. This is useful for simple, time-based autonomous routines. <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/autonomous/time-based-autonomous.html\" target=\"_blank\">FTC Docs: Time-Based Autonomous</a>"
    },
    {
      "type": "code",
      "title": "Timed Turn Example",
      "language": "java",
      "content": "leftMotor.setPower(0.5);\nrightMotor.setPower(-0.5);\nsleep(500); // Turn for 0.5 seconds\nleftMotor.setPower(0);\nrightMotor.setPower(0);"
    },
    {
      "type": "text",
      "title": "Safety and Best Practices",
      "content": "Always test autonomous code with the robot on blocks first. Use telemetry to monitor status. Avoid hard-coding values; use variables and functions for clarity. <a href=\"https://gm0.org/en/latest/docs/software/tutorials/creating-an-opmode.html#safety\" target=\"_blank\">gm0: OpMode Safety</a>"
    },
    {
      "type": "exercise-box",
      "title": "Autonomous Programming Practice",
      "description": "Try these hands-on tasks:",
      "tasks": [
        "Write an OpMode that drives forward, then turns, then stops.",
        "Add telemetry to display each action.",
        "Test your code on the robot with wheels off the ground.",
        "Modify your code to use variables for power and time.",
        "Research and add a reference link to the FTC SDK documentation."
      ]
    },
    {
      "type": "link-grid",
      "title": "Further Reading",
      "links": [
        { "label": "Time-Based Movement", "id": "time-based-movement" },
        { "label": "Encoder-Based Movement", "id": "encoder-based-movement" },
        { "label": "FTC SDK Introduction", "url": "https://gm0.org/en/latest/docs/software/getting-started/ftc-sdk.html" }
      ]
    }
  ]
} 
