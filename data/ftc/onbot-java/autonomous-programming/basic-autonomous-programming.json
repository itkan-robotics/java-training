{
  "title": "Basic Autonomous Programming (OnBot Java)",
  "sections": [
    {
      "type": "text",
      "title": "What is Autonomous Mode in FTC?",
      "content": "In FTC, autonomous mode is a period at the start of each match where the robot operates entirely based on pre-programmed instructions, without any driver input. This is your opportunity to score points by having your robot perform tasks automatically. Understanding how to structure and write autonomous code is essential for competition success."
    },
    {
      "type": "text",
      "title": "Structure of an FTC OpMode",
      "content": "FTC programs are organized into OpModes. An OpMode is a Java class that defines the robot's behavior for a specific mode (autonomous or teleop). In OnBot Java, you create a new OpMode by extending the <code>LinearOpMode</code> class and overriding the <code>runOpMode()</code> method. The OpMode must be annotated with <code>@Autonomous</code> to be selectable as an autonomous program. For more details, see <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/tutorial_specific/onbot_java/creating_op_modes/Creating-and-Running-an-Op-Mode-%28OnBot-Java%29.html\" target=\"_blank\">FTC Docs: Creating and Running an Op Mode (OnBot Java)</a>."
    },
    {
      "type": "code",
      "title": "Minimal Autonomous OpMode Example",
      "content": "This example shows the basic structure of an autonomous OpMode in OnBot Java. Each section of the code is explained in detail below.",
      "code": "@Autonomous(name=\"MyFirstAutonomous\")\npublic class MyFirstAutonomous extends LinearOpMode {\n    @Override\n    public void runOpMode() {\n        // Initialization code here\n        telemetry.addData(\"Status\", \"Initialized\");\n        telemetry.update();\n\n        // Wait for the game to start (driver presses PLAY)\n        waitForStart();\n\n        // Autonomous actions go here\n        while (opModeIsActive()) {\n            // Example: do nothing\n            telemetry.addData(\"Status\", \"Running\");\n            telemetry.update();\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Key FTC SDK Concepts for Autonomous",
      "content": "- <strong>Hardware Mapping:</strong> Use <code>hardwareMap.get()</code> to access motors, sensors, and servos.\n- <strong>Initialization:</strong> Set up your hardware and variables before <code>waitForStart()</code>.\n- <strong>waitForStart():</strong> Pauses your code until the match begins.\n- <strong>opModeIsActive():</strong> Use this in loops to keep your code running only while the OpMode is active.\n- <strong>Telemetry:</strong> Use <code>telemetry.addData()</code> and <code>telemetry.update()</code> to send information to the driver station.\n\nFor more, see <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/tutorial_specific/onbot_java/creating_op_modes/Creating-and-Running-an-Op-Mode-%28OnBot-Java%29.html\" target=\"_blank\">FTC Docs: Creating and Running an Op Mode (OnBot Java)</a>."
    },
    {
      "type": "code",
      "title": "Hardware Mapping Example",
      "content": "This snippet shows how to map a DC motor and use telemetry in your autonomous OpMode.",
      "code": "@Autonomous(name=\"HardwareMapExample\")\npublic class HardwareMapExample extends LinearOpMode {\n    private DcMotor leftDrive;\n\n    @Override\n    public void runOpMode() {\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        telemetry.addData(\"Status\", \"Hardware mapped\");\n        telemetry.update();\n        waitForStart();\n        leftDrive.setPower(0.5);\n        sleep(1000); // Run for 1 second\n        leftDrive.setPower(0);\n    }\n}"
    },
    {
      "type": "text",
      "title": "Best Practices for Modular Code",
      "content": "Avoid writing large, monolithic code files. Instead, break your code into small, focused methods for each task (e.g., initializeHardware, driveForward, stopMotors). This makes your code easier to read, debug, and reuse.\n\nExample modularization:\n<ul>\n  <li>Initialization: Set up all hardware and variables</li>\n  <li>Movement: Write separate methods for each movement or action</li>\n  <li>Sensor Logic: Isolate sensor reading and decision-making</li>\n</ul>"
    },
    {
      "type": "exercise-box",
      "title": "Practice Exercise: Your First Autonomous OpMode",
      "description": "Write an autonomous OpMode that drives a motor for 2 seconds, then stops. Use telemetry to display status before, during, and after movement.",
      "tasks": [
        "Map a DC motor using hardwareMap.",
        "Use waitForStart() to wait for the match to begin.",
        "Set the motor power to drive forward for 2 seconds.",
        "Stop the motor and update telemetry."
      ],
      "content": "// Your code here"
    }
  ]
}
