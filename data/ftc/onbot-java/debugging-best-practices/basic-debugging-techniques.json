{
  "title": "Basic Debugging Techniques in FTC OnBot Java",
  "sections": [
    {
      "type": "text",
      "title": "Introduction",
      "content": "Debugging is a critical skill for FTC programmers. In this lesson, you'll learn how to use OnBot Java's tools and best practices to find and fix bugs in your robot code. We'll focus on techniques that help you quickly identify issues and improve your code quality."
    },
    {
      "type": "text",
      "title": "Understanding the FTC OpMode Structure",
      "content": "Before you can debug effectively, you need to understand how an FTC OpMode is structured. Most bugs occur in initialization, hardware mapping, or the main loop. Knowing where to look is half the battle."
    },
    {
      "type": "code",
      "title": "Minimal OpMode Example",
      "content": "A simple OpMode structure helps you isolate bugs:",
      "code": "@TeleOp\npublic class DebugExampleOpMode extends LinearOpMode {\n    private DcMotor leftMotor;\n    @Override\n    public void runOpMode() {\n        leftMotor = hardwareMap.get(DcMotor.class, \"left_drive\");\n        telemetry.addData(\"Status\", \"Initialized\");\n        telemetry.update();\n        waitForStart();\n        while (opModeIsActive()) {\n            leftMotor.setPower(0.5);\n            telemetry.addData(\"Motor Power\", leftMotor.getPower());\n            telemetry.update();\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Using Telemetry for Debugging",
      "content": "Telemetry lets you see what's happening inside your robot in real time. Use it to print out variable values, sensor readings, and program state. This is your primary tool for debugging in OnBot Java."
    },
    {
      "type": "code",
      "title": "Telemetry Example",
      "content": "Add telemetry statements to track variables:",
      "code": "telemetry.addData(\"Encoder Position\", leftMotor.getCurrentPosition());\ntelemetry.addData(\"Loop Count\", loopCount);\ntelemetry.update();"
    },
    {
      "type": "text",
      "title": "Common Error Types and How to Interpret Them",
      "content": "You'll encounter errors like null pointer exceptions, hardware mapping errors, and syntax mistakes. Learning to read error messages and stack traces is essential. For example, a null pointer exception often means you forgot to initialize a variable or mapped hardware incorrectly. <br><br>For more on Java errors, see <a href=\"https://gm0.org/en/latest/docs/software/getting-started/fundamental-concepts.html\" target=\"_blank\">gm0: Fundamental Concepts of Programming</a>."
    },
    {
      "type": "code",
      "title": "Example: Null Pointer Exception",
      "content": "This code will throw a NullPointerException if leftMotor is not initialized:",
      "code": "leftMotor.setPower(1.0); // Throws error if leftMotor is null"
    },
    {
      "type": "text",
      "title": "Incremental Testing and Code Isolation",
      "content": "Test small sections of your code at a time. Comment out unrelated code and focus on one feature. This makes it easier to find where bugs are hiding."
    },
    {
      "type": "code",
      "title": "Isolating Code for Testing",
      "content": "// Only test motor initialization\nleftMotor = hardwareMap.get(DcMotor.class, \"left_drive\");\ntelemetry.addData(\"Status\", \"Motor mapped\");\ntelemetry.update();"
    },
    {
      "type": "list",
      "title": "Best Practices for Debugging in FTC",
      "content": [
        "Check your hardware configuration matches your code.",
        "Use descriptive variable names.",
        "Keep code modular and avoid large files.",
        "Test one change at a time.",
        "Use telemetry to monitor variables and states.",
        "Read error messages carefully and look up unfamiliar terms."
      ]
    },
    {
      "type": "exercise-box",
      "title": "Practice Debugging",
      "description": "Try introducing a bug into the example OpMode (such as misspelling a hardware name or skipping initialization). Observe the error message and use telemetry to help you find and fix the bug.",
      "tasks": [
        "Misspell the hardware name in hardwareMap.get(). What error do you see?",
        "Comment out the initialization line for leftMotor. What happens when you run the OpMode?",
        "Add a telemetry statement for a variable that doesn't exist. What error do you get?"
      ],
      "answers": [
        {
          "task": "Misspell the hardware name in hardwareMap.get(). What error do you see?",
          "content": "// Example: Misspelled hardware name\nleftMotor = hardwareMap.get(DcMotor.class, \"left_motorr\"); // Note the typo\n// When you run the OpMode, you will see an error like:\n// 'Unable to find a hardware device with the name left_motorr'\n// The OpMode will not start, and the error will be shown in the Driver Station log.\n// Always check that your hardware names match exactly with your configuration!"
        },
        {
          "task": "Comment out the initialization line for leftMotor. What happens when you run the OpMode?",
          "content": "// Example: Initialization line commented out\n// leftMotor = hardwareMap.get(DcMotor.class, \"left_drive\");\nleftMotor.setPower(0.5);\n// When you run the OpMode, you will get a NullPointerException.\n// The error message will say something like:\n// 'Attempt to invoke virtual method ... on a null object reference'\n// This means leftMotor was never initialized and is still null.\n// Always initialize your hardware before using it!"
        },
        {
          "task": "Add a telemetry statement for a variable that doesn't exist. What error do you get?",
          "content": "// Example: Telemetry for a non-existent variable\ntelemetry.addData(\"Value\", notARealVariable);\n// When you try to build or run the OpMode, you will get a compile-time error:\n// 'Cannot find symbol: variable notARealVariable'\n// The code will not compile until you fix the variable name.\n// Always check your variable names and make sure they are declared!"
        }
      ]
    }
  ]
} 
