{
  "title": "Basic Debugging Techniques (OnBot Java)",
  "sections": [
    {
      "type": "text",
      "title": "Understanding Common FTC Errors in OnBot Java",
      "content": "OnBot Java users encounter unique errors, such as hardware mapping issues and OpMode registration problems. Learn to read error messages and stack traces in the OnBot Java console. <a href=\"https://gm0.org/en/latest/docs/software/tutorials/common-errors.html\" target=\"_blank\">gm0: Common Errors</a> | <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/onbot_java/onbot_java.html\" target=\"_blank\">FTC Docs: OnBot Java</a>"
    },
    {
      "type": "text",
      "title": "Using Telemetry for Debugging",
      "content": "Telemetry is the main way to get feedback in OnBot Java. Add telemetry to your OpModes to see real-time data. <a href=\"https://gm0.org/en/latest/docs/software/tutorials/telemetry.html\" target=\"_blank\">gm0: Telemetry</a> | <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/ftc_sdk/telemetry.html\" target=\"_blank\">FTC Docs: Telemetry</a>"
    },
    {
      "type": "code",
      "title": "Adding Telemetry in OnBot Java",
      "language": "java",
      "content": "@TeleOp(name=\"TelemetryDebug\")\npublic class TelemetryDebug extends LinearOpMode {\n    DcMotor leftMotor;\n    @Override\n    public void runOpMode() {\n        leftMotor = hardwareMap.get(DcMotor.class, \"left_motor\");\n        waitForStart();\n        while (opModeIsActive()) {\n            telemetry.addData(\"Left Motor Power\", leftMotor.getPower());\n            telemetry.addData(\"Runtime\", getRuntime().seconds());\n            telemetry.update();\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Debugging with the OnBot Java Console",
      "content": "The OnBot Java console is your built-in log viewer. Use it to view errors, print debug messages, and interpret output. <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/onbot_java/onbot_java.html\" target=\"_blank\">FTC Docs: OnBot Java</a>"
    },
    {
      "type": "text",
      "title": "Incremental Testing and Isolating Problems",
      "content": "Create and run small, focused OpModes to test one subsystem or function at a time. Keep each test in a separate file. <a href=\"https://gm0.org/en/latest/docs/software/tutorials/testing.html\" target=\"_blank\">gm0: Testing Code</a>"
    },
    {
      "type": "code",
      "title": "Minimal Test OpMode Example",
      "language": "java",
      "content": "@TeleOp(name=\"TestDrivetrain\")\npublic class TestDrivetrain extends LinearOpMode {\n    DcMotor leftMotor, rightMotor;\n    @Override\n    public void runOpMode() {\n        leftMotor = hardwareMap.get(DcMotor.class, \"left_motor\");\n        rightMotor = hardwareMap.get(DcMotor.class, \"right_motor\");\n        waitForStart();\n        while (opModeIsActive()) {\n            leftMotor.setPower(gamepad1.left_stick_y);\n            rightMotor.setPower(gamepad1.right_stick_y);\n            telemetry.addData(\"Left\", leftMotor.getPower());\n            telemetry.addData(\"Right\", rightMotor.getPower());\n            telemetry.update();\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Best Practices: Avoiding Monolithic Code",
      "content": "OnBot Java supports multiple files and classes. Keep code manageable by creating a separate file for each subsystem or utility."
    },
    {
      "type": "list",
      "title": "Debugging Best Practices",
      "items": [
        "Start with simple tests and increase complexity gradually.",
        "Use descriptive telemetry messages.",
        "Test one component at a time.",
        "Document your debugging process.",
        "Use consistent debugging patterns.",
        "Verify everything with telemetry.",
        "Keep debugging code organized."
      ]
    },
    {
      "type": "link-grid",
      "title": "Related Topics",
      "links": [
        { "label": "State Machines", "id": "state-machines" },
        { "label": "Code Organization", "id": "code-organization" },
        { "label": "Telemetry Logging", "id": "telemetry-logging" }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Debugging Practice",
      "description": "Try these exercises to master debugging in OnBot Java:",
      "tasks": [
        "Create a debugging OpMode with telemetry for all hardware.",
        "Practice debugging hardware issues.",
        "Debug a logic problem step by step.",
        "Implement conditional telemetry for specific scenarios.",
        "Document your debugging process."
      ],
      "content": "// Practice: Create a debugging OpMode\n// - Add telemetry for each hardware component\n// - Test one subsystem at a time\n// - Use clear, descriptive messages\n// - Document your findings"
    }
  ]
} 
