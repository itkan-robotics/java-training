{
  "title": "Troubleshooting Common FTC Programming Issues",
  "sections": [
    {
      "type": "text",
      "title": "Introduction",
      "content": "Even experienced programmers run into common issues when working with FTC robots. This lesson will help you quickly identify and fix the most frequent problems in OnBot Java."
    },
    {
      "type": "text",
      "title": "Hardware Mapping Errors",
      "content": "One of the most common issues is a mismatch between your hardware configuration and your code. If you misspell a device name or forget to add a device in the configuration, your code will throw an error. Always double-check that your hardwareMap.get() calls match the names in your configuration."
    },
    {
      "type": "code",
      "title": "Example: Hardware Mapping Error",
      "content": "Because configuration names are case-sensitive, this code will throw an error even if 'left_drive' is in your configuration:",
      "code": "leftMotor = hardwareMap.get(DcMotor.class, \"LEFT_DRIVE\");"
    },
    {
      "type": "text",
      "title": "OpMode Lifecycle Mistakes",
      "content": "Understanding when your code runs is crucial. Initialization code should go before waitForStart(), and your main loop should be inside while (opModeIsActive()). Placing code in the wrong place can cause unexpected behavior."
    },
    {
      "type": "code",
      "title": "Correct OpMode Structure",
      "content": "@TeleOp\npublic class LifecycleExample extends LinearOpMode {\n    private DcMotor leftMotor;\n    @Override\n    public void runOpMode() {\n        leftMotor = hardwareMap.get(DcMotor.class, \"left_drive\");\n        waitForStart();\n        while (opModeIsActive()) {\n            leftMotor.setPower(0.5);\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Sensor and Motor Initialization Problems",
      "content": "If you try to use a sensor or motor before it's initialized, you'll get errors or unexpected results. Always initialize all hardware before waitForStart()."
    },
    {
      "type": "code",
      "title": "Initialization Example",
      "content": "// Correct\nleftMotor = hardwareMap.get(DcMotor.class, \"left_drive\");\n// Incorrect (will cause errors)\nleftMotor.setPower(1.0); // leftMotor not initialized yet"
    },
    {
      "type": "list",
      "title": "Quick Troubleshooting Checklist",
      "content": [
        "Check that all device names in your code match your configuration.",
        "Initialize all hardware before waitForStart().",
        "Put your main robot logic inside while (opModeIsActive()).",
        "Use telemetry to display variable values and program state.",
        "Read error messages carefully and look up unfamiliar terms."
      ]
    },
    {
      "type": "exercise-box",
      "title": "Practice: Find and Fix Common Issues",
      "description": "Below is an OpMode with multiple errors. Your task is to identify all the problems and fix them. Here are the devices configured in your robot:",
      "tasks": [
        "Identify all errors in the provided OpMode code.",
        "Explain what each error is and why it occurs.",
        "Provide a corrected version of the OpMode."
      ],
      "content": "// Configured Devices:\n// - left_drive (DcMotor)\n// - right_drive (DcMotor)\n// - claw_servo (Servo)\n// - color_sensor (ColorSensor)\n// - touch_sensor (TouchSensor)\n\n// Find all the errors in this OpMode:\n@TeleOp\npublic class BuggyOpMode extends LinearOpMode {\n    private DcMotor leftMotor, rightMotor;\n    private Servo clawServo;\n    private ColorSensor colorSensor;\n    private TouchSensor touchSensor;\n    \n    @Override\n    public void runOpMode() {\n        // Initialize hardware\n        leftMotor = hardwareMap.get(DcMotor.class, \"LEFT_DRIVE\");\n        rightMotor = hardwareMap.get(DcMotor.class, \"right_drive\");\n        clawServo = hardwareMap.get(Servo.class, \"claw_servo\");\n        colorSensor = hardwareMap.get(ColorSensor.class, \"color_sensor\");\n        touchSensor = hardwareMap.get(TouchSensor.class, \"touch_sensor\");\n        \n        // Set motor power before initialization\n        leftMotor.setPower(0.5);\n        \n        telemetry.addData(\"Status\", \"Initialized\");\n        telemetry.update();\n        \n        waitForStart();\n        \n        // Main loop\n        while (opModeIsActive()) {\n            // Drive logic\n            double leftPower = -gamepad1.left_stick_y;\n            double rightPower = -gamepad1.right_stick_y;\n            leftMotor.setPower(leftPower);\n            rightMotor.setPower(rightPower);\n            \n            // Claw control\n            if (gamepad1.a) {\n                clawServo.setPosition(1.0);\n            } else if (gamepad1.b) {\n                clawServo.setPosition(0.0);\n            }\n            \n            // Sensor reading\n            if (colorSensor.red() > 100) {\n                telemetry.addData(\"Color Detected\", \"Red\");\n            }\n            \n            if (touchSensor.isPressed()) {\n                telemetry.addData(\"Touch Sensor\", \"Pressed\");\n            }\n            \n            telemetry.addData(\"Left Power\", leftPower);\n            telemetry.addData(\"Right Power\", rightPower);\n            telemetry.addData(\"Claw Position\", clawServo.getPosition());\n            telemetry.update();\n        }\n        \n        // Code after the loop (will never execute)\n        leftMotor.setPower(0);\n        rightMotor.setPower(0);\n    }\n}",
      "answers": [
        {
          "task": "Identify all errors in the provided OpMode code.",
          "content": "There are 4 errors in this OpMode:\n\n1. **Hardware Mapping Error (Line 12)**: \"LEFT_DRIVE\" should be \"left_drive\" (case-sensitive)\n2. **Initialization Order Error (Line 18)**: Setting motor power before waitForStart()\n3. **Unreachable Code Error (Lines 47-49)**: Code after the while loop will never execute\n4. **Missing Error Handling**: No try-catch for potential hardware failures"
        },
        {
          "task": "Explain what each error is and why it occurs.",
          "content": "**Error 1**: Hardware mapping is case-sensitive. \"LEFT_DRIVE\" doesn't match the configured \"left_drive\".\n\n**Error 2**: Setting motor power before waitForStart() can cause unexpected behavior since the robot isn't ready yet.\n\n**Error 3**: Code after the while loop is unreachable because the loop only exits when the OpMode stops.\n\n**Error 4**: Missing error handling means hardware failures could crash the program."
        },
        {
          "task": "Provide a corrected version of the OpMode.",
          "content": "@TeleOp\npublic class FixedOpMode extends LinearOpMode {\n    private DcMotor leftMotor, rightMotor;\n    private Servo clawServo;\n    private ColorSensor colorSensor;\n    private TouchSensor touchSensor;\n    \n    @Override\n    public void runOpMode() {\n        try {\n            // Initialize hardware with correct names\n            leftMotor = hardwareMap.get(DcMotor.class, \"left_drive\");\n            rightMotor = hardwareMap.get(DcMotor.class, \"right_drive\");\n            clawServo = hardwareMap.get(Servo.class, \"claw_servo\");\n            colorSensor = hardwareMap.get(ColorSensor.class, \"color_sensor\");\n            touchSensor = hardwareMap.get(TouchSensor.class, \"touch_sensor\");\n            \n            telemetry.addData(\"Status\", \"Initialized\");\n            telemetry.update();\n            \n            waitForStart();\n            \n            // Main loop\n            while (opModeIsActive()) {\n                // Drive logic\n                double leftPower = -gamepad1.left_stick_y;\n                double rightPower = -gamepad1.right_stick_y;\n                leftMotor.setPower(leftPower);\n                rightMotor.setPower(rightPower);\n                \n                // Claw control\n                if (gamepad1.a) {\n                    clawServo.setPosition(1.0);\n                } else if (gamepad1.b) {\n                    clawServo.setPosition(0.0);\n                }\n                \n                // Sensor reading\n                if (colorSensor.red() > 100) {\n                    telemetry.addData(\"Color Detected\", \"Red\");\n                }\n                \n                if (touchSensor.isPressed()) {\n                    telemetry.addData(\"Touch Sensor\", \"Pressed\");\n                }\n                \n                telemetry.addData(\"Left Power\", leftPower);\n                telemetry.addData(\"Right Power\", rightPower);\n                telemetry.addData(\"Claw Position\", clawServo.getPosition());\n                telemetry.update();\n            }\n        } catch (Exception e) {\n            telemetry.addData(\"Error\", e.getMessage());\n            telemetry.update();\n        }\n    }\n}"
        }
      ]
    },
{
  "type": "link-grid",
  "title": "Further Reading Resources",
  "content": [
    {
      "label": "Basic Debugging Techniques",
      "id": "basic-debugging-techniques"
    },
    {
      "label": "GeeksforGeeks: Debugging in Java",
      "url": "https://www.geeksforgeeks.org/java/top-5-java-debugging-tips/"
    },
    {
      "label": "Java: Troubleshooting and Debugging Tips (Oracle)",
      "url": "https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/"
    }
  ]
}
  ]
}
