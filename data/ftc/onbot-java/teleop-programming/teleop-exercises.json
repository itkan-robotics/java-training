{
  "title": "TeleOp Programming Exercises and Challenges",
  "sections": [
    {
      "type": "text",
      "title": "Purpose of Exercises",
      "content": "Hands-on practice is essential for mastering TeleOp programming. These exercises are designed to reinforce and apply the concepts you've learned in previous lessons."
    },
    {
      "type": "exercise-box",
      "title": "Drive in a Square (with REV IMU)",
      "description": "Write code to make the robot drive in a square pattern using TeleOp controls. Use the built-in REV IMU to turn exactly 90 degrees for each corner. Use helper methods for each movement.",
      "tasks": [
        "Map drive motors and the built-in REV IMU.",
        "Write a helper method to drive forward for a set time.",
        "Write a helper method to turn 90 degrees using the IMU.",
        "Use a button to trigger the square-driving sequence."
      ],
      "answers": [
        {
          "task": "Map drive motors and the built-in REV IMU.",
          "content": "// Map drive motors and IMU in your OpMode\nDcMotor leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\nDcMotor rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\nIMU imu = hardwareMap.get(IMU.class, \"imu\");\n// Make sure these names match your robot configuration!"
        },
        {
          "task": "Write a helper method to drive forward for a set time.",
          "content": "// Helper method to drive forward\nprivate void driveForward(double power, long timeMs) {\n    leftDrive.setPower(power);\n    rightDrive.setPower(power);\n    sleep(timeMs);\n    leftDrive.setPower(0);\n    rightDrive.setPower(0);\n}"
        },
        {
          "task": "Write a helper method to turn 90 degrees using the IMU.",
          "content": "// Helper method to turn 90 degrees (right) using the IMU\nprivate void turn90WithIMU(double power) {\n    double startAngle = imu.getRobotYawPitchRollAngles().getYaw(AngleUnit.DEGREES);\n    double targetAngle = startAngle + 90.0;\n    // Normalize target angle to [-180, 180]\n    if (targetAngle > 180) targetAngle -= 360;\n    leftDrive.setPower(power);\n    rightDrive.setPower(-power);\n    while (opModeIsActive() && Math.abs(getAngleDiff(\n        imu.getRobotYawPitchRollAngles().getYaw(AngleUnit.DEGREES), targetAngle)) > 2.0) {\n        telemetry.addData(\"Turning to\", targetAngle);\n        telemetry.addData(\"Current\", imu.getRobotYawPitchRollAngles().getYaw(AngleUnit.DEGREES));\n        telemetry.update();\n    }\n    leftDrive.setPower(0);\n    rightDrive.setPower(0);\n}\n// Helper to compute shortest angle difference\nprivate double getAngleDiff(double current, double target) {\n    double diff = target - current;\n    while (diff > 180) diff -= 360;\n    while (diff < -180) diff += 360;\n    return diff;\n}\n// Adjust the power and tolerance as needed for your robot."
        },
        {
          "task": "Use a button to trigger the square-driving sequence.",
          "content": "// In your main loop\nif (gamepad1.x && !lastX) {\n    for (int i = 0; i < 4; i++) {\n        driveForward(0.5, 1000); // Drive forward\n        turn90WithIMU(0.3);      // Turn 90 degrees using IMU\n    }\n}\n// Make sure to debounce the button or only allow the sequence to run once per press."
        },
        {
          "task": "Combine all tasks into one working OpMode.",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.DcMotor;\nimport com.qualcomm.hardware.rev.RevHubOrientationOnRobot;\nimport com.qualcomm.hardware.rev.RevHubOrientationOnRobot.LogoFacingDirection;\nimport com.qualcomm.hardware.rev.RevHubOrientationOnRobot.UsbFacingDirection;\nimport com.qualcomm.robotcore.hardware.IMU;\nimport org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;\n\n@TeleOp(name = \"DriveSquareIMUOpMode\")\npublic class DriveSquareIMUOpMode extends LinearOpMode {\n    private DcMotor leftDrive, rightDrive;\n    private IMU imu;\n    private boolean lastX = false;\n    @Override\n    public void runOpMode() {\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        imu = hardwareMap.get(IMU.class, \"imu\");\n        // Set up IMU orientation (adjust for your robot's mounting)\n        RevHubOrientationOnRobot orientationOnRobot = new RevHubOrientationOnRobot(\n            LogoFacingDirection.UP, UsbFacingDirection.FORWARD);\n        imu.initialize(new IMU.Parameters(orientationOnRobot));\n        waitForStart();\n        while (opModeIsActive()) {\n            if (gamepad1.x && !lastX) {\n                for (int i = 0; i < 4; i++) {\n                    driveForward(0.5, 1000);\n                    turn90WithIMU(0.3);\n                }\n            }\n            lastX = gamepad1.x;\n            telemetry.addData(\"Status\", \"Waiting for X button\");\n            telemetry.update();\n        }\n    }\n    private void driveForward(double power, long timeMs) {\n        leftDrive.setPower(power);\n        rightDrive.setPower(power);\n        sleep(timeMs);\n        leftDrive.setPower(0);\n        rightDrive.setPower(0);\n    }\n    private void turn90WithIMU(double power) {\n        double startAngle = imu.getRobotYawPitchRollAngles().getYaw(AngleUnit.DEGREES);\n        double targetAngle = startAngle + 90.0;\n        if (targetAngle > 180) targetAngle -= 360;\n        leftDrive.setPower(power);\n        rightDrive.setPower(-power);\n        while (opModeIsActive() && Math.abs(getAngleDiff(\n            imu.getRobotYawPitchRollAngles().getYaw(AngleUnit.DEGREES), targetAngle)) > 2.0) {\n            telemetry.addData(\"Turning to\", targetAngle);\n            telemetry.addData(\"Current\", imu.getRobotYawPitchRollAngles().getYaw(AngleUnit.DEGREES));\n            telemetry.update();\n        }\n        leftDrive.setPower(0);\n        rightDrive.setPower(0);\n    }\n    private double getAngleDiff(double current, double target) {\n        double diff = target - current;\n        while (diff > 180) diff -= 360;\n        while (diff < -180) diff += 360;\n        return diff;\n    }\n}"
        }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Servo Toggle",
      "description": "Implement a button toggle to open/close a claw or move a servo to two positions.",
      "tasks": [
        "Map a servo.",
        "Use edge detection to toggle the servo position with a button.",
        "Display the servo state with telemetry."
      ],
      "answers": [
        {
          "task": "Map a servo.",
          "content": "// Map the servo\nServo clawServo = hardwareMap.get(Servo.class, \"claw_servo\");"
        },
        {
          "task": "Use edge detection to toggle the servo position with a button.",
          "content": "// Edge detection for toggle\nprivate boolean lastA = false;\nprivate boolean clawOpen = false;\nprivate void toggleClaw() {\n    if (gamepad1.a && !lastA) {\n        clawOpen = !clawOpen;\n        clawServo.setPosition(clawOpen ? 1.0 : 0.0);\n    }\n    lastA = gamepad1.a;\n}"
        },
        {
          "task": "Display the servo state with telemetry.",
          "content": "// Telemetry for servo state\ntelemetry.addData(\"Claw State\", clawOpen ? \"Open\" : \"Closed\");\ntelemetry.update();"
        },
        {
          "task": "Combine all tasks into one working OpMode.",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.Servo;\n\n@TeleOp(name = \"ServoToggleOpMode\")\npublic class ServoToggleOpMode extends LinearOpMode {\n    private Servo clawServo;\n    private boolean lastA = false;\n    private boolean clawOpen = false;\n    @Override\n    public void runOpMode() {\n        clawServo = hardwareMap.get(Servo.class, \"claw_servo\");\n        waitForStart();\n        while (opModeIsActive()) {\n            if (gamepad1.a && !lastA) {\n                clawOpen = !clawOpen;\n                clawServo.setPosition(clawOpen ? 1.0 : 0.0);\n            }\n            lastA = gamepad1.a;\n            telemetry.addData(\"Claw State\", clawOpen ? \"Open\" : \"Closed\");\n            telemetry.update();\n        }\n    }\n}"
        }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Display Arm Position",
      "description": "Use telemetry to show the current position of an arm or lift.",
      "tasks": [
        "Map an arm or lift motor with an encoder.",
        "Read the encoder value.",
        "Display the value with telemetry."
      ],
      "answers": [
        {
          "task": "Map an arm or lift motor with an encoder.",
          "content": "// Map the arm/lift motor\nDcMotor armMotor = hardwareMap.get(DcMotor.class, \"arm_motor\");"
        },
        {
          "task": "Read the encoder value.",
          "content": "// Read encoder value\nint armPosition = armMotor.getCurrentPosition();"
        },
        {
          "task": "Display the value with telemetry.",
          "content": "// Telemetry for arm position\ntelemetry.addData(\"Arm Position\", armMotor.getCurrentPosition());\ntelemetry.update();"
        },
        {
          "task": "Combine all tasks into one working OpMode.",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.DcMotor;\n\n@TeleOp(name = \"ArmPositionOpMode\")\npublic class ArmPositionOpMode extends LinearOpMode {\n    private DcMotor armMotor;\n    @Override\n    public void runOpMode() {\n        armMotor = hardwareMap.get(DcMotor.class, \"arm_motor\");\n        waitForStart();\n        while (opModeIsActive()) {\n            int armPosition = armMotor.getCurrentPosition();\n            telemetry.addData(\"Arm Position\", armPosition);\n            telemetry.update();\n        }\n    }\n}"
        }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Slow Mode",
      "description": "Add a button to enable/disable slow mode for precise driving.",
      "tasks": [
        "Use a button to toggle slow mode.",
        "Multiply drive power by a lower value when slow mode is active.",
        "Display slow mode status with telemetry."
      ],
      "answers": [
        {
          "task": "Use a button to toggle slow mode.",
          "content": "// Use left bumper for slow mode\nboolean slowMode = gamepad1.left_bumper;"
        },
        {
          "task": "Multiply drive power by a lower value when slow mode is active.",
          "content": "// Apply speed scaling\ndouble speed = slowMode ? 0.3 : 1.0;\nleftDrive.setPower(-gamepad1.left_stick_y * speed);\nrightDrive.setPower(-gamepad1.right_stick_y * speed);"
        },
        {
          "task": "Display slow mode status with telemetry.",
          "content": "// Telemetry for slow mode\ntelemetry.addData(\"Mode\", slowMode ? \"SLOW\" : \"NORMAL\");\ntelemetry.update();"
        },
        {
          "task": "Combine all tasks into one working OpMode.",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.DcMotor;\n\n@TeleOp(name = \"SlowModeOpMode\")\npublic class SlowModeOpMode extends LinearOpMode {\n    private DcMotor leftDrive, rightDrive;\n    @Override\n    public void runOpMode() {\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        waitForStart();\n        while (opModeIsActive()) {\n            boolean slowMode = gamepad1.left_bumper;\n            double speed = slowMode ? 0.3 : 1.0;\n            leftDrive.setPower(-gamepad1.left_stick_y * speed);\n            rightDrive.setPower(-gamepad1.right_stick_y * speed);\n            telemetry.addData(\"Mode\", slowMode ? \"SLOW\" : \"NORMAL\");\n            telemetry.update();\n        }\n    }\n}"
        }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Multi-Subsystem Control",
      "description": "Control two mechanisms (e.g., drive and arm) simultaneously with different gamepad inputs.",
      "tasks": [
        "Map drive motors and an arm motor.",
        "Use the left stick for driving and buttons for the arm.",
        "Add telemetry for both subsystems."
      ],
      "answers": [
        {
          "task": "Map drive motors and an arm motor.",
          "content": "// Map hardware\nDcMotor leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\nDcMotor rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\nDcMotor armMotor = hardwareMap.get(DcMotor.class, \"arm_motor\");"
        },
        {
          "task": "Use the left stick for driving and buttons for the arm.",
          "content": "// Drive and arm control\nleftDrive.setPower(-gamepad1.left_stick_y);\nrightDrive.setPower(-gamepad1.right_stick_y);\nif (gamepad1.a) {\n    armMotor.setPower(1.0);\n} else if (gamepad1.b) {\n    armMotor.setPower(-1.0);\n} else {\n    armMotor.setPower(0.0);\n}"
        },
        {
          "task": "Add telemetry for both subsystems.",
          "content": "// Telemetry for drive and arm\ntelemetry.addData(\"Left Power\", leftDrive.getPower());\ntelemetry.addData(\"Right Power\", rightDrive.getPower());\ntelemetry.addData(\"Arm Position\", armMotor.getCurrentPosition());\ntelemetry.update();"
        },
        {
          "task": "Combine all tasks into one working OpMode.",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.DcMotor;\n\n@TeleOp(name = \"MultiSubsystemOpMode\")\npublic class MultiSubsystemOpMode extends LinearOpMode {\n    private DcMotor leftDrive, rightDrive, armMotor;\n    @Override\n    public void runOpMode() {\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        armMotor = hardwareMap.get(DcMotor.class, \"arm_motor\");\n        waitForStart();\n        while (opModeIsActive()) {\n            leftDrive.setPower(-gamepad1.left_stick_y);\n            rightDrive.setPower(-gamepad1.right_stick_y);\n            if (gamepad1.a) {\n                armMotor.setPower(1.0);\n            } else if (gamepad1.b) {\n                armMotor.setPower(-1.0);\n            } else {\n                armMotor.setPower(0.0);\n            }\n            telemetry.addData(\"Left Power\", leftDrive.getPower());\n            telemetry.addData(\"Right Power\", rightDrive.getPower());\n            telemetry.addData(\"Arm Position\", armMotor.getCurrentPosition());\n            telemetry.update();\n        }\n    }\n}"
        }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Troubleshooting Scenarios",
      "description": "Practice diagnosing and fixing common TeleOp issues.",
      "tasks": [
        "Fix code where a motor does not move.",
        "Debug a button that does not trigger the expected action.",
        "Find and fix a missing telemetry.update() call."
      ],
      "answers": [
        {
          "task": "Fix code where a motor does not move.",
          "content": "// Check hardware mapping and power\n// Example: Make sure the name matches configuration\nDcMotor leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\nleftDrive.setPower(0.5); // Set a nonzero power\n// Also check for wiring and configuration issues."
        },
        {
          "task": "Debug a button that does not trigger the expected action.",
          "content": "// Check for correct button logic\nif (gamepad1.a) {\n    // Action here\n}\n// Make sure the button is not being overridden elsewhere and that the gamepad is connected."
        },
        {
          "task": "Find and fix a missing telemetry.update() call.",
          "content": "// Always call telemetry.update() after adding data\ntelemetry.addData(\"Status\", \"Running\");\ntelemetry.update(); // This line is required to display telemetry on the Driver Station."
        },
        {
          "task": "Combine all tasks into one working OpMode.",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.DcMotor;\n\n@TeleOp(name = \"TroubleshootingOpMode\")\npublic class TroubleshootingOpMode extends LinearOpMode {\n    private DcMotor leftDrive;\n    @Override\n    public void runOpMode() {\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        waitForStart();\n        while (opModeIsActive()) {\n            // Example: Fix motor not moving\n            leftDrive.setPower(0.5);\n            // Example: Button debug\n            if (gamepad1.a) {\n                telemetry.addData(\"Button A\", \"Pressed\");\n            }\n            // Example: Telemetry update\n            telemetry.addData(\"Status\", \"Running\");\n            telemetry.update();\n        }\n    }\n}"
        }
      ]
    },
    {
      "type": "text",
      "title": "Reflection and Extension",
      "content": "After completing these exercises, think about how you could extend your code. Try adding a new feature, optimizing your logic, or combining multiple exercises into a single OpMode."
    },
    {
      "type": "link-grid",
      "title": "Related Topics",
      "content": [
        {
          "title": "Gamepad Controls in FTC",
          "id": "gamepad-controls.json"
        },
        {
          "title": "Sensors: IMU",
          "id": "imu"
        },
        {
          "title": "Advanced Telemetry Feedback",
          "id": "telemetry-feedback"
        },
        {
          "title": "FTC SDK Telemetry API Reference",
          "url": "https://javadoc.io/doc/org.firstinspires.ftc/RobotCore/latest/org/firstinspires/ftc/robotcore/external/Telemetry.html"
        },
        {
          "title": "gm0: Gamepad Usage",
          "url": "https://gm0.org/en/latest/docs/software/tutorials/gamepad.html#storing-gamepad-state#storing-gamepad-state"
        }
      ]
    }
  ]
}
