{
  "title": "Subsystem Organization and Modular Code",
  "sections": [
    {
      "type": "text",
      "title": "Why Modular Code Matters",
      "content": "As your robot gets more complex, writing all your code in one big file becomes unmanageable. Modular code—breaking your logic into subsystems and helper methods—makes your code easier to read, debug, and expand."
    },
    {
      "type": "text",
      "title": "Identifying Robot Subsystems",
      "content": "A subsystem is a part of your robot with its own logic, like a drivetrain, arm, or claw. Each subsystem should have its own methods (or even its own class) to keep your code organized. <br><br>For more on modular code, see <a href=\"https://gm0.org/en/latest/docs/software/getting-started/fundamental-concepts.html\" target=\"_blank\">gm0: Fundamental Concepts</a>."
    },
    {
      "type": "code",
      "title": "Example: Helper Methods for Subsystems",
      "content": "This snippet shows how to separate drive and arm logic into their own methods.",
      "code": "private void drive() {\n    double leftPower = -gamepad1.left_stick_y;\n    double rightPower = -gamepad1.right_stick_y;\n    leftDrive.setPower(leftPower);\n    rightDrive.setPower(rightPower);\n}\nprivate void operateArm() {\n    if (gamepad1.a) {\n        armMotor.setPower(1.0);\n    } else if (gamepad1.b) {\n        armMotor.setPower(-1.0);\n    } else {\n        armMotor.setPower(0.0);\n    }\n}"
    },
    {
      "type": "text",
      "title": "(Optional) Using Java Classes for Subsystems",
      "content": "For advanced organization, you can create a Java class for each subsystem. This mirrors real-world software engineering and makes your code even more modular."
    },
    {
      "type": "code",
      "title": "Example: Simple Drivetrain Class",
      "content": "public class Drivetrain {\n    private DcMotor leftDrive, rightDrive;\n    public Drivetrain(HardwareMap hardwareMap) {\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n    }\n    public void drive(double leftPower, double rightPower) {\n        leftDrive.setPower(leftPower);\n        rightDrive.setPower(rightPower);\n    }\n}"
    },
    {
      "type": "text",
      "title": "Integrating Subsystems in the Main Loop",
      "content": "Call your subsystem methods from the main loop to keep your OpMode clean and organized."
    },
    {
      "type": "code",
      "title": "Example: Main Loop with Subsystems",
      "content": "@Override\npublic void runOpMode() {\n    // ... hardware mapping ...\n    waitForStart();\n    while (opModeIsActive()) {\n        drive();\n        operateArm();\n        telemetry.update();\n    }\n}"
    },
    {
      "type": "text",
      "title": "Best Practices",
      "content": "Modular code helps with collaboration, debugging, and future expansion. Each team member can work on a different subsystem, and bugs are easier to isolate."
    },
    {
      "type": "exercise-box",
      "title": "Practice Exercise: Modular TeleOp",
      "description": "Refactor a basic TeleOp OpMode to use helper methods for each subsystem. For advanced students, try creating a class for one subsystem.",
      "tasks": [
        "Identify at least two subsystems in your robot.",
        "Write a helper method for each subsystem.",
        "Call each helper method from your main loop.",
        "(Optional) Create a Java class for a subsystem."
      ],
      "content": "// Example helper method for a claw\nprivate void controlClaw() {\n    if (gamepad1.x) {\n        clawServo.setPosition(1.0);\n    } else if (gamepad1.y) {\n        clawServo.setPosition(0.0);\n    }\n}"
    },
    {
      "type": "link-grid",
      "title": "Related Topics",
      "content": [
        
      ]
    }
  ]
}
