{
  "title": "Subsystem Organization and Modular Code",
  "sections": [
    {
      "type": "text",
      "title": "Why Modular Code Matters",
      "content": "As your robot gets more complex, writing all your code in one big file becomes unmanageable. Modular code—breaking your logic into subsystems and helper methods—makes your code easier to read, debug, and expand."
    },
    {
      "type": "text",
      "title": "Identifying Robot Subsystems",
      "content": "A subsystem is a part of your robot with its own logic, like a drivetrain, arm, or claw. Each subsystem should have its own methods (or even its own class) to keep your code organized."
    },
    {
      "type": "code",
      "title": "Example: Helper Methods for Subsystems",
      "content": "This snippet shows how to separate drive and arm logic into their own methods.",
      "code": "private void drive() {\n    double leftPower = -gamepad1.left_stick_y;\n    double rightPower = -gamepad1.right_stick_y;\n    leftDrive.setPower(leftPower);\n    rightDrive.setPower(rightPower);\n}\nprivate void operateArm() {\n    if (gamepad1.a) {\n        armMotor.setPower(1.0);\n    } else if (gamepad1.b) {\n        armMotor.setPower(-1.0);\n    } else {\n        armMotor.setPower(0.0);\n    }\n}"
    },
    {
      "type": "text",
      "title": "(Optional) Using Java Classes for Subsystems",
      "content": "For advanced organization, you can create a Java class for each subsystem. This mirrors real-world software engineering and makes your code even more modular."
    },
    {
      "type": "code",
      "title": "Example: Simple Drivetrain Class",
      "content": "public class Drivetrain {\n    private DcMotor leftDrive, rightDrive;\n\n    // Get the hardwareMap from the teleop program when we initialize the Drivetrain class\n    // because it is only accessible in the teleop program\n    public Drivetrain(HardwareMap hardwareMap) {\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n    }\n    public void drive(double leftPower, double rightPower) {\n        leftDrive.setPower(leftPower);\n        rightDrive.setPower(rightPower);\n    }\n}"
    },
    {
      "type": "text",
      "title": "Integrating Subsystem Classes in the Main Loop",
      "content": "When each subsystem is its own class, you must first create and initialize each subsystem object before using it in your OpMode. This makes your code modular and allows you to call methods on each subsystem instance from your main loop, keeping your OpMode organized and easy to read."
    },
    {
      "type": "code",
      "title": "Example: Main Loop with Subsystem Classes",
      "content": "private Drivetrain drivetrain;\nprivate Arm arm;\n\n@Override\npublic void runOpMode() {\n    //Initialize our subsystems\n    drivetrain = new Drivetrain(hardwareMap);\n    arm = new Arm(hardwareMap);\n    //Initialize the rest of our subsystems...\n\n    waitForStart();\n    while (opModeIsActive()) {\n        //Call our methods on the subsystems\n        drivetrain.drive(-gamepad1.left_stick_y, -gamepad1.right_stick_y);\n        arm.operate(gamepad1.a, gamepad1.b);\n        telemetry.update();\n    }\n}"
    },
    {
      "type": "text",
      "title": "Best Practices",
      "content": "Modular code helps with collaboration, debugging, and future expansion. Each team member can work on a different subsystem, and bugs are easier to isolate."
    },
    {
      "type": "exercise-box",
      "title": "Practice Exercise: Modular TeleOp",
      "description": "Refactor a basic TeleOp OpMode to use helper methods for each subsystem. For advanced students, try creating a class for one subsystem.",
      "tasks": [
        "Identify at least two subsystems in your robot.",
        "Write a helper method for each subsystem.",
        "Call each helper method from your main loop.",
        "(Optional) Create a Java class for a subsystem."
      ],
      "answers": [
        {
          "task": "Identify at least two subsystems in your robot."
        },
        {
          "task": "Write a helper method for each subsystem.",
          "content": "// Helper method for driving\nprivate void drive() {\n    double leftPower = -gamepad1.left_stick_y;\n    double rightPower = -gamepad1.right_stick_y;\n    leftDrive.setPower(leftPower);\n    rightDrive.setPower(rightPower);\n}\n// Helper method for operating the arm\nprivate void operateArm() {\n    if (gamepad1.a) {\n        armMotor.setPower(1.0);\n    } else if (gamepad1.b) {\n        armMotor.setPower(-1.0);\n    } else {\n        armMotor.setPower(0.0);\n    }\n}"
        },
        {
          "task": "Call each helper method from your main loop.",
          "content": "@Override\npublic void runOpMode() {\n    // Initialize hardware (leftDrive, rightDrive, armMotor, etc.)\n    // ...\n    waitForStart();\n    while (opModeIsActive()) {\n        drive(); // Call drivetrain helper\n        operateArm(); // Call arm helper\n        telemetry.update();\n    }\n}"
        },
        {
          "task": "Combine all tasks into one working OpMode.",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.DcMotor;\n\n@TeleOp(name = \"ModularTeleOpExample\")\npublic class ModularTeleOpExample extends LinearOpMode {\n    private DcMotor leftDrive, rightDrive, armMotor;\n\n    private void drive() {\n        double leftPower = -gamepad1.left_stick_y;\n        double rightPower = -gamepad1.right_stick_y;\n        leftDrive.setPower(leftPower);\n        rightDrive.setPower(rightPower);\n    }\n    private void operateArm() {\n        if (gamepad1.a) {\n            armMotor.setPower(1.0);\n        } else if (gamepad1.b) {\n            armMotor.setPower(-1.0);\n        } else {\n            armMotor.setPower(0.0);\n        }\n    }\n\n    @Override\n    public void runOpMode() {\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        armMotor = hardwareMap.get(DcMotor.class, \"arm_motor\");\n        waitForStart();\n        while (opModeIsActive()) {\n            drive();\n            operateArm();\n            telemetry.update();\n        }\n    }\n}"
        },
        {
          "task": "(Optional) Create a Java class for a subsystem.",
          "content": "// Example Arm subsystem class\npublic class Arm {\n    private DcMotor armMotor;\n    public Arm(HardwareMap hardwareMap) {\n        armMotor = hardwareMap.get(DcMotor.class, \"arm_motor\");\n    }\n    public void operate(boolean up, boolean down) {\n        if (up) {\n            armMotor.setPower(1.0);\n        } else if (down) {\n            armMotor.setPower(-1.0);\n        } else {\n            armMotor.setPower(0.0);\n        }\n    }\n}\n// To use this class, initialize it in your OpMode like in the examples above:\n// Arm arm = new Arm(hardwareMap);\n// Then call arm.operate(gamepad1.a, gamepad1.b); in your main loop.\n// Try adding this to your own code!"
        }
      ],
      "content": "// Example helper method for a claw\nprivate void controlClaw() {\n    if (gamepad1.x) {\n        clawServo.setPosition(1.0);\n    } else if (gamepad1.y) {\n        clawServo.setPosition(0.0);\n    }\n}"
    },
    {
      "type": "link-grid",
      "title": "Related Topics",
      "content": [
        
      ]
    }
  ]
}
