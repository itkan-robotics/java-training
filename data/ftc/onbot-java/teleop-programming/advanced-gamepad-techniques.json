{
  "title": "Advanced Gamepad Techniques",
  "sections": [
    {
      "type": "text",
      "title": "Button Toggles and State Machines",
      "content": "Some mechanisms, like claws or arms, need to change state with a single button press, not just while held. This is called a toggle. Edge detection lets you trigger an action only when a button is pressed, not held."
    },
    {
      "type": "code",
      "title": "Example: Button Toggle with Edge Detection",
      "content": "private boolean lastA = false;\nprivate boolean clawOpen = false;\nprivate void controlClaw() {\n    if (gamepad1.a && !lastA) {\n        clawOpen = !clawOpen;\n        clawServo.setPosition(clawOpen ? 1.0 : 0.0);\n    }\n    lastA = gamepad1.a;\n}"
    },
    {
      "type": "text",
      "title": "Combining Inputs for Complex Actions",
      "content": "Sometimes you want to require multiple buttons or stick positions for a single action (e.g., safety interlocks, macros). Use logical operators to combine inputs."
    },
    {
      "type": "code",
      "title": "Example: Combined Input for Safety",
      "content": "if (gamepad1.left_bumper && gamepad1.a) {\n    // Only run this if both are pressed\n    armMotor.setPower(1.0);\n}"
    },
    {
      "type": "text",
      "title": "Multi-Driver Support (gamepad1 vs. gamepad2)",
      "content": "FTC allows two drivers, each with their own gamepad. Assign different subsystems to each gamepad for better teamwork."
    },
    {
      "type": "code",
      "title": "Example: Assigning Subsystems to Gamepads",
      "content": "// gamepad1 drives, gamepad2 operates arm\ndouble leftPower = -gamepad1.left_stick_y;\ndouble rightPower = -gamepad1.right_stick_y;\nleftDrive.setPower(leftPower);\nrightDrive.setPower(rightPower);\nif (gamepad2.a) {\n    armMotor.setPower(1.0);\n}"
    },
    {
      "type": "text",
      "title": "Implementing Slow/Precision Mode",
      "content": "Precision driving is important for tasks like aligning with game elements. Use a button to reduce drive speed for more control."
    },
    {
      "type": "code",
      "title": "Example: Slow Mode Toggle",
      "content": "double speed = gamepad1.left_bumper ? 0.3 : 1.0;\ndouble leftPower = -gamepad1.left_stick_y * speed;\ndouble rightPower = -gamepad1.right_stick_y * speed;\nleftDrive.setPower(leftPower);\nrightDrive.setPower(rightPower);"
    },
    {
      "type": "text",
      "title": "Macros and Automation",
      "content": "Macros automate repetitive tasks, improving driver efficiency. For example, pressing a button to run a sequence of actions."
    },
    {
      "type": "code",
      "title": "Example: Simple Macro",
      "content": "if (gamepad1.x && !lastX) {\n    // Run a macro: open claw, move arm\n    clawServo.setPosition(1.0);\n    armMotor.setPower(1.0);\n    sleep(500);\n    armMotor.setPower(0.0);\n}\nlastX = gamepad1.x;"
    },
    {
      "type": "text",
      "title": "Best Practices",
      "content": "Keep your control logic clean and readable. Use clear variable names and comments. Test each advanced feature separately before combining them."
    },
    {
      "type": "exercise-box",
      "title": "Practice Exercise: Advanced Controls",
      "description": "Add a slow mode, a toggle for a claw, and a macro to your TeleOp OpMode. Assign different subsystems to gamepad1 and gamepad2.",
      "tasks": [
        "Implement a toggle for a mechanism using edge detection.",
        "Add a slow mode for precision driving.",
        "Create a macro that runs a sequence of actions.",
        "Assign subsystems to different gamepads."
      ],
      "content": "// Example: Assigning subsystems\nprivate void controlArm() {\n    if (gamepad2.a) {\n        armMotor.setPower(1.0);\n    } else if (gamepad2.b) {\n        armMotor.setPower(-1.0);\n    } else {\n        armMotor.setPower(0.0);\n    }\n}"
    },
    {
      "type": "link-grid",
      "title": "Related Topics",
      "content": [
        {
          "label": "Gamepad Controls",
          "url": "https://ftc-docs.firstinspires.org/en/latest/programming_resources/tutorial_specific/onbot_java/creating_op_modes/Creating-and-Running-an-Op-Mode-%28Android-Studio%29.html#gamepad-input"
        }
      ]
    }
  ]
}
