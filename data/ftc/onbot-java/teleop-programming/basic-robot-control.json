{
  "title": "Basic Robot Control in FTC TeleOp",
  "sections": [
    {
      "type": "text",
      "title": "Introduction to TeleOp and Robot Control",
      "content": "In FTC, <strong>TeleOp</strong> (Tele-Operated) mode is when drivers control the robot using gamepads. Understanding how to structure your code for TeleOp is essential for building responsive, reliable robots. This lesson will guide you through the basics of setting up a TeleOp OpMode, mapping hardware, and controlling your robot in a modular, maintainable way."
    },
    {
      "type": "text",
      "title": "OpMode Structure and Annotations",
      "content": "Every TeleOp program in FTC is a Java class that extends <code>LinearOpMode</code> and is annotated with <code>@TeleOp</code>. This tells the robot controller that your code should appear in the TeleOp list. <br><br>Example:<br><code>@TeleOp(name = \"BasicTeleOp\")<br>public class BasicTeleOp extends LinearOpMode { ... }</code><br><br>For more on OpMode structure, see <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/tutorial_specific/onbot_java/creating_op_modes/Creating-and-Running-an-Op-Mode-%28Android-Studio%29.html\" target=\"_blank\">FTC Docs: OpMode Structure (Android Studio)</a>."
    },
    {
      "type": "text",
      "title": "Hardware Mapping",
      "content": "To control your robot, you must map each hardware device (motors, servos, sensors) in your code. This is done using the <code>hardwareMap</code> object. <br><br>For example, to map a drive motor:<br><code>DcMotor leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");</code><br>Be sure the string matches the name in your robot configuration."
    },
    {
      "type": "code",
      "title": "Example: Mapping and Initializing Hardware",
      "content": "This snippet shows how to map two drive motors and set their directions.",
      "code": "@TeleOp(name = \"BasicTeleOp\")\npublic class BasicTeleOp extends LinearOpMode {\n    private DcMotor leftDrive;\n    private DcMotor rightDrive;\n\n    @Override\n    public void runOpMode() {\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        leftDrive.setDirection(DcMotor.Direction.FORWARD);\n        rightDrive.setDirection(DcMotor.Direction.REVERSE);\n        telemetry.addData(\"Status\", \"Initialized\");\n        telemetry.update();\n        waitForStart();\n        // ...\n    }\n}"
    },
    {
      "type": "text",
      "title": "The runOpMode() Method and Main Loop",
      "content": "The <code>runOpMode()</code> method is where your TeleOp logic lives. After calling <code>waitForStart()</code>, you typically use a <code>while (opModeIsActive())</code> loop to repeatedly check gamepad input and control hardware. <br><br>Keep your main loop clean by breaking logic into small, focused methods."
    },
    {
      "type": "code",
      "title": "Example: Main Loop for TeleOp",
      "content": "This snippet shows a simple main loop that reads joystick values and sets motor power.",
      "code": "@Override\npublic void runOpMode() {\n    // ... hardware mapping ...\n    waitForStart();\n    while (opModeIsActive()) {\n        double leftPower = -gamepad1.left_stick_y;\n        double rightPower = -gamepad1.right_stick_y;\n        leftDrive.setPower(leftPower);\n        rightDrive.setPower(rightPower);\n        telemetry.addData(\"Left Power\", leftPower);\n        telemetry.addData(\"Right Power\", rightPower);\n        telemetry.update();\n    }\n}"
    },
    {
      "type": "text",
      "title": "Best Practices: Modular Code",
      "content": "Avoid writing all your logic in one big file. Instead, break your code into small, focused methods (e.g., <code>drive()</code>, <code>updateTelemetry()</code>). This makes your code easier to read, debug, and expand as your robot gets more complex."
    },
    {
      "type": "exercise-box",
      "title": "Practice Exercise: Basic Tank Drive",
      "description": "Write a TeleOp OpMode that maps two drive motors and uses the left and right joysticks to control them. Add telemetry to display the power values. Try breaking your code into helper methods for driving and telemetry.",
      "tasks": [
        "Map two DcMotors for left and right drive.",
        "Read joystick values from gamepad1.",
        "Set motor power based on joystick input.",
        "Add telemetry to display power values.",
        "Refactor your code to use helper methods."
      ],
      "content": "// Example helper method for driving\nprivate void drive() {\n    double leftPower = -gamepad1.left_stick_y;\n    double rightPower = -gamepad1.right_stick_y;\n    leftDrive.setPower(leftPower);\n    rightDrive.setPower(rightPower);\n}"
    },
    {
      "type": "link-grid",
      "title": "Related Topics",
      "content": [
        {
          "label": "Gamepad Controls",
          "url": "https://ftc-docs.firstinspires.org/en/latest/programming_resources/tutorial_specific/onbot_java/creating_op_modes/Creating-and-Running-an-Op-Mode-%28Android-Studio%29.html"
        }
      ]
    }
  ]
}
