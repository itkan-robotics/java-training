{
  "title": "Teleop Programming (Overview)",
  "sections": [
    {
      "type": "text",
      "title": "What is Teleop Programming?",
      "content": "Teleop programming is the process of writing code that allows human drivers to control the robot during the teleoperated period of an FTC match. Teleop is all about mapping gamepad inputs to robot actions, enabling drivers to respond to the dynamic flow of a match. <br><br>For more, see <a href=\"https://gm0.org/en/latest/docs/software/teleop/index.html\" target=\"_blank\">gm0: TeleOp Programming</a> and <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/ftc_sdk/opmodes/index.html\" target=\"_blank\">FTC Docs: OpModes</a>."
    },
    {
      "type": "list",
      "title": "Teleop vs Autonomous",
      "items": [
        "<strong>Teleop:</strong> Human-controlled, real-time, responsive to game situations.",
        "<strong>Autonomous:</strong> Pre-programmed, runs without human input, executes predetermined sequences.",
        "<strong>Teleop Duration:</strong> Typically 2 minutes in FTC matches.",
        "<strong>Autonomous Duration:</strong> Typically 30 seconds in FTC matches.",
        "<strong>Teleop Focus:</strong> Driver skill, control system design, and adaptability.",
        "<strong>Autonomous Focus:</strong> Programming precision and reliability."
      ]
    },
    {
      "type": "text",
      "title": "Teleop OpMode Structure",
      "content": "A well-structured Teleop OpMode organizes code for multiple mechanisms and clear driver control. Hardware initialization (motors, servos) should be referenced from hardware pages. See <a href=\"#basic-robot-control\">Basic Robot Control</a> for code details."
    },
    {
      "type": "code",
      "title": "Teleop OpMode Skeleton",
      "content": "@TeleOp(name=\"MyTeleop\", group=\"Teleop\")\npublic class MyTeleop extends LinearOpMode {\n    // Declare hardware (motors, servos)\n    private DcMotor leftDrive, rightDrive;\n    private Servo armServo;\n    \n    @Override\n    public void runOpMode() {\n        // Initialize hardware\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        armServo = hardwareMap.get(Servo.class, \"arm_servo\");\n        \n        waitForStart();\n        while (opModeIsActive()) {\n            // Map gamepad inputs to robot actions\n            // Example: Tank drive\n            leftDrive.setPower(-gamepad1.left_stick_y);\n            rightDrive.setPower(-gamepad1.right_stick_y);\n            // Example: Arm control\n            if (gamepad1.a) armServo.setPosition(0.0);\n            if (gamepad1.b) armServo.setPosition(1.0);\n            telemetry.update();\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Control System Design Principles",
      "content": "Effective teleop control systems are designed with the driver in mind. Good mapping of gamepad inputs to robot actions is essential. For hardware details, see the <a href=\"../motors/basic-motor-control.json\">Motor Control</a> and <a href=\"../servos/intro-to-servos.json\">Servo Control</a> pages. <br><br>See <a href=\"https://gm0.org/en/latest/docs/software/teleop/control-schemes.html\" target=\"_blank\">gm0: Control Schemes</a>."
    },
    {
      "type": "list",
      "title": "Control Design Principles",
      "items": [
        "<strong>Intuitive Mapping:</strong> Controls should feel natural and predictable.",
        "<strong>Ergonomic Layout:</strong> Frequently used controls should be easily accessible.",
        "<strong>Consistent Behavior:</strong> Similar actions should have similar controls.",
        "<strong>Feedback Systems:</strong> Drivers need clear feedback about robot state.",
        "<strong>Safety Features:</strong> Emergency stops and failsafes are essential."
      ]
    },
    {
      "type": "text",
      "title": "Driver Training and Optimization",
      "content": "Driver skill is as important as code. Practice, feedback, and ergonomic design help drivers perform at their best. For hardware configuration, see the relevant hardware pages."
    },
    {
      "type": "list",
      "title": "Driver Training Tips",
      "items": [
        "<strong>Practice:</strong> Regular practice improves driver performance.",
        "<strong>Feedback:</strong> Use telemetry to provide real-time feedback.",
        "<strong>Ergonomics:</strong> Arrange controls for comfort and efficiency.",
        "<strong>Simulate Matches:</strong> Practice under competition-like conditions."
      ]
    },
    {
      "type": "text",
      "title": "Safety and Best Practices",
      "content": "Teleop safety includes disabling mechanisms during faults and providing emergency stop options. For power limits and hardware-level stops, see the hardware pages."
    },
    {
      "type": "code",
      "title": "Teleop Emergency Stop Example",
      "content": "// Emergency stop disables all mechanisms\nif (gamepad1.back) {\n    leftDrive.setPower(0);\n    rightDrive.setPower(0);\n    armServo.setPosition(0.5); // Safe position\n    // Add additional mechanism stops as needed\n}"
    },
    {
      "type": "text",
      "title": "Troubleshooting Teleop Issues",
      "content": "Teleop-specific issues include control confusion, mode switching errors, and driver mistakes. Hardware failures are covered in hardware troubleshooting pages."
    },
    {
      "type": "list",
      "title": "Common Teleop Issues",
      "items": [
        "Controls do not respond as expected: Check mapping and code logic.",
        "Mode switching confusion: Use clear indicators and feedback.",
        "Driver presses wrong button: Use ergonomic and consistent mapping.",
        "Robot does not stop: Implement and test emergency stop logic."
      ]
    },
    {
      "type": "link-grid",
      "title": "References & Further Reading",
      "links": [
        { "label": "gm0: TeleOp Programming", "url": "https://gm0.org/en/latest/docs/software/teleop/index.html" },
        { "label": "FTC Docs: OpModes", "url": "https://ftc-docs.firstinspires.org/en/latest/programming_resources/ftc_sdk/opmodes/index.html" },
        { "label": "gm0: Control Schemes", "url": "https://gm0.org/en/latest/docs/software/teleop/control-schemes.html" },
        { "label": "Basic Robot Control", "id": "basic-robot-control" },
        { "label": "Gamepad Controls", "id": "gamepad-controls" }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Teleop Programming Practice",
      "description": "Practice these exercises to master teleop programming:",
      "tasks": [
        "Write a Teleop OpMode that maps gamepad controls to multiple mechanisms.",
        "Implement an emergency stop feature.",
        "Design a control scheme and test with your driver.",
        "Troubleshoot a teleop issue and document your solution."
      ],
      "content": "// Practice: Write a Teleop OpMode with at least two mechanisms\n// Add an emergency stop and test with your team."
    }
  ]
} 