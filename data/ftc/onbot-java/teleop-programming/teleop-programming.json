{
  "title": "TeleOp Programming Concepts",
  "sections": [
    {
      "type": "text",
      "title": "Overview of TeleOp Programming",
      "content": "TeleOp programming is the process of writing code that allows drivers to control the robot in real time using gamepads. In this lesson, you'll learn how to read gamepad input, map controls to robot actions, and use telemetry for feedback."
    },
    {
      "type": "text",
      "title": "Gamepad Input Handling",
      "content": "The <code>gamepad1</code> and <code>gamepad2</code> objects provide access to all the buttons, sticks, and triggers on the controllers. Reading these values lets you control motors, servos, and other mechanisms."
    },
    {
      "type": "code",
      "title": "Example: Reading Gamepad Input",
      "content": "This snippet shows how to read joystick and button values from gamepad1.",
      "code": "double drive = -gamepad1.left_stick_y; // Forward/backward\ndouble turn = gamepad1.right_stick_x;   // Turning\nboolean aPressed = gamepad1.a;          // Button A\nif (aPressed) {\n    // Do something when A is pressed\n}" 
    },
    {
      "type": "text",
      "title": "Mapping Gamepad Inputs to Robot Actions",
      "content": "You can use gamepad input to control motors, servos, and other mechanisms. For example, you might use the left stick for driving and a button to control a claw. <br><br>It's best to keep each control mapping in its own method for clarity."
    },
    {
      "type": "code",
      "title": "Example: Mapping Controls to Drive and Servo",
      "content": "// Drive control\ndouble leftPower = -gamepad1.left_stick_y;\ndouble rightPower = -gamepad1.right_stick_y;\nleftDrive.setPower(leftPower);\nrightDrive.setPower(rightPower);\n// Claw control\nif (gamepad1.a) {\n    clawServo.setPosition(1.0); // Open\n} else if (gamepad1.b) {\n    clawServo.setPosition(0.0); // Close\n}"
    },
    {
      "type": "text",
      "title": "Telemetry for Debugging and Feedback",
      "content": "Telemetry lets you send data from your robot to the Driver Station for real-time feedback. Use <code>telemetry.addData()</code> to add information and <code>telemetry.update()</code> to send it. This is essential for debugging and for providing drivers with useful information during a match. <br><br>For more on telemetry, see <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/tutorial_specific/blocks/creating_op_modes/Writing-an-Op-Mode-with-FTC-Blocks.html#inserting-telemetry-statements\" target=\"_blank\">FTC Docs: Telemetry</a>."
    },
    {
      "type": "code",
      "title": "Example: Using Telemetry",
      "content": "telemetry.addData(\"Left Power\", leftPower);\ntelemetry.addData(\"Right Power\", rightPower);\ntelemetry.addData(\"Claw Position\", clawServo.getPosition());\ntelemetry.update();"
    },
    {
      "type": "text",
      "title": "Best Practices: Modular Code",
      "content": "Keep your code organized by writing small, focused methods for each subsystem or control. This makes your code easier to read, debug, and expand."
    },
    {
      "type": "exercise-box",
      "title": "Practice Exercise: Custom TeleOp Controls",
      "description": "Write a TeleOp OpMode that uses the left stick to drive, the right stick to turn, and buttons A/B to open/close a claw. Add telemetry to display all relevant values. Refactor your code to use helper methods for each subsystem.",
      "tasks": [
        "Map drive motors and a claw servo.",
        "Read joystick and button values from gamepad1.",
        "Set motor and servo power based on input.",
        "Add telemetry for all controls.",
        "Refactor code into helper methods."
      ],
      "content": "// Example helper method for claw\nprivate void controlClaw() {\n    if (gamepad1.a) {\n        clawServo.setPosition(1.0);\n    } else if (gamepad1.b) {\n        clawServo.setPosition(0.0);\n    }\n}"
    },
    {
      "type": "link-grid",
      "title": "Related Topics",
      "content": [
        {
          "label": "Gamepad Controls",
          "url": "https://ftc-docs.firstinspires.org/en/latest/programming_resources/tutorial_specific/onbot_java/creating_op_modes/Creating-and-Running-an-Op-Mode-%28Android-Studio%29.html#gamepad-input"
        } 
      ]
    }
  ]
}
