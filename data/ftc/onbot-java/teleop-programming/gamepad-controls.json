{
  "title": "Gamepad Controls",
  "sections": [
    {
      "type": "text",
      "title": "Gamepad Layout and Button Mapping",
      "content": "Gamepads are the main interface for FTC drivers. Mapping each button, stick, and trigger to robot actions is key to effective teleop. For hardware response, see the relevant hardware pages. <br><br>See <a href=\"https://gm0.org/en/latest/docs/software/teleop/gamepad.html\" target=\"_blank\">gm0: Gamepad Reference</a> and <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/ftc_sdk/gamepad.html\" target=\"_blank\">FTC Docs: Gamepad</a>."
    },
    {
      "type": "list",
      "title": "Gamepad Input Types",
      "items": [
        "<strong>Joysticks:</strong> Analog, for continuous control (-1.0 to 1.0).",
        "<strong>Buttons:</strong> Digital, for discrete actions (true/false).",
        "<strong>Triggers:</strong> Analog, for variable control (0.0 to 1.0).",
        "<strong>D-pad:</strong> Digital, for directional input.",
        "<strong>Bumpers:</strong> Digital, for quick actions."
      ]
    },
    {
      "type": "code",
      "title": "Reading Gamepad Inputs in OpMode",
      "content": "@TeleOp(name=\"GamepadInputExample\", group=\"Teleop\")\npublic class GamepadInputExample extends LinearOpMode {\n    @Override\n    public void runOpMode() {\n        waitForStart();\n        while (opModeIsActive()) {\n            double leftX = gamepad1.left_stick_x;\n            double leftY = gamepad1.left_stick_y;\n            boolean a = gamepad1.a;\n            double rightTrigger = gamepad1.right_trigger;\n            // Use these values to control your robot\n            telemetry.addData(\"Left Stick\", String.format(\"X: %.2f, Y: %.2f\", leftX, leftY));\n            telemetry.addData(\"A Button\", a);\n            telemetry.addData(\"Right Trigger\", rightTrigger);\n            telemetry.update();\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Debouncing and Toggle Logic",
      "content": "To prevent repeated actions from a single button press, use debouncing or toggle logic. This is especially important for toggling mechanisms or modes in teleop."
    },
    {
      "type": "code",
      "title": "Toggle Example (Debouncing)",
      "content": "boolean lastA = false;\nboolean toggled = false;\nwhile (opModeIsActive()) {\n    if (gamepad1.a && !lastA) {\n        toggled = !toggled; // Toggle state\n    }\n    lastA = gamepad1.a;\n    // Use 'toggled' to control a mechanism\n}"
    },
    {
      "type": "text",
      "title": "Multi-Gamepad Strategies",
      "content": "FTC supports two gamepads. Split controls between drivers for complex robots. For example, gamepad1 for drivetrain, gamepad2 for mechanisms."
    },
    {
      "type": "code",
      "title": "Multi-Gamepad Example",
      "content": "@TeleOp(name=\"MultiGamepadExample\", group=\"Teleop\")\npublic class MultiGamepadExample extends LinearOpMode {\n    private DcMotor leftDrive, rightDrive;\n    private Servo armServo;\n    @Override\n    public void runOpMode() {\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        armServo = hardwareMap.get(Servo.class, \"arm_servo\");\n        waitForStart();\n        while (opModeIsActive()) {\n            // Drivetrain: gamepad1\n            leftDrive.setPower(-gamepad1.left_stick_y);\n            rightDrive.setPower(-gamepad1.right_stick_y);\n            // Arm: gamepad2\n            if (gamepad2.a) armServo.setPosition(0.0);\n            if (gamepad2.b) armServo.setPosition(1.0);\n        }\n    }\n}"
    },
    {
      "type": "list",
      "title": "Best Practices for Gamepad Use",
      "items": [
        "Map controls ergonomically for comfort and speed.",
        "Provide feedback (telemetry, LEDs) for important actions.",
        "Test with both drivers to ensure clarity and comfort.",
        "Document control mappings for your team."
      ]
    },
    {
      "type": "list",
      "title": "Troubleshooting Gamepad Issues",
      "items": [
        "Gamepad not detected: Check USB and gamepad mode.",
        "Unresponsive controls: Check code and configuration.",
        "Wrong mapping: Double-check button assignments in code."
      ]
    },
    {
      "type": "link-grid",
      "title": "References & Further Reading",
      "links": [
        { "label": "gm0: Gamepad Reference", "url": "https://gm0.org/en/latest/docs/software/teleop/gamepad.html" },
        { "label": "FTC Docs: Gamepad", "url": "https://ftc-docs.firstinspires.org/en/latest/programming_resources/ftc_sdk/gamepad.html" },
        { "label": "Basic Robot Control", "id": "basic-robot-control" },
        { "label": "Teleop Programming", "id": "teleop-programming" }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Gamepad Controls Practice",
      "description": "Practice these exercises to master gamepad controls:",
      "tasks": [
        "Write code to read all gamepad inputs and display them with telemetry.",
        "Implement a toggle using debouncing logic.",
        "Split controls between two gamepads.",
        "Troubleshoot a gamepad issue and document your fix."
      ],
      "content": "// Practice: Write code to read and display all gamepad inputs\n// Add a toggle and multi-gamepad control."
    }
  ]
} 