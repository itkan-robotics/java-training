{
  "title": "State Machines (OnBot Java)",
  "sections": [
    {
      "type": "text",
      "title": "What is a State Machine?",
      "content": "State machines help organize robot logic, especially in autonomous. They use enums and switch statements, which are fully supported in OnBot Java. <a href=\"https://gm0.org/en/latest/docs/software/concepts/state-machines.html\" target=\"_blank\">gm0: State Machines</a> | <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/onbot_java/onbot_java.html\" target=\"_blank\">FTC Docs: OnBot Java</a>"
    },
    {
      "type": "code",
      "title": "Simple State Machine Example (Autonomous)",
      "language": "java",
      "content": "@Autonomous(name=\"SimpleStateMachine\")\npublic class SimpleStateMachine extends LinearOpMode {\n    enum State { START, DRIVE_FORWARD, TURN, STOP }\n    State currentState = State.START;\n    DcMotor leftMotor, rightMotor;\n    double stateStartTime;\n    @Override\n    public void runOpMode() {\n        leftMotor = hardwareMap.get(DcMotor.class, \"left_motor\");\n        rightMotor = hardwareMap.get(DcMotor.class, \"right_motor\");\n        waitForStart();\n        currentState = State.DRIVE_FORWARD;\n        stateStartTime = getRuntime().seconds();\n        while (opModeIsActive()) {\n            switch (currentState) {\n                case DRIVE_FORWARD:\n                    leftMotor.setPower(0.5);\n                    rightMotor.setPower(0.5);\n                    if (getRuntime().seconds() - stateStartTime > 2.0) {\n                        currentState = State.TURN;\n                        stateStartTime = getRuntime().seconds();\n                    }\n                    break;\n                case TURN:\n                    leftMotor.setPower(0.5);\n                    rightMotor.setPower(-0.5);\n                    if (getRuntime().seconds() - stateStartTime > 1.0) {\n                        currentState = State.STOP;\n                    }\n                    break;\n                case STOP:\n                    leftMotor.setPower(0);\n                    rightMotor.setPower(0);\n                    break;\n            }\n            telemetry.addData(\"State\", currentState);\n            telemetry.update();\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Debugging State Machines with Telemetry",
      "content": "Print the current state to telemetry to debug transitions. <a href=\"https://gm0.org/en/latest/docs/software/tutorials/telemetry.html\" target=\"_blank\">gm0: Telemetry</a>"
    },
    {
      "type": "code",
      "title": "State Telemetry Example",
      "language": "java",
      "content": "// Inside your OpMode loop\ntelemetry.addData(\"Current State\", currentState);\ntelemetry.addData(\"State Time\", getRuntime().seconds() - stateStartTime);\ntelemetry.update();"
    },
    {
      "type": "text",
      "title": "Best Practices: Keeping State Logic Manageable",
      "content": "Use helper methods and classes, and avoid putting all state logic in a single OpMode file. OnBot Java supports multiple filesâ€”use this to keep state logic modular."
    },
    {
      "type": "list",
      "title": "State Machine Best Practices",
      "items": [
        "Use clear, descriptive state names.",
        "Keep transition conditions simple.",
        "Add telemetry for debugging.",
        "Test each state and transition individually.",
        "Document state machine behavior.",
        "Use enums for state definitions.",
        "Include emergency stop capabilities."
      ]
    },
    {
      "type": "link-grid",
      "title": "Related Topics",
      "links": [
        { "label": "Basic Debugging Techniques", "id": "basic-debugging-techniques" },
        { "label": "Code Organization", "id": "code-organization" },
        { "label": "Linear vs Iterative OpModes", "id": "linear-vs-iterative-opmodes" }
      ]
    },
    {
      "type": "exercise-box",
      "title": "State Machine Practice",
      "description": "Try these exercises to master state machines in OnBot Java:",
      "tasks": [
        "Create a state machine with at least 3 states and debug it.",
        "Add telemetry to show the current state.",
        "Implement a timeout to prevent getting stuck in a state.",
        "Document your state machine logic."
      ],
      "content": "// Practice: Create a state machine OpMode\n// - Use enums for states\n// - Add telemetry for each state\n// - Test transitions and timeouts\n// - Document your code"
    }
  ]
} 