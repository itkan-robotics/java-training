{
  "title": "Code Organization (OnBot Java)",
  "sections": [
    {
      "type": "text",
      "title": "Why Code Organization Matters in OnBot Java",
      "content": "Good organization makes debugging and collaboration easier, even in OnBot Java. Compare a single, large OpMode file with a project split into multiple files. <a href=\"https://gm0.org/en/latest/docs/software/concepts/code-organization.html\" target=\"_blank\">gm0: Code Organization</a> | <a href=\"https://ftc-docs.firstinspires.org/en/latest/programming_resources/onbot_java/onbot_java.html\" target=\"_blank\">FTC Docs: OnBot Java</a>"
    },
    {
      "type": "text",
      "title": "Splitting Code into Subsystems and Utility Classes",
      "content": "OnBot Java allows creating multiple Java files. Separate logic for drivetrain, arm, sensors, etc. <a href=\"https://gm0.org/en/latest/docs/software/concepts/subsystems.html\" target=\"_blank\">gm0: Subsystems</a>"
    },
    {
      "type": "code",
      "title": "Subsystem Example: Drivetrain Class",
      "language": "java",
      "content": "public class Drivetrain {\n    DcMotor leftMotor, rightMotor;\n    public Drivetrain(HardwareMap hardwareMap) {\n        leftMotor = hardwareMap.get(DcMotor.class, \"left_motor\");\n        rightMotor = hardwareMap.get(DcMotor.class, \"right_motor\");\n    }\n    public void drive(double left, double right) {\n        leftMotor.setPower(left);\n        rightMotor.setPower(right);\n    }\n}"
    },
    {
      "type": "text",
      "title": "Naming Conventions and File Structure in OnBot Java",
      "content": "Consistent naming helps you find and debug code quickly. <a href=\"https://google.github.io/styleguide/javaguide.html\" target=\"_blank\">Google Java Style Guide</a>"
    },
    {
      "type": "list",
      "title": "Sample Naming Guide",
      "items": [
        "Class names: Drivetrain, Arm, SensorUtils",
        "OpMode names: TeleOpDrivetrain, AutoBlueLeft",
        "Constants: ALL_CAPS_WITH_UNDERSCORES",
        "Methods: camelCase (e.g., setMotorPower)"
      ]
    },
    {
      "type": "text",
      "title": "Documenting Code and Using Comments Effectively",
      "content": "Good comments help you and your teammates understand and debug code. Use simple Javadoc and inline comments."
    },
    {
      "type": "code",
      "title": "Comment Example",
      "language": "java",
      "content": "/**\n * Controls the robot drivetrain.\n * Call drive() to set motor powers.\n */\npublic class Drivetrain {\n    // ...\n    /**\n     * Sets the power for both motors.\n     */\n    public void drive(double left, double right) {\n        leftMotor.setPower(left);\n        rightMotor.setPower(right);\n    }\n}"
    },
    {
      "type": "text",
      "title": "Best Practices: Avoiding Large Files",
      "content": "OnBot Java supports many small files. Break code into logical units, with each file/class focused on a single responsibility."
    },
    {
      "type": "list",
      "title": "Code Organization Best Practices",
      "items": [
        "Use clear, descriptive names for classes and methods.",
        "Separate logic into subsystems and utility classes.",
        "Add comments and documentation.",
        "Keep each file focused on one responsibility.",
        "Organize OpModes and subsystems in the OnBot Java file list."
      ]
    },
    {
      "type": "link-grid",
      "title": "Related Topics",
      "links": [
        { "label": "Basic Debugging Techniques", "id": "basic-debugging-techniques" },
        { "label": "State Machines", "id": "state-machines" },
        { "label": "Telemetry Logging", "id": "telemetry-logging" }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Code Organization Practice",
      "description": "Try these exercises to master code organization in OnBot Java:",
      "tasks": [
        "Refactor a large OpMode into multiple files.",
        "Create a Drivetrain class and use it in an OpMode.",
        "Add comments and documentation to your code.",
        "Organize your OnBot Java file list for clarity."
      ],
      "content": "// Practice: Refactor and organize your code\n// - Split logic into subsystems\n// - Use clear naming\n// - Add comments and documentation\n// - Keep each file focused on one responsibility"
    }
  ]
} 