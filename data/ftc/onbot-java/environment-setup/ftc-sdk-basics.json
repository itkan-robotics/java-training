{
  "title": "FTC SDK Basics",
  "sections": [
    {
      "type": "text",
      "title": "Introduction to FTC SDK",
      "content": "The FTC (FIRST Tech Challenge) Software Development Kit (SDK) is the foundation of FTC programming. It provides all the tools, libraries, and frameworks needed to program FTC robots using Java."
    },
    {
      "type": "rules-box",
      "title": "What is the FTC SDK?",
      "subtitle": "The FTC SDK includes:",
      "items": [
        "Core robot control libraries and APIs",
        "Hardware abstraction layer for motors, servos, and sensors",
        "OpMode framework for autonomous and teleop programming",
        "Telemetry system for debugging and data logging",
        "Gamepad input handling for driver controls",
        "Built-in support for common FTC hardware components"
      ]
    },
    {
      "type": "text",
      "title": "SDK Architecture",
      "content": "The FTC SDK is built on a layered architecture that separates hardware control from programming logic:"
    },
    {
      "type": "list",
      "items": [
        "<strong>Hardware Layer:</strong> Direct communication with robot hardware (motors, servos, sensors)",
        "<strong>Device Layer:</strong> Hardware abstraction that provides consistent interfaces",
        "<strong>OpMode Layer:</strong> Programming framework for autonomous and teleop modes",
        "<strong>Application Layer:</strong> Your custom robot code and logic"
      ]
    },
    {
      "type": "text",
      "title": "Key SDK Components",
      "content": "Understanding these core components is essential for FTC programming:"
    },
    {
      "type": "code",
      "title": "Basic OpMode Structure",
      "language": "java",
      "code": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.hardware.DcMotor;\nimport com.qualcomm.robotcore.hardware.Servo;\n\n@TeleOp(name=\"Basic OpMode\", group=\"Examples\")\npublic class BasicOpMode extends LinearOpMode {\n    \n    // Hardware declarations\n    private DcMotor leftMotor;\n    private DcMotor rightMotor;\n    private Servo armServo;\n    \n    @Override\n    public void runOpMode() {\n        // Initialize hardware\n        leftMotor = hardwareMap.get(DcMotor.class, \"left_motor\");\n        rightMotor = hardwareMap.get(DcMotor.class, \"right_motor\");\n        armServo = hardwareMap.get(Servo.class, \"arm_servo\");\n        \n        // Wait for start\n        waitForStart();\n        \n        // Main robot loop\n        while (opModeIsActive()) {\n            // Your robot logic here\n            telemetry.addData(\"Status\", \"Running\");\n            telemetry.update();\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Hardware Mapping",
      "content": "The hardwareMap is how you access robot hardware components in your code. Each component must be configured with a unique name in the robot configuration."
    },
    {
      "type": "code",
      "title": "Hardware Mapping Examples",
      "language": "java",
      "code": "// Motor mapping\nDcMotor leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\nDcMotor rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n\n// Servo mapping\nServo clawServo = hardwareMap.get(Servo.class, \"claw_servo\");\nServo armServo = hardwareMap.get(Servo.class, \"arm_servo\");\n\n// Sensor mapping\nTouchSensor touchSensor = hardwareMap.get(TouchSensor.class, \"touch_sensor\");\nColorSensor colorSensor = hardwareMap.get(ColorSensor.class, \"color_sensor\");\nDistanceSensor distanceSensor = hardwareMap.get(DistanceSensor.class, \"distance_sensor\");\n\n// IMU mapping\nBNO055IMU imu = hardwareMap.get(BNO055IMU.class, \"imu\");"
    },
    {
      "type": "text",
      "title": "Telemetry System",
      "content": "Telemetry is the primary debugging tool in FTC. It allows you to display information on the Driver Station screen and log data for analysis."
    },
    {
      "type": "code",
      "title": "Telemetry Examples",
      "language": "java",
      "code": "// Basic telemetry\ntelemetry.addData(\"Motor Power\", leftMotor.getPower());\ntelemetry.addData(\"Servo Position\", armServo.getPosition());\ntelemetry.addData(\"Touch Sensor\", touchSensor.isPressed());\n\n// Formatted telemetry\ntelemetry.addData(\"Status\", \"Running\");\ntelemetry.addData(\"Battery\", \"%.1f volts\", getBatteryVoltage());\ntelemetry.addData(\"Time\", \"%.1f seconds\", getRuntime().seconds());\n\n// Update telemetry display\ntelemetry.update();\n\n// Clear telemetry\ntelemetry.clear();\n\n// Log data to file\ntelemetry.log().add(\"Robot started autonomous mode\");"
    },
    {
      "type": "text",
      "title": "Gamepad Input",
      "content": "The FTC SDK provides easy access to gamepad inputs for driver control. You can read button states, joystick values, and trigger positions."
    },
    {
      "type": "code",
      "title": "Gamepad Input Examples",
      "language": "java",
      "code": "// Joystick input\ndouble leftStickY = gamepad1.left_stick_y;\ndouble rightStickX = gamepad1.right_stick_x;\n\n// Button input\nboolean aButton = gamepad1.a;\nboolean bButton = gamepad1.b;\nboolean xButton = gamepad1.x;\nboolean yButton = gamepad1.y;\n\n// Trigger input\ndouble leftTrigger = gamepad1.left_trigger;\ndouble rightTrigger = gamepad1.right_trigger;\n\n// Bumper input\nboolean leftBumper = gamepad1.left_bumper;\nboolean rightBumper = gamepad1.right_bumper;\n\n// D-pad input\nboolean dpadUp = gamepad1.dpad_up;\nboolean dpadDown = gamepad1.dpad_down;\nboolean dpadLeft = gamepad1.dpad_left;\nboolean dpadRight = gamepad1.dpad_right;"
    },
    {
      "type": "rules-box",
      "title": "SDK Best Practices",
      "subtitle": "Follow these guidelines for better code:",
      "items": [
        "Always initialize hardware in the runOpMode() method",
        "Use descriptive names for hardware components",
        "Include telemetry for debugging and monitoring",
        "Handle exceptions gracefully",
        "Use constants for magic numbers",
        "Comment your code thoroughly",
        "Test your code frequently"
      ]
    },
    {
      "type": "text",
      "title": "Resources and Documentation",
      "content": "The FTC SDK is well-documented with extensive resources available:"
    },
    {
      "type": "list",
      "items": [
        "<a href='https://gm0.org/en/latest/docs/software/index.html' target='_blank'>Game Manual 0 (gm0.org)</a> - Comprehensive FTC documentation and tutorials",
        "<a href='https://github.com/FIRST-Tech-Challenge/FTC_App' target='_blank'>FTC SDK GitHub Repository</a> - Official SDK source code and examples",
        "<a href='https://www.firstinspires.org/resource-library/ftc/technology-information-and-resources' target='_blank'>FIRST Technology Resources</a> - Official FIRST documentation",
        "<a href='https://ftc-docs.firstinspires.org/' target='_blank'>FTC Documentation</a> - Official SDK documentation"
      ]
    },
    {
      "type": "link-grid",
      "title": "Next Steps",
      "links": [
        {
          "label": "SDK Installation",
          "id": "sdk-installation"
        },
        {
          "label": "OpMode Structure",
          "id": "opmode-structure"
        },
        {
          "label": "Robot Hardware Overview",
          "id": "robot-hardware-overview"
        },
        {
          "label": "Basic Robot Control",
          "id": "basic-robot-control"
        }
      ]
    },
    {
      "type": "exercise-box",
      "title": "SDK Basics Practice",
      "description": "Practice these concepts to reinforce your understanding:",
      "tasks": [
        "Create a simple OpMode that initializes two motors",
        "Add telemetry to display motor power values",
        "Read gamepad input and control motor power",
        "Experiment with different hardware components",
        "Practice using the hardwareMap to access components",
        "Test your code on a robot or in simulation"
      ],
      "code": "// Practice Exercise: Basic Motor Control\n// Create an OpMode that uses the left joystick to control two motors\n// Display the joystick values and motor powers using telemetry\n// Test different motor configurations and behaviors"
    }
  ]
} 