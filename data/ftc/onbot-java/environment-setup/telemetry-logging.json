{
  "title": "Telemetry Logging",
  "sections": [
    {
      "type": "text",
      "title": "What is Telemetry?",
      "content": "Telemetry lets you send data from your robot to the Driver Station for real-time monitoring and debugging. It is essential for understanding what your robot is doing during a match and for troubleshooting issues.<br><br>Telemetry can display sensor values, motor power, program state, and more.<br><br>- <a href='https://ftc-docs.firstinspires.org/en/latest/programming_resources/driver_station/telemetry.html' target='_blank'>FTC Docs: Telemetry</a><br>- <a href='https://gm0.org/en/latest/docs/software/advanced-concepts/telemetry.html' target='_blank'>gm0: Telemetry</a>"
    },
    {
      "type": "rules-box",
      "title": "Why Use Telemetry?",
      "subtitle": "Telemetry helps you:",
      "items": [
        "Debug your code by displaying variable values.",
        "Monitor robot status in real time.",
        "Communicate important information to drivers.",
        "Track sensor and motor data during matches."
      ]
    },
    {
      "type": "text",
      "title": "Basic Telemetry Example",
      "content": "Here is an example showing how to use telemetry in a LinearOpMode. This example displays motor power and a custom message on the Driver Station."
    },
    {
      "type": "code",
      "title": "Telemetry in LinearOpMode",
      "language": "java",
      "content": "@TeleOp(name = \"TelemetryExample\")\npublic class TelemetryExample extends LinearOpMode {\n    private DcMotor leftDrive, rightDrive;\n\n    @Override\n    public void runOpMode() {\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        waitForStart();\n        while (opModeIsActive()) {\n            double leftPower = -gamepad1.left_stick_y;\n            double rightPower = -gamepad1.right_stick_y;\n            leftDrive.setPower(leftPower);\n            rightDrive.setPower(rightPower);\n            telemetry.addData(\"Left Power\", leftPower);\n            telemetry.addData(\"Right Power\", rightPower);\n            telemetry.addData(\"Status\", \"Running\");\n            telemetry.update();\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Advanced Telemetry Techniques",
      "content": "You can group telemetry data, use <code>telemetry.log()</code> for persistent messages, and display sensor values.<br><br>Telemetry can also be used in Iterative OpModes and for debugging autonomous routines.<br><br>See <a href='https://ftc-docs.firstinspires.org/en/latest/programming_resources/driver_station/telemetry.html' target='_blank'>FTC Docs: Telemetry</a> for more advanced usage."
    },
    {
      "type": "code",
      "title": "Telemetry with Sensors",
      "language": "java",
      "content": "@TeleOp(name = \"SensorTelemetry\")\npublic class SensorTelemetry extends LinearOpMode {\n    private DistanceSensor distanceSensor;\n\n    @Override\n    public void runOpMode() {\n        distanceSensor = hardwareMap.get(DistanceSensor.class, \"sensor_distance\");\n        waitForStart();\n        while (opModeIsActive()) {\n            double distance = distanceSensor.getDistance(DistanceUnit.CM);\n            telemetry.addData(\"Distance (cm)\", distance);\n            telemetry.update();\n        }\n    }\n}"
    },
    {
      "type": "rules-box",
      "title": "Best Practices for Telemetry",
      "subtitle": "Tips for effective telemetry:",
      "items": [
        "Call <code>telemetry.update()</code> once per loop.",
        "Use clear, descriptive labels for data.",
        "Limit the amount of data to avoid clutter.",
        "Use telemetry for debugging and driver feedback."
      ]
    },
    {
      "type": "text",
      "title": "Further Reading & Resources",
      "content": "- <a href='https://ftc-docs.firstinspires.org/en/latest/programming_resources/driver_station/telemetry.html' target='_blank'>FTC Docs: Telemetry</a><br>- <a href='https://gm0.org/en/latest/docs/software/advanced-concepts/telemetry.html' target='_blank'>gm0: Telemetry</a><br>- <a href='https://github.com/FIRST-Tech-Challenge/FtcRobotController/tree/master/TeamCode/src/main/java/org/firstinspires/ftc/teamcode' target='_blank'>FTC SDK Example OpModes</a>"
    },
    {
      "type": "exercise-box",
      "title": "Practice: Telemetry Logging",
      "description": "Try these to reinforce your understanding:",
      "tasks": [
        "Add telemetry to your existing OpModes.",
        "Display sensor values and custom messages.",
        "Experiment with <code>telemetry.log()</code> for persistent messages."
      ],
      "content": "// Practice: Add telemetry to your robot code and observe the output on the Driver Station."
    }
  ]
} 
