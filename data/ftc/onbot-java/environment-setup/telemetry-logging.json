{
  "title": "Telemetry Logging",
  "sections": [
    {
      "type": "text",
      "title": "What is Telemetry?",
      "content": "Telemetry lets you send data from your robot to the Driver Station for real-time monitoring and debugging. It is essential for understanding what your robot is doing during a match and for troubleshooting issues.<br><br>Telemetry can display sensor values, motor powers, program states, and more."
    },
    {
      "type": "rules-box",
      "title": "Why Use Telemetry?",
      "subtitle": "Telemetry helps you:",
      "items": [
        "Debug your code by displaying variable values.",
        "Monitor robot status in real time.",
        "Communicate important information to drivers.",
        "Track sensor and motor data during matches."
      ]
    },
    {
      "type": "text",
      "title": "Basic Telemetry Example",
      "content": "Here is an example showing how to use telemetry in a LinearOpMode. This example displays motor power and a custom message on the Driver Station."
    },
    {
      "type": "code",
      "title": "Telemetry in LinearOpMode",
      "language": "java",
      "content": "@TeleOp(name = \"TelemetryExample\")\npublic class TelemetryExample extends LinearOpMode {\n    private DcMotor leftDrive, rightDrive;\n\n    @Override\n    public void runOpMode() {\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        waitForStart();\n        while (opModeIsActive()) {\n            double leftPower = -gamepad1.left_stick_y;\n            double rightPower = -gamepad1.right_stick_y;\n            leftDrive.setPower(leftPower);\n            rightDrive.setPower(rightPower);\n            telemetry.addData(\"Left Power\", leftPower);\n            telemetry.addData(\"Right Power\", rightPower);\n            telemetry.addData(\"Status\", \"Running\");\n            telemetry.update();\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Advanced Telemetry Techniques",
      "content": "You can group telemetry data, use <code>telemetry.log()</code> for persistent messages, and display sensor values.<br><br>Telemetry can also be used in Iterative OpModes and for debugging autonomous routines."
    },
    {
      "type": "code",
      "title": "Telemetry with Sensors",
      "language": "java",
      "content": "@TeleOp(name = \"SensorTelemetry\")\npublic class SensorTelemetry extends LinearOpMode {\n    private DistanceSensor distanceSensor;\n\n    @Override\n    public void runOpMode() {\n        distanceSensor = hardwareMap.get(DistanceSensor.class, \"sensor_distance\");\n        waitForStart();\n        while (opModeIsActive()) {\n            double distance = distanceSensor.getDistance(DistanceUnit.CM);\n            telemetry.addData(\"Distance (cm)\", distance);\n            telemetry.update();\n        }\n    }\n}"
    },
    {
      "type": "rules-box",
      "title": "Best Practices for Telemetry",
      "subtitle": "Tips for effective telemetry:",
      "items": [
        "Call <code>telemetry.update()</code> once per loop.",
        "Use clear, descriptive labels for data.",
        "Limit the amount of data to avoid clutter.",
        "Use telemetry for debugging and driver feedback."
      ]
    },
    {
      "type": "exercise-box",
      "title": "Practice: Telemetry Logging",
      "description": "Try these to reinforce your understanding:",
      "tasks": [
        "Add telemetry to your existing OpModes.",
        "Display sensor values and custom messages.",
        "Experiment with <code>telemetry.log()</code> for persistent messages."
      ],
      "answers": [
        {
          "task": "Add telemetry to your existing OpModes",
          "content": "// Add this to your existing OpMode's main loop:\nwhile (opModeIsActive()) {\n    // Your existing robot control code here\n    double leftPower = -gamepad1.left_stick_y;\n    double rightPower = -gamepad1.right_stick_y;\n    leftDrive.setPower(leftPower);\n    rightDrive.setPower(rightPower);\n    \n    // Add telemetry for debugging and monitoring\n    telemetry.addData(\"Left Drive Power\", leftPower);\n    telemetry.addData(\"Right Drive Power\", rightPower);\n    telemetry.addData(\"Status\", \"TeleOp Running\");\n    telemetry.addData(\"Gamepad Connected\", gamepad1.atRest());\n    telemetry.update();\n}"
        },
        {
          "task": "Display sensor values and custom messages",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.DcMotor;\nimport com.qualcomm.robotcore.hardware.ColorSensor;\nimport com.qualcomm.robotcore.hardware.DistanceSensor;\nimport org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;\n\n@TeleOp(name = \"SensorTelemetry\")\npublic class SensorTelemetry extends LinearOpMode {\n    private DcMotor driveMotor;\n    private ColorSensor colorSensor;\n    private DistanceSensor distanceSensor;\n\n    @Override\n    public void runOpMode() {\n        // Initialize hardware\n        driveMotor = hardwareMap.get(DcMotor.class, \"drive_motor\");\n        colorSensor = hardwareMap.get(ColorSensor.class, \"color_sensor\");\n        distanceSensor = hardwareMap.get(DistanceSensor.class, \"distance_sensor\");\n        \n        // Show initialization status\n        telemetry.addData(\"Status\", \"Sensors Initialized\");\n        telemetry.update();\n        \n        waitForStart();\n        \n        while (opModeIsActive()) {\n            // Read sensor values\n            int red = colorSensor.red();\n            int green = colorSensor.green();\n            int blue = colorSensor.blue();\n            double distance = distanceSensor.getDistance(DistanceUnit.CM);\n            \n            // Display sensor data\n            telemetry.addData(\"Color Sensor\", \"R:%d G:%d B:%d\", red, green, blue);\n            telemetry.addData(\"Distance (cm)\", \"%.1f\", distance);\n            telemetry.addData(\"Motor Power\", driveMotor.getPower());\n            \n            // Add custom status messages\n            if (distance < 10) {\n                telemetry.addData(\"Warning\", \"Object too close!\");\n            }\n            \n            telemetry.update();\n        }\n    }\n}"
        },
        {
          "task": "Experiment with telemetry.log() for persistent messages",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.DcMotor;\n\n@TeleOp(name = \"LoggingExample\")\npublic class LoggingExample extends LinearOpMode {\n    private DcMotor driveMotor;\n    private int loopCount = 0;\n\n    @Override\n    public void runOpMode() {\n        driveMotor = hardwareMap.get(DcMotor.class, \"drive_motor\");\n        \n        // Log initialization - this stays in the log\n        telemetry.log().add(\"OpMode initialized successfully\");\n        telemetry.update();\n        \n        waitForStart();\n        \n        // Log start of match\n        telemetry.log().add(\"Match started!\");\n        telemetry.update();\n        \n        while (opModeIsActive()) {\n            loopCount++;\n            double power = -gamepad1.left_stick_y;\n            driveMotor.setPower(power);\n            \n            // Regular telemetry (updates each loop)\n            telemetry.addData(\"Loop Count\", loopCount);\n            telemetry.addData(\"Motor Power\", power);\n            \n            // Log important events (persistent)\n            if (Math.abs(power) > 0.8) {\n                telemetry.log().add(\"High power detected: \" + power);\n            }\n            \n            if (loopCount % 100 == 0) {\n                telemetry.log().add(\"Completed \" + loopCount + \" loops\");\n            }\n            \n            telemetry.update();\n        }\n        \n        // Log end of match\n        telemetry.log().add(\"Match ended. Total loops: \" + loopCount);\n        telemetry.update();\n    }\n}"
        }
      ]
    }
  ]
} 
