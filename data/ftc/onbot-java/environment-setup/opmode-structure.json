{
  "title": "OpMode Structure",
  "sections": [
    {
      "type": "text",
      "title": "What is an OpMode?",
      "content": "An OpMode (Operation Mode) is the main entry point for your robot code. Each OpMode defines how your robot behaves during autonomous or teleop periods.<br><br>OpModes are selected and started from the Driver Station app. You can write as many OpModes as you want, each with different logic for different situations.<br><br>- <a href='https://ftc-docs.firstinspires.org/en/latest/programming_resources/opmode/creating-an-opmode.html' target='_blank'>FTC Docs: Creating an OpMode</a><br>- <a href='https://gm0.org/en/latest/docs/software/advanced-concepts/opmodes.html' target='_blank'>gm0: OpModes</a>"
    },
    {
      "type": "rules-box",
      "title": "Types of OpModes",
      "subtitle": "OpModes can be:",
      "items": [
        "<code>@TeleOp</code>: For driver-controlled periods",
        "<code>@Autonomous</code>: For autonomous periods",
        "LinearOpMode: Runs code sequentially (most common for beginners)",
        "Iterative OpMode: Runs code in a loop (advanced)"
      ]
    },
    {
      "type": "text",
      "title": "OpMode Annotations",
      "content": "Annotations tell the SDK how to display your OpMode in the Driver Station.<br><br>- <code>@TeleOp(name=...)</code> — TeleOp mode<br>- <code>@Autonomous(name=...)</code> — Autonomous mode<br>- <code>@Disabled</code> — Hide this OpMode<br><br>See <a href='https://ftc-docs.firstinspires.org/en/latest/programming_resources/opmode/creating-an-opmode.html#opmode-annotations' target='_blank'>FTC Docs: OpMode Annotations</a>"
    },
    {
      "type": "text",
      "title": "OpMode Lifecycle",
      "content": "A LinearOpMode runs through these stages:<br>1. Initialization (hardware setup)<br>2. Wait for Start<br>3. Active loop (robot logic)<br>4. Stop (cleanup)<br><br>Understanding this lifecycle helps you organize your code and ensure proper initialization and cleanup.<br><br>See <a href='https://gm0.org/en/latest/docs/software/advanced-concepts/opmodes.html#lifecycle' target='_blank'>gm0: OpMode Lifecycle</a>"
    },
    {
      "type": "code",
      "title": "Well-Structured TeleOp OpMode",
      "language": "java",
      "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.DcMotor;\nimport com.qualcomm.robotcore.hardware.Servo;\n\n@TeleOp(name = \"WellStructuredTeleOp\")\npublic class WellStructuredTeleOp extends LinearOpMode {\n    private DcMotor leftDrive, rightDrive;\n    private Servo armServo;\n\n    private void initHardware() {\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        armServo = hardwareMap.get(Servo.class, \"arm_servo\");\n    }\n\n    private void drive() {\n        double leftPower = -gamepad1.left_stick_y;\n        double rightPower = -gamepad1.right_stick_y;\n        leftDrive.setPower(leftPower);\n        rightDrive.setPower(rightPower);\n    }\n\n    private void controlArm() {\n        if (gamepad1.a) {\n            armServo.setPosition(1.0); // Up\n        } else if (gamepad1.b) {\n            armServo.setPosition(0.0); // Down\n        }\n    }\n\n    private void showTelemetry() {\n        telemetry.addData(\"Left Power\", leftDrive.getPower());\n        telemetry.addData(\"Right Power\", rightDrive.getPower());\n        telemetry.addData(\"Arm Position\", armServo.getPosition());\n        telemetry.update();\n    }\n\n    @Override\n    public void runOpMode() {\n        initHardware();\n        telemetry.addData(\"Status\", \"Initialized\");\n        telemetry.update();\n        waitForStart();\n        while (opModeIsActive()) {\n            drive();\n            controlArm();\n            showTelemetry();\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Organizing Your OpModes",
      "content": "- Use clear method names for hardware init, input processing, and telemetry.<br>- Separate hardware mapping from robot logic.<br>- Use comments to explain each section.<br>- Keep OpModes focused on a single purpose.<br><br>This makes your code easier to read, debug, and maintain.<br><br>See <a href='https://gm0.org/en/latest/docs/software/advanced-concepts/opmodes.html#organization' target='_blank'>gm0: OpMode Organization</a>"
    },
    {
      "type": "rules-box",
      "title": "Best Practices",
      "subtitle": "For clean, reliable OpModes:",
      "items": [
        "Initialize hardware in a dedicated method.",
        "Use meaningful variable and method names.",
        "Add telemetry for debugging.",
        "Handle errors gracefully.",
        "Test OpModes on the robot."
      ]
    },
    {
      "type": "text",
      "title": "Further Reading & Resources",
      "content": "- <a href='https://ftc-docs.firstinspires.org/en/latest/java/org/firstinspires/ftc/robotcore/eventloop/opmode/package-summary.html' target='_blank'>FTC OpMode API</a><br>- <a href='https://gm0.org/en/latest/docs/software/advanced-concepts/opmodes.html' target='_blank'>gm0: OpModes</a><br>- <a href='https://github.com/FIRST-Tech-Challenge/FtcRobotController/tree/master/TeamCode/src/main/java/org/firstinspires/ftc/teamcode' target='_blank'>FTC SDK Example OpModes</a>"
    },
    {
      "type": "link-grid",
      "title": "Next Steps",
      "links": [
        { "label": "Linear vs Iterative OpModes", "id": "linear-vs-iterative-opmodes" },
        { "label": "Telemetry Logging", "id": "telemetry-logging" },
        { "label": "Basic Robot Control", "id": "basic-robot-control" }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Practice: OpMode Structure",
      "description": "Try these to reinforce your understanding:",
      "tasks": [
        "Create a TeleOp OpMode that drives a motor with the left stick.",
        "Add telemetry to show motor power.",
        "Use <code>@Autonomous</code> to create a simple autonomous OpMode.",
        "Organize your code into methods for init, loop, and telemetry."
      ],
      "content": "// Practice: Write a TeleOp OpMode that drives a motor and displays its power."
    }
  ]
} 
