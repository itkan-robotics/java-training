{
  "title": "Control Hub & Expansion Hub",
  "sections": [
    {
      "type": "text",
      "title": "What are the Control Hub & Expansion Hub?",
      "content": "The Control Hub and Expansion Hub are the main hardware modules for FTC robots. The Control Hub is the robot's brain and WiFi access point; the Expansion Hub adds more ports for motors, servos, and sensors.<br><br>The Control Hub runs your robot code and connects to the Driver Station via WiFi. The Expansion Hub is used when you need more hardware ports than the Control Hub provides.<br><br>See: <a href='https://ftc-docs.firstinspires.org/en/latest/hardware_and_software_configuration/index.html' target='_blank'>FTC Docs: Hardware Setup</a>"
    },
    {
      "type": "rules-box",
      "title": "Key Features",
      "subtitle": "Control Hub vs Expansion Hub:",
      "items": [
        "Control Hub: Contains Android device, WiFi, and hardware ports.",
        "Expansion Hub: Adds extra hardware ports (motors, servos, sensors).",
        "Both connect via RS485 cable for communication.",
        "Both are powered by the robot battery."
      ]
    },
    {
      "type": "text",
      "title": "Wiring and Connections",
      "content": "Connect the Control Hub to the Expansion Hub using the RS485 cable. Power both hubs from the robot battery.<br><br>Motors, servos, and sensors are plugged into the appropriate ports on either hub.<br><br>See <a href='https://ftc-docs.firstinspires.org/en/latest/hardware_and_software_configuration/configuring/configuring_dual_hubs/configuring-dual-hubs.html' target='_blank'>FTC Docs: Adding an Expansion Hub</a> for diagrams and best practices."
    },
    {
      "type": "code",
      "title": "Sample HardwareMap Usage",
      "language": "java",
      "content": "// Example: Accessing hardware on both hubs\nDcMotor leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\nDcMotor rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\nServo armServo = hardwareMap.get(Servo.class, \"arm_servo\");\nDistanceSensor distance = hardwareMap.get(DistanceSensor.class, \"distance_sensor\");\n\n// The names must match the configuration on the Driver Station.\n// Devices can be on either the Control Hub or Expansion Hub."
    },
    {
      "type": "text",
      "title": "Configuring Hardware in the Driver Station",
      "content": "You must configure your robot's hardware in the Driver Station app. Assign names to each device (motor, servo, sensor) so you can access them in code.<br><br>See: <a href='https://ftc-docs.firstinspires.org/en/latest/hardware_and_software_configuration/configuring/index.html' target='_blank'>FTC Docs: Configuring Hardware</a>"
    },
    {
      "type": "rules-box",
      "title": "Best Practices",
      "subtitle": "Tips for using Control & Expansion Hubs:",
      "items": [
        "Label all cables and ports for easy troubleshooting.",
        "Double-check wiring before powering on.",
        "Keep firmware up to date on both hubs.",
        "Use clear, consistent device names in configuration."
      ]
    },
    {
      "type": "exercise-box",
      "title": "Practice: Hardware Setup",
      "description": "Try these to reinforce your understanding:",
      "tasks": [
        "Configure a new device on the Expansion Hub in the Driver Station app.",
        "Write code to access a motor and a sensor on the Expansion Hub.",
        "Ask your mentor to cause a wiring issue, then fix it."
      ],
      "answers": [
        {
          "task": "Configure a new device in the Driver Station app",
          "content": "// Steps to configure hardware in Driver Station:\n//\n// 1. Open Driver Station app on your phone/tablet\n// 2. Tap 'Configure Robot' button\n// 3. Tap 'New Configuration' or select existing config\n// 4. Tap '+' to add a new device\n// 5. Select device type (Motor, Servo, Sensor, etc.)\n// 6. Choose the specific device (e.g., 'DcMotor', 'ColorSensor')\n// 7. Enter a name (e.g., 'left_drive', 'color_sensor')\n// 8. Select which hub it's connected to (Control Hub or Expansion Hub)\n// 9. Select the port number (e.g., port 0, port 1)\n// 10. Tap 'Done' to save the configuration\n//\n// Example configuration:\n// - Device: DcMotor, Name: 'left_drive', Hub: Control Hub, Port: 0\n// - Device: ColorSensor, Name: 'color_sensor', Hub: Expansion Hub, Port: 1\n//\n// Remember: Device names must match exactly in your code!"
        },
        {
          "task": "Write code to access a motor and a sensor",
          "content": "import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\nimport com.qualcomm.robotcore.hardware.DcMotor;\nimport com.qualcomm.robotcore.hardware.ColorSensor;\n\n@TeleOp(name = \"HardwareAccess\")\npublic class HardwareAccess extends LinearOpMode {\n    // Declare hardware variables\n    private DcMotor driveMotor;\n    private ColorSensor colorSensor;\n\n    @Override\n    public void runOpMode() {\n        // Initialize hardware using hardwareMap\n        // Names must match your Driver Station configuration\n        driveMotor = hardwareMap.get(DcMotor.class, \"drive_motor\");\n        colorSensor = hardwareMap.get(ColorSensor.class, \"color_sensor\");\n        \n        // Show initialization status\n        telemetry.addData(\"Status\", \"Hardware initialized\");\n        telemetry.addData(\"Motor Name\", \"drive_motor\");\n        telemetry.addData(\"Sensor Name\", \"color_sensor\");\n        telemetry.update();\n        \n        waitForStart();\n        \n        while (opModeIsActive()) {\n            // Control motor with gamepad\n            double motorPower = -gamepad1.left_stick_y;\n            driveMotor.setPower(motorPower);\n            \n            // Read sensor values\n            int red = colorSensor.red();\n            int green = colorSensor.green();\n            int blue = colorSensor.blue();\n            \n            // Display data on Driver Station\n            telemetry.addData(\"Motor Power\", motorPower);\n            telemetry.addData(\"Color Sensor\", \"R:%d G:%d B:%d\", red, green, blue);\n            telemetry.update();\n        }\n    }\n}"
        }
      ]
    }
  ]
} 
