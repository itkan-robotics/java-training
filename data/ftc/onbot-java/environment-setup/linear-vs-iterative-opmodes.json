{
  "title": "Linear vs Iterative OpModes",
  "sections": [
    {
      "type": "text",
      "title": "OpMode Types in FTC",
      "content": "FTC supports two main OpMode types: <b>LinearOpMode</b> and <b>Iterative OpMode</b>. Understanding the difference helps you choose the right structure for your code.<br><br>A <b>LinearOpMode</b> runs your code from top to bottom, like a script. An <b>Iterative OpMode</b> runs your code in a loop, giving you more control over timing and state.<br><br>See: <a href='https://gm0.org/en/latest/docs/software/getting-started/linear-opmode-vs-opmode.html' target='_blank'>gm0: OpMode Types</a>"
    },
    {
      "type": "rules-box",
      "title": "Key Differences",
      "subtitle": "LinearOpMode vs Iterative OpMode:",
      "items": [
        "LinearOpMode: Code runs sequentially, like a script.",
        "Iterative OpMode: Code runs in repeated loop() calls.",
        "LinearOpMode: Easier for beginners and autonomous routines.",
        "Iterative OpMode: More control, better for advanced TeleOp."
      ]
    },
    {
      "type": "text",
      "title": "LinearOpMode Example",
      "content": "A LinearOpMode is great for simple autonomous or TeleOp routines. All your code runs in the <code>runOpMode()</code> method, and you can use <code>waitForStart()</code> and <code>sleep()</code> for timing."
    },
    {
      "type": "code",
      "title": "LinearOpMode Example",
      "language": "java",
      "content": "@TeleOp(name = \"LinearTeleOp\")\npublic class LinearTeleOp extends LinearOpMode {\n    private DcMotor leftDrive, rightDrive;\n\n    @Override\n    public void runOpMode() {\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n        waitForStart();\n        while (opModeIsActive()) {\n            double leftPower = -gamepad1.left_stick_y;\n            double rightPower = -gamepad1.right_stick_y;\n            leftDrive.setPower(leftPower);\n            rightDrive.setPower(rightPower);\n            telemetry.addData(\"Left Power\", leftPower);\n            telemetry.addData(\"Right Power\", rightPower);\n            telemetry.update();\n        }\n    }\n}"
    },
    {
      "type": "text",
      "title": "Iterative OpMode Example",
      "content": "An Iterative OpMode gives you more control over timing and state. You implement <code>init()</code> for setup and <code>loop()</code> for repeated logic. This is useful for advanced TeleOp and state machines."
    },
    {
      "type": "code",
      "title": "Iterative OpMode Example",
      "language": "java",
      "content": "@TeleOp(name = \"IterativeTeleOp\")\npublic class IterativeTeleOp extends OpMode {\n    private DcMotor leftDrive, rightDrive;\n\n    @Override\n    public void init() {\n        leftDrive = hardwareMap.get(DcMotor.class, \"left_drive\");\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\n    }\n\n    @Override\n    public void loop() {\n        double leftPower = -gamepad1.left_stick_y;\n        double rightPower = -gamepad1.right_stick_y;\n        leftDrive.setPower(leftPower);\n        rightDrive.setPower(rightPower);\n        telemetry.addData(\"Left Power\", leftPower);\n        telemetry.addData(\"Right Power\", rightPower);\n        telemetry.update();\n    }\n}"
    },
    {
      "type": "rules-box",
      "title": "When to Use Each Type",
      "subtitle": "Choose based on your needs:",
      "items": [
        "Use LinearOpMode for simple autonomous or TeleOp routines.",
        "Use Iterative OpMode for advanced TeleOp with state machines or timing.",
        "Start with LinearOpMode if you are new to FTC.",
        "Convert to Iterative OpMode as your code grows more complex."
      ]
    },
    {
      "type": "text",
      "title": "Converting Between Types",
      "content": "You can convert a LinearOpMode to an Iterative OpMode by moving your logic into the <code>loop()</code> method and managing state with variables.<br><br>For example, if you have a sequence of actions in LinearOpMode, you can use a state variable in Iterative OpMode to step through them."
    },
    {
      "type": "text",
      "title": "Further Reading & Resources",
      "content": "- <a href='https://github.com/FIRST-Tech-Challenge/FtcRobotController/tree/master/FtcRobotController/src/main/java/org/firstinspires/ftc/robotcontroller/external/samples' target='_blank'>FTC SDK Example OpModes</a>"
    },
    {
      "type": "link-grid",
      "title": "Next Steps",
      "links": [
        { "label": "Telemetry Logging", "id": "telemetry-logging" },
        { "label": "Basic Robot Control", "id": "basic-robot-control" }
      ]
    },
    {
      "type": "exercise-box",
      "title": "Practice: OpMode Types",
      "description": "Try these to reinforce your understanding:",
      "tasks": [
        "Write a LinearOpMode that drives a motor.",
        "Convert it to an Iterative OpMode.",
        "Compare the structure and behavior of both types."
      ],
      "content": "// Practice: Write both Linear and Iterative OpModes for the same robot behavior."
    }
  ]
} 
