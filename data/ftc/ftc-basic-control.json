{
  "title": "Basic Robot Control",
  "sections": [
    {
      "type": "text",
      "title": "Introduction to Robot Control",
      "content": "In this lesson, you'll learn how to control the basic components of your FTC robot using OnBot Java. We'll start with simple motor control and gradually build up to more complex operations."
    },
    {
      "type": "text",
      "title": "Understanding Motors",
      "content": "Motors are the primary way your robot moves. In FTC, you'll typically work with:\n\n- **DC Motors**: For driving wheels and simple mechanisms\n- **Servo Motors**: For precise positioning (like arms, claws, etc.)\n- **Encoders**: Built into motors to track position and speed\n\nEach motor has a power level from -1.0 (full reverse) to 1.0 (full forward), with 0.0 being stopped."
    },
    {
      "type": "text",
      "title": "Basic Motor Control",
      "content": "Let's start with the simplest motor control - making a motor move forward and backward.\n\n```java\n// Declare your motors\nDcMotor leftMotor;\nDcMotor rightMotor;\n\n// In your init() method\nleftMotor = hardwareMap.get(DcMotor.class, \"left_motor\");\nrightMotor = hardwareMap.get(DcMotor.class, \"right_motor\");\n\n// Basic forward movement\nleftMotor.setPower(0.5);  // 50% power forward\nrightMotor.setPower(0.5);\n\n// Stop the motors\nleftMotor.setPower(0.0);\nrightMotor.setPower(0.0);\n\n// Reverse movement\nleftMotor.setPower(-0.5);  // 50% power backward\nrightMotor.setPower(-0.5);\n```"
    },
    {
      "type": "text",
      "title": "Motor Power and Speed Control",
      "content": "The `setPower()` method controls both speed and direction:\n\n- **Positive values (0.0 to 1.0)**: Forward movement\n- **Negative values (-1.0 to 0.0)**: Reverse movement\n- **0.0**: Stop\n- **Higher absolute values**: Faster movement\n\n```java\n// Slow forward movement\nmotor.setPower(0.2);\n\n// Fast forward movement\nmotor.setPower(0.8);\n\n// Slow reverse movement\nmotor.setPower(-0.3);\n\n// Fast reverse movement\nmotor.setPower(-0.9);\n```\n\n**Pro Tip**: Start with lower power values (0.3-0.5) when testing to avoid damaging your robot or components."
    },
    {
      "type": "text",
      "title": "Basic Servo Control",
      "content": "Servos are used for precise positioning, like controlling arms, claws, or other mechanisms.\n\n```java\n// Declare your servo\nServo armServo;\n\n// In your init() method\narmServo = hardwareMap.get(Servo.class, \"arm_servo\");\n\n// Set servo to different positions\narmServo.setPosition(0.0);    // Fully retracted\narmServo.setPosition(0.5);    // Middle position\narmServo.setPosition(1.0);    // Fully extended\n```\n\nServo positions range from 0.0 to 1.0, representing the full range of motion. You'll need to test your specific servo to understand what each position value does."
    },
    {
      "type": "text",
      "title": "Simple Autonomous Sequences",
      "content": "Autonomous mode runs without driver input. Here's a simple example:\n\n```java\n@Autonomous(name=\"Simple Auto\")\npublic class SimpleAuto extends OpMode {\n    private DcMotor leftMotor;\n    private DcMotor rightMotor;\n    private ElapsedTime runtime;\n    \n    @Override\n    public void init() {\n        leftMotor = hardwareMap.get(DcMotor.class, \"left_motor\");\n        rightMotor = hardwareMap.get(DcMotor.class, \"right_motor\");\n        runtime = new ElapsedTime();\n    }\n    \n    @Override\n    public void start() {\n        runtime.reset();\n    }\n    \n    @Override\n    public void loop() {\n        // Drive forward for 2 seconds\n        if (runtime.seconds() < 2.0) {\n            leftMotor.setPower(0.5);\n            rightMotor.setPower(0.5);\n        } else {\n            // Stop after 2 seconds\n            leftMotor.setPower(0.0);\n            rightMotor.setPower(0.0);\n        }\n    }\n}\n```"
    },
    {
      "type": "text",
      "title": "Practice Exercise",
      "content": "Create a simple autonomous program that:\n\n1. Drives forward for 1 second\n2. Stops for 0.5 seconds\n3. Turns right for 1 second\n4. Stops\n\n**Hint**: To turn right, set the left motor to positive power and right motor to negative power (or zero).\n\nTry different power levels and timing to see how your robot responds!"
    },
    {
      "type": "text",
      "title": "Common Issues and Solutions",
      "content": "**Problem**: Motors don't move\n- **Solution**: Check your hardware configuration names match your code\n\n**Problem**: Motors move in wrong direction\n- **Solution**: Swap the power values or reverse the motor direction in hardware config\n\n**Problem**: Robot moves too fast/slow\n- **Solution**: Adjust the power values (lower = slower, higher = faster)\n\n**Problem**: Servo doesn't move to expected position\n- **Solution**: Test your servo's range and adjust position values accordingly"
    },
    {
      "type": "text",
      "title": "Next Steps",
      "content": "You now have the basics of robot control! In the next lessons, you'll learn about:\n\n- Game controllers and teleop programming\n- Advanced motor control with encoders\n- Sensor integration\n- More complex autonomous sequences\n\nPractice with these basic controls until you're comfortable with them before moving forward."
    }
  ]
} 