{
  "id": "overloading",
  "title": "Method and Constructor Overloading",
  "sections": [
    {
      "type": "text",
      "title": "What is Overloading?",
      "content": "<strong>Overloading</strong> allows you to create multiple versions of constructors or methods with the same name but different parameters. This eliminates repetitive code and provides flexible ways to create objects or call methods. In robotics, overloading helps create versatile robot classes that can be initialized in different ways."
    },
    {
      "type": "text",
      "title": "Why Use Overloading?",
      "content": "Overloading makes your code more flexible and user-friendly. Instead of having methods like <code>moveForward()</code>, <code>moveForwardWithSpeed()</code>, and <code>moveForwardWithDistance()</code>, you can have multiple <code>moveForward()</code> methods that accept different parameters. This creates cleaner, more intuitive APIs for your robot classes."
    },
    {
      "type": "text",
      "title": "Constructor Overloading",
      "content": "Constructor overloading allows you to create objects in different ways by providing multiple constructors with different parameter lists. This is especially useful for robot classes where you might want to create robots with different initial configurations."
    },
    {
      "type": "code",
      "title": "Basic Constructor Overloading:",
      "content": "public class FTCRobot {\n    private String robotName;\n    private int teamNumber;\n    private double batteryLevel;\n    private String driveType;\n    private boolean isActive;\n    \n    // Constructor 1: Just name (use defaults for everything else)\n    public FTCRobot(String name) {\n        this.robotName = name;\n        this.teamNumber = 0;           // Default team number\n        this.batteryLevel = 100.0;     // Full battery\n        this.driveType = \"Tank\";       // Default drive type\n        this.isActive = false;\n    }\n    \n    // Constructor 2: Name and team number\n    public FTCRobot(String name, int teamNumber) {\n        this.robotName = name;\n        this.teamNumber = teamNumber;\n        this.batteryLevel = 100.0;     // Full battery\n        this.driveType = \"Tank\";       // Default drive type\n        this.isActive = false;\n    }\n    \n    // Constructor 3: All parameters\n    public FTCRobot(String name, int teamNumber, String driveType, double batteryLevel) {\n        this.robotName = name;\n        this.teamNumber = teamNumber;\n        this.batteryLevel = batteryLevel;\n        this.driveType = driveType;\n        this.isActive = false;\n    }\n    \n    public String toString() {\n        return robotName + \" (Team \" + teamNumber + \") - \" + driveType + \n               \" drive, Battery: \" + batteryLevel + \"%, \" + \n               (isActive ? \"Active\" : \"Inactive\");\n    }\n}\n\n// Usage examples:\nFTCRobot robot1 = new FTCRobot(\"QuickBot\");                    // Just name\nFTCRobot robot2 = new FTCRobot(\"SpeedBot\", 12345);            // Name + team\nFTCRobot robot3 = new FTCRobot(\"PowerBot\", 67890, \"Mecanum\", 85.5); // All parameters\n\nSystem.out.println(robot1);\nSystem.out.println(robot2);\nSystem.out.println(robot3);"
    },
    {
      "type": "text",
      "title": "Constructor Chaining with this()",
      "content": "Notice the repetitive code in the constructors above? We can eliminate this by using <strong>constructor chaining</strong>. One constructor can call another constructor using <code>this()</code>, which must be the first line in the constructor."
    },
    {
      "type": "code",
      "title": "Improved Constructor with Chaining:",
      "content": "public class FTCRobot {\n    private String robotName;\n    private int teamNumber;\n    private double batteryLevel;\n    private String driveType;\n    private boolean isActive;\n    \n    // Constructor 1: Just name - calls constructor 2 with default team\n    public FTCRobot(String name) {\n        this(name, 0);  // Call constructor 2 with default team number\n    }\n    \n    // Constructor 2: Name and team - calls constructor 3 with defaults\n    public FTCRobot(String name, int teamNumber) {\n        this(name, teamNumber, \"Tank\", 100.0);  // Call main constructor\n    }\n    \n    // Constructor 3: Main constructor - does all the actual work\n    public FTCRobot(String name, int teamNumber, String driveType, double batteryLevel) {\n        this.robotName = name;\n        this.teamNumber = teamNumber;\n        this.batteryLevel = batteryLevel;\n        this.driveType = driveType;\n        this.isActive = false;\n        \n        System.out.println(\"Robot \" + name + \" created with \" + driveType + \" drive\");\n    }\n    \n    public String toString() {\n        return robotName + \" (Team \" + teamNumber + \") - \" + driveType + \n               \" drive, Battery: \" + batteryLevel + \"%, \" + \n               (isActive ? \"Active\" : \"Inactive\");\n    }\n}\n\n// Usage is exactly the same, but code is much cleaner!\nFTCRobot robot1 = new FTCRobot(\"QuickBot\");\nFTCRobot robot2 = new FTCRobot(\"SpeedBot\", 12345);\nFTCRobot robot3 = new FTCRobot(\"PowerBot\", 67890, \"Mecanum\", 85.5);"
    },
    {
      "type": "rules-box",
      "title": "Constructor Overloading Rules:",
      "subtitle": "Important Guidelines:",
      "items": [
        "<strong>Different Parameters:</strong> Each constructor must have different parameter types or numbers",
        "<strong>this() First:</strong> Constructor chaining with this() must be the first line",
        "<strong>No Return Type:</strong> Constructors never have return types (not even void)",
        "<strong>Same Name:</strong> All constructors have the same name as the class",
        "<strong>Unique Signatures:</strong> Cannot have two constructors with identical parameter lists"
      ]
    },
    {
      "type": "text",
      "title": "Method Overloading",
      "content": "Just like constructors, methods can be overloaded to provide different ways of performing the same operation. This is extremely useful in robotics for creating flexible movement, sensor reading, and control methods."
    },
    {
      "type": "code",
      "title": "Basic Method Overloading:",
      "content": "public class RobotMovement {\n    private double currentSpeed = 0.0;\n    private double maxSpeed = 1.0;\n    \n    // Move forward at current speed\n    public void moveForward() {\n        System.out.println(\"Moving forward at speed: \" + currentSpeed);\n    }\n    \n    // Move forward at specified speed\n    public void moveForward(double speed) {\n        if (speed >= 0 && speed <= maxSpeed) {\n            this.currentSpeed = speed;\n            System.out.println(\"Moving forward at speed: \" + speed);\n        } else {\n            System.out.println(\"Invalid speed: \" + speed);\n        }\n    }\n    \n    // Move forward for specified time at specified speed\n    public void moveForward(double speed, double timeSeconds) {\n        if (speed >= 0 && speed <= maxSpeed) {\n            System.out.println(\"Moving forward at speed \" + speed + \" for \" + timeSeconds + \" seconds\");\n            this.currentSpeed = speed;\n        } else {\n            System.out.println(\"Invalid speed: \" + speed);\n        }\n    }\n}\n\n// Usage examples:\nRobotMovement robot = new RobotMovement();\n\nrobot.moveForward();              // Use current speed\nrobot.moveForward(0.75);          // Set speed\nrobot.moveForward(0.5, 3.0);      // Speed for 3 seconds"
    },
    {
      "type": "text",
      "title": "Method Chaining",
      "content": "Similar to constructors, overloaded methods can call each other to reduce code duplication. The simpler methods can call the more complex ones with default values."
    },
    {
      "type": "code",
      "title": "Method Overloading with Chaining:",
      "content": "public class RobotArm {\n    private double currentAngle = 0.0;\n    private double armSpeed = 0.3;\n    \n    // Basic arm movement - use current speed\n    public void moveArm(double targetAngle) {\n        this.moveArm(targetAngle, this.armSpeed);  // Use default speed\n    }\n    \n    // Move arm with specified speed\n    public void moveArm(double targetAngle, double speed) {\n        this.moveArm(targetAngle, speed, 1.0);  // Default 1 degree tolerance\n    }\n    \n    // Full arm movement with all parameters\n    public void moveArm(double targetAngle, double speed, double tolerance) {\n        System.out.printf(\"Moving arm from %.1f° to %.1f° at speed %.2f\\n\", \n                         currentAngle, targetAngle, speed);\n        \n        double angleDifference = Math.abs(targetAngle - currentAngle);\n        \n        if (angleDifference <= tolerance) {\n            System.out.println(\"Arm already at target position!\");\n            return;\n        }\n        \n        // Simulate movement time based on angle and speed\n        double moveTime = angleDifference / (speed * 180);  // Rough calculation\n        System.out.printf(\"Movement will take approximately %.2f seconds\\n\", moveTime);\n        \n        this.currentAngle = targetAngle;\n        System.out.println(\"✅ Arm movement complete\");\n    }\n    \n    public double getCurrentAngle() {\n        return currentAngle;\n    }\n}\n\n// Usage examples:\nRobotArm arm = new RobotArm();\n\narm.moveArm(90);                    // Move to 90° at default speed\narm.moveArm(45, 0.5);              // Move to 45° at half speed\narm.moveArm(0, 0.2, 0.5);          // Move to 0° slowly with tight tolerance"
    },
    {
      "type": "text",
      "title": "Practical FTC Examples",
      "content": "Let's look at some real-world FTC robotics examples where overloading makes the code much more flexible and easier to use in competition scenarios."
    },
    {
      "type": "code",
      "title": "FTC Drivetrain with Overloading:",
      "content": "public class FTCDrivetrain {\n    private String driveType;\n    private double maxSpeed;\n    \n    public FTCDrivetrain(String type) {\n        this.driveType = type;\n        this.maxSpeed = 1.0;\n    }\n    \n    // Simple forward drive\n    public void drive(double power) {\n        this.drive(power, 0.0, 0.0);  // Forward only\n    }\n    \n    // Tank drive (left and right sides)\n    public void drive(double leftPower, double rightPower) {\n        System.out.printf(\"%s Tank Drive: Left=%.2f, Right=%.2f\\n\", \n                         driveType, leftPower, rightPower);\n    }\n    \n    // Mecanum drive (forward, strafe, rotate)\n    public void drive(double forward, double strafe, double rotate) {\n        if (!driveType.equals(\"Mecanum\")) {\n            System.out.println(\"❌ 3-axis drive requires Mecanum wheels!\");\n            return;\n        }\n        \n        System.out.printf(\"%s Drive: Forward=%.2f, Strafe=%.2f, Rotate=%.2f\\n\", \n                         driveType, forward, strafe, rotate);\n    }\n    \n    // Timed movement\n    public void driveForTime(double power, double seconds) {\n        this.driveForTime(power, 0.0, 0.0, seconds);\n    }\n    \n    public void driveForTime(double forward, double strafe, double rotate, double seconds) {\n        System.out.printf(\"Driving for %.1f seconds...\\n\", seconds);\n        this.drive(forward, strafe, rotate);\n        \n        // Simulate time delay\n        try {\n            Thread.sleep((long)(seconds * 1000));\n        } catch (InterruptedException e) {\n            System.out.println(\"Drive interrupted\");\n        }\n        \n        this.drive(0, 0, 0);  // Stop\n        System.out.println(\"✅ Timed drive complete\");\n    }\n}\n\n// Usage examples:\nFTCDrivetrain tankDrive = new FTCDrivetrain(\"Tank\");\nFTCDrivetrain mecanumDrive = new FTCDrivetrain(\"Mecanum\");\n\n// Tank drive examples\ntankDrive.drive(0.5);              // Forward only\ntankDrive.drive(0.7, -0.7);        // Turn right\ntankDrive.driveForTime(0.8, 2.0);  // Forward for 2 seconds\n\n// Mecanum drive examples\nmecanumDrive.drive(0.6, 0.3, 0.0); // Forward and strafe\nmecanumDrive.driveForTime(0.5, -0.4, 0.2, 1.5);  // Complex movement for 1.5s"
    },
    {
      "type": "exercise-box",
      "title": "Try It Yourself:",
      "subtitle": "Exercise 1: Overloading Practice",
      "content": "Practice creating overloaded constructors and methods for FTC robotics scenarios:",
      "tasks": [
        "Create a Servo class with multiple constructors for different initialization options",
        "Build a Sensor class with overloaded reading methods for different sampling options",
        "Design an Autonomous class with overloaded movement commands",
        "Create a Competition class with multiple scoring and timing methods"
      ],
      "answers": [
        {
          "task": "Create a Servo class with multiple constructors for different initialization options",
          "code": "public class FTCServo {\n    private String servoName;\n    private double currentPosition;\n    private double minPosition;\n    private double maxPosition;\n    private boolean isReversed;\n    \n    // Constructor 1: Just name (use standard servo range)\n    public FTCServo(String name) {\n        this(name, 0.0, 1.0);  // Standard servo range\n    }\n    \n    // Constructor 2: Name and custom range\n    public FTCServo(String name, double minPos, double maxPos) {\n        this(name, minPos, maxPos, false);  // Not reversed\n    }\n    \n    // Constructor 3: Full configuration\n    public FTCServo(String name, double minPos, double maxPos, boolean reversed) {\n        this.servoName = name;\n        this.minPosition = minPos;\n        this.maxPosition = maxPos;\n        this.isReversed = reversed;\n        this.currentPosition = minPos;  // Start at minimum position\n        \n        System.out.println(\"Servo \" + name + \" initialized:\");\n        System.out.println(\"  Range: \" + minPos + \" to \" + maxPos);\n        System.out.println(\"  Reversed: \" + reversed);\n    }\n    \n    // Overloaded position methods\n    public void setPosition(double position) {\n        this.setPosition(position, true);  // Validate by default\n    }\n    \n    public void setPosition(double position, boolean validate) {\n        if (validate && (position < minPosition || position > maxPosition)) {\n            System.out.println(\"❌ Position \" + position + \" out of range for \" + servoName);\n            return;\n        }\n        \n        double actualPosition = isReversed ? (maxPosition - position + minPosition) : position;\n        this.currentPosition = actualPosition;\n        \n        System.out.println(servoName + \" moved to position: \" + actualPosition);\n    }\n    \n    public String toString() {\n        return servoName + \" at position \" + String.format(\"%.2f\", currentPosition) + \n               \" (range: \" + minPosition + \" to \" + maxPosition + \", reversed: \" + isReversed + \")\";\n    }\n}\n\n// Usage examples:\nFTCServo claw = new FTCServo(\"Claw\");                          // Standard range\nFTCServo arm = new FTCServo(\"Arm\", 0.1, 0.9);                  // Custom range\nFTCServo wrist = new FTCServo(\"Wrist\", 0.0, 0.8, true);        // Reversed\n\nclaw.setPosition(0.5);\narm.setPosition(0.7);\nwrist.setPosition(0.3);\n\nSystem.out.println(claw);\nSystem.out.println(arm);\nSystem.out.println(wrist);"
        },
        {
          "task": "Build a Sensor class with overloaded reading methods for different sampling options",
          "code": "public class FTCSensor {\n    private String sensorType;\n    private double lastReading;\n    private int totalReadings;\n    \n    public FTCSensor(String type) {\n        this.sensorType = type;\n        this.lastReading = 0.0;\n        this.totalReadings = 0;\n    }\n    \n    // Single reading\n    public double readSensor() {\n        return this.readSensor(1);\n    }\n    \n    // Multiple readings (averaged)\n    public double readSensor(int numReadings) {\n        return this.readSensor(numReadings, 50);\n    }\n    \n    // Multiple readings with delay\n    public double readSensor(int numReadings, int delayMs) {\n        return this.readSensor(numReadings, delayMs, true);\n    }\n    \n    // Full control over sampling\n    public double readSensor(int numReadings, int delayMs, boolean showProgress) {\n        if (showProgress) {\n            System.out.printf(\"Reading %s sensor %d times with %dms delay...\\n\", \n                             sensorType, numReadings, delayMs);\n        }\n        \n        double total = 0.0;\n        for (int i = 0; i < numReadings; i++) {\n            // Simulate sensor reading with some noise\n            double reading = 50 + (Math.random() - 0.5) * 20;  // 40-60 range\n            total += reading;\n            \n            if (showProgress && numReadings > 1) {\n                System.out.printf(\"  Reading %d: %.2f\\n\", i + 1, reading);\n            }\n            \n            // Simulate delay\n            if (i < numReadings - 1 && delayMs > 0) {\n                try {\n                    Thread.sleep(delayMs);\n                } catch (InterruptedException e) {\n                    break;\n                }\n            }\n        }\n        \n        double average = total / numReadings;\n        this.lastReading = average;\n        this.totalReadings += numReadings;\n        \n        if (showProgress && numReadings > 1) {\n            System.out.printf(\"Average: %.2f\\n\", average);\n        }\n        \n        return average;\n    }\n    \n    // Filtered reading (remove outliers)\n    public double readSensorFiltered() {\n        return this.readSensorFiltered(5, 100);\n    }\n    \n    public double readSensorFiltered(int samples, int delayMs) {\n        double[] readings = new double[samples];\n        \n        System.out.printf(\"Taking %d filtered readings from %s sensor...\\n\", samples, sensorType);\n        \n        for (int i = 0; i < samples; i++) {\n            readings[i] = 50 + (Math.random() - 0.5) * 20;\n            if (delayMs > 0) {\n                try {\n                    Thread.sleep(delayMs);\n                } catch (InterruptedException e) {\n                    break;\n                }\n            }\n        }\n        \n        // Simple filtering: remove highest and lowest values\n        double min = readings[0];\n        double max = readings[0];\n        double sum = 0;\n        \n        for (double reading : readings) {\n            sum += reading;\n            if (reading < min) min = reading;\n            if (reading > max) max = reading;\n        }\n        \n        // Average without extremes\n        double filtered = (sum - min - max) / (samples - 2);\n        this.lastReading = filtered;\n        this.totalReadings += samples;\n        \n        System.out.printf(\"Filtered result: %.2f (removed %.2f and %.2f)\\n\", filtered, min, max);\n        return filtered;\n    }\n    \n    public double getLastReading() {\n        return this.lastReading;\n    }\n    \n    public int getTotalReadings() {\n        return this.totalReadings;\n    }\n}\n\n// Usage examples:\nFTCSensor ultrasonicSensor = new FTCSensor(\"Ultrasonic\");\n\n// Different ways to read the sensor\ndouble reading1 = ultrasonicSensor.readSensor();           // Single reading\ndouble reading2 = ultrasonicSensor.readSensor(3);          // 3 readings averaged\ndouble reading3 = ultrasonicSensor.readSensor(5, 100);     // 5 readings, 100ms apart\ndouble reading4 = ultrasonicSensor.readSensor(3, 50, false); // Silent mode\ndouble reading5 = ultrasonicSensor.readSensorFiltered();   // Filtered reading\ndouble reading6 = ultrasonicSensor.readSensorFiltered(7, 75); // Custom filtered\n\nSystem.out.printf(\"\\nLast reading: %.2f, Total readings taken: %d\\n\", \n                 ultrasonicSensor.getLastReading(), ultrasonicSensor.getTotalReadings());"
        }
      ]
    }
  ]
}
