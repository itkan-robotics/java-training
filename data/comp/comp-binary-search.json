{
  "id": "comp-binary-search",
  "title": "Binary Search",
  "sections": [
    {
      "type": "text",
      "title": "Binary Search Overview",
      "content": "Binary search is a divide-and-conquer algorithm that finds the position of a target value within a sorted array. It has O(log n) time complexity."
    },
    {
      "type": "code",
      "title": "Standard Binary Search",
      "content": "// Standard binary search for exact match\npublic int binarySearch(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2; // Prevents overflow\n        \n        if (nums[mid] == target) {\n            return mid;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return -1; // Not found\n}"
    },
    {
      "type": "code",
      "title": "Binary Search Variations",
      "content": "// Find first occurrence of target\npublic int findFirst(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n    int result = -1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (nums[mid] == target) {\n            result = mid;\n            right = mid - 1; // Continue searching left\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return result;\n}\n\n// Find last occurrence of target\npublic int findLast(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n    int result = -1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (nums[mid] == target) {\n            result = mid;\n            left = mid + 1; // Continue searching right\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return result;\n}\n\n// Find insertion position (where target should be inserted)\npublic int searchInsert(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length;\n    \n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        \n        if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    \n    return left;\n}"
    },
    {
      "type": "code",
      "title": "Binary Search on Answer Space",
      "content": "// Find square root of x (integer part)\npublic int mySqrt(int x) {\n    if (x <= 1) return x;\n    \n    int left = 1;\n    int right = x;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (mid == x / mid) {\n            return mid;\n        } else if (mid < x / mid) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return right;\n}\n\n// Find peak element in mountain array\npublic int findPeakElement(int[] nums) {\n    int left = 0;\n    int right = nums.length - 1;\n    \n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        \n        if (nums[mid] < nums[mid + 1]) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    \n    return left;\n}"
    },
    {
      "type": "text",
      "title": "When to Use Binary Search",
      "content": "<ul><li><strong>Sorted Arrays:</strong> Finding elements in sorted arrays</li><li><strong>Monotonic Functions:</strong> Finding values where function equals target</li><li><strong>Optimization Problems:</strong> Finding minimum/maximum value satisfying conditions</li><li><strong>Range Queries:</strong> Finding elements in specific ranges</li><li><strong>Time Complexity:</strong> When you need O(log n) instead of O(n)</li></ul>"
    },
    {
      "type": "text",
      "title": "Common Mistakes",
      "content": "<ul><li><strong>Integer Overflow:</strong> Use left + (right - left) / 2 instead of (left + right) / 2</li><li><strong>Infinite Loops:</strong> Ensure left and right are updated correctly</li><li><strong>Edge Cases:</strong> Handle empty arrays, single elements, duplicates</li><li><strong>Return Value:</strong> Decide whether to return index or value</li></ul>"
    }
  ]
} 