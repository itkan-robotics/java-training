{
  "id": "comp-backtracking",
  "title": "Backtracking",
  "sections": [
    {
      "type": "text",
      "title": "Backtracking Overview",
      "content": "Backtracking is a systematic way to search through all possible configurations of a search space. It builds solutions incrementally and abandons partial solutions that cannot lead to a valid solution."
    },
    {
      "type": "text",
      "title": "When to Use Backtracking",
      "content": "<ul><li><strong>Exhaustive Search:</strong> Need to find all possible solutions</li><li><strong>Constraint Satisfaction:</strong> Solutions must satisfy certain constraints</li><li><strong>Combinatorial Problems:</strong> Permutations, combinations, subsets</li><li><strong>Decision Problems:</strong> Yes/no questions with multiple choices</li></ul>"
    },
    {
      "type": "code",
      "title": "Subsets Problem",
      "content": "// Generate all possible subsets\npublic List<List<Integer>> subsets(int[] nums) {\n    List<List<Integer>> result = new ArrayList<>();\n    backtrack(nums, 0, new ArrayList<>(), result);\n    return result;\n}\n\nprivate void backtrack(int[] nums, int start, List<Integer> current, List<List<Integer>> result) {\n    result.add(new ArrayList<>(current));\n    \n    for (int i = start; i < nums.length; i++) {\n        current.add(nums[i]);\n        backtrack(nums, i + 1, current, result);\n        current.remove(current.size() - 1); // Backtrack\n    }\n}"
    },
    {
      "type": "code",
      "title": "Permutations Problem",
      "content": "// Generate all possible permutations\npublic List<List<Integer>> permute(int[] nums) {\n    List<List<Integer>> result = new ArrayList<>();\n    backtrackPermute(nums, new ArrayList<>(), new boolean[nums.length], result);\n    return result;\n}\n\nprivate void backtrackPermute(int[] nums, List<Integer> current, boolean[] used, List<List<Integer>> result) {\n    if (current.size() == nums.length) {\n        result.add(new ArrayList<>(current));\n        return;\n    }\n    \n    for (int i = 0; i < nums.length; i++) {\n        if (!used[i]) {\n            used[i] = true;\n            current.add(nums[i]);\n            backtrackPermute(nums, current, used, result);\n            current.remove(current.size() - 1); // Backtrack\n            used[i] = false;\n        }\n    }\n}"
    },
    {
      "type": "code",
      "title": "N-Queens Problem",
      "content": "// Place n queens on nÃ—n chessboard so no two queens attack each other\npublic List<List<String>> solveNQueens(int n) {\n    List<List<String>> result = new ArrayList<>();\n    char[][] board = new char[n][n];\n    for (char[] row : board) {\n        Arrays.fill(row, '.');\n    }\n    \n    backtrackQueens(board, 0, result);\n    return result;\n}\n\nprivate void backtrackQueens(char[][] board, int row, List<List<String>> result) {\n    if (row == board.length) {\n        result.add(constructSolution(board));\n        return;\n    }\n    \n    for (int col = 0; col < board.length; col++) {\n        if (isValid(board, row, col)) {\n            board[row][col] = 'Q';\n            backtrackQueens(board, row + 1, result);\n            board[row][col] = '.'; // Backtrack\n        }\n    }\n}\n\nprivate boolean isValid(char[][] board, int row, int col) {\n    // Check column\n    for (int i = 0; i < row; i++) {\n        if (board[i][col] == 'Q') return false;\n    }\n    \n    // Check diagonal (top-left to bottom-right)\n    for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\n        if (board[i][j] == 'Q') return false;\n    }\n    \n    // Check diagonal (top-right to bottom-left)\n    for (int i = row - 1, j = col + 1; i >= 0 && j < board.length; i--, j++) {\n        if (board[i][j] == 'Q') return false;\n    }\n    \n    return true;\n}\n\nprivate List<String> constructSolution(char[][] board) {\n    List<String> solution = new ArrayList<>();\n    for (char[] row : board) {\n        solution.add(new String(row));\n    }\n    return solution;\n}"
    },
    {
      "type": "text",
      "title": "Common Backtracking Problems",
      "content": "<ul><li><strong>Combinatorial:</strong> Subsets, permutations, combinations</li><li><strong>Constraint Satisfaction:</strong> N-queens, sudoku solver</li><li><strong>Path Finding:</strong> Maze solving, word search</li><li><strong>Partitioning:</strong> Equal subset sum, palindrome partitioning</li><li><strong>Graph Coloring:</strong> M-coloring problem</li></ul>"
    }
  ]
} 