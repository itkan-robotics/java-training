{
  "id": "comp-dynamic-programming",
  "title": "Dynamic Programming Basics",
  "sections": [
    {
      "type": "text",
      "title": "Dynamic Programming Overview",
      "content": "Dynamic Programming (DP) is a method for solving complex problems by breaking them down into simpler subproblems. It stores the results of subproblems to avoid redundant calculations."
    },
    {
      "type": "text",
      "title": "When to Use DP",
      "content": "<ul><li><strong>Optimal Substructure:</strong> Optimal solution can be constructed from optimal solutions of subproblems</li><li><strong>Overlapping Subproblems:</strong> Same subproblems are solved multiple times</li><li><strong>Memoization:</strong> Store results of expensive function calls</li><li><strong>Tabulation:</strong> Build solution bottom-up using a table</li></ul>"
    },
    {
      "type": "code",
      "title": "Fibonacci Sequence - Classic DP Example",
      "content": "// Recursive (exponential time)\npublic int fibRecursive(int n) {\n    if (n <= 1) return n;\n    return fibRecursive(n - 1) + fibRecursive(n - 2);\n}\n\n// Memoization (top-down)\npublic int fibMemo(int n) {\n    int[] memo = new int[n + 1];\n    Arrays.fill(memo, -1);\n    return fibMemoHelper(n, memo);\n}\n\nprivate int fibMemoHelper(int n, int[] memo) {\n    if (n <= 1) return n;\n    if (memo[n] != -1) return memo[n];\n    \n    memo[n] = fibMemoHelper(n - 1, memo) + fibMemoHelper(n - 2, memo);\n    return memo[n];\n}\n\n// Tabulation (bottom-up)\npublic int fibTabulation(int n) {\n    if (n <= 1) return n;\n    \n    int[] dp = new int[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    \n    for (int i = 2; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    \n    return dp[n];\n}\n\n// Space optimized\npublic int fibOptimized(int n) {\n    if (n <= 1) return n;\n    \n    int prev = 0, curr = 1;\n    for (int i = 2; i <= n; i++) {\n        int next = prev + curr;\n        prev = curr;\n        curr = next;\n    }\n    \n    return curr;\n}"
    },
    {
      "type": "code",
      "title": "Climbing Stairs Problem",
      "content": "// Problem: Climb n stairs, can take 1 or 2 steps at a time\npublic int climbStairs(int n) {\n    if (n <= 2) return n;\n    \n    int[] dp = new int[n + 1];\n    dp[1] = 1;\n    dp[2] = 2;\n    \n    for (int i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    \n    return dp[n];\n}\n\n// Space optimized version\npublic int climbStairsOptimized(int n) {\n    if (n <= 2) return n;\n    \n    int prev = 1, curr = 2;\n    for (int i = 3; i <= n; i++) {\n        int next = prev + curr;\n        prev = curr;\n        curr = next;\n    }\n    \n    return curr;\n}"
    },
    {
      "type": "code",
      "title": "House Robber Problem",
      "content": "// Problem: Rob houses, can't rob adjacent houses\npublic int rob(int[] nums) {\n    if (nums.length == 0) return 0;\n    if (nums.length == 1) return nums[0];\n    \n    int[] dp = new int[nums.length];\n    dp[0] = nums[0];\n    dp[1] = Math.max(nums[0], nums[1]);\n    \n    for (int i = 2; i < nums.length; i++) {\n        dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);\n    }\n    \n    return dp[nums.length - 1];\n}\n\n// Space optimized version\npublic int robOptimized(int[] nums) {\n    if (nums.length == 0) return 0;\n    if (nums.length == 1) return nums[0];\n    \n    int prev = nums[0];\n    int curr = Math.max(nums[0], nums[1]);\n    \n    for (int i = 2; i < nums.length; i++) {\n        int next = Math.max(curr, prev + nums[i]);\n        prev = curr;\n        curr = next;\n    }\n    \n    return curr;\n}"
    },
    {
      "type": "text",
      "title": "DP Problem Categories",
      "content": "<ul><li><strong>1D DP:</strong> Fibonacci, climbing stairs, house robber</li><li><strong>2D DP:</strong> Longest common subsequence, edit distance</li><li><strong>Knapsack:</strong> 0/1 knapsack, unbounded knapsack</li><li><strong>Matrix DP:</strong> Unique paths, minimum path sum</li><li><strong>String DP:</strong> Palindrome, string matching</li></ul>"
    }
  ]
} 