{
  "id": "comp-trie",
  "title": "Trie Data Structure",
  "sections": [
    {
      "type": "text",
      "title": "Trie Overview",
      "content": "A Trie (prefix tree) is a tree-like data structure used to store and retrieve strings. It's particularly efficient for prefix-based operations and autocomplete functionality."
    },
    {
      "type": "text",
      "title": "Trie Properties",
      "content": "<ul><li><strong>Prefix Sharing:</strong> Common prefixes are shared among strings</li><li><strong>Fast Lookup:</strong> O(m) time for string operations where m is string length</li><li><strong>Space Efficient:</strong> For strings with common prefixes</li><li><strong>Autocomplete:</strong> Perfect for prefix-based searches</li></ul>"
    },
    {
      "type": "code",
      "title": "Basic Trie Implementation",
      "content": "class TrieNode {\n    private TrieNode[] children;\n    private boolean isEndOfWord;\n    \n    public TrieNode() {\n        children = new TrieNode[26]; // For lowercase letters\n        isEndOfWord = false;\n    }\n}\n\nclass Trie {\n    private TrieNode root;\n    \n    public Trie() {\n        root = new TrieNode();\n    }\n    \n    // Insert a word into the trie\n    public void insert(String word) {\n        TrieNode current = root;\n        \n        for (char c : word.toCharArray()) {\n            int index = c - 'a';\n            if (current.children[index] == null) {\n                current.children[index] = new TrieNode();\n            }\n            current = current.children[index];\n        }\n        \n        current.isEndOfWord = true;\n    }\n    \n    // Search for a word in the trie\n    public boolean search(String word) {\n        TrieNode current = root;\n        \n        for (char c : word.toCharArray()) {\n            int index = c - 'a';\n            if (current.children[index] == null) {\n                return false;\n            }\n            current = current.children[index];\n        }\n        \n        return current.isEndOfWord;\n    }\n    \n    // Check if there is any word that starts with the given prefix\n    public boolean startsWith(String prefix) {\n        TrieNode current = root;\n        \n        for (char c : prefix.toCharArray()) {\n            int index = c - 'a';\n            if (current.children[index] == null) {\n                return false;\n            }\n            current = current.children[index];\n        }\n        \n        return true;\n    }\n}"
    },
    {
      "type": "code",
      "title": "Word Search II Problem",
      "content": "// Find all words in the board that exist in the dictionary\npublic List<String> findWords(char[][] board, String[] words) {\n    Trie trie = new Trie();\n    for (String word : words) {\n        trie.insert(word);\n    }\n    \n    Set<String> result = new HashSet<>();\n    int m = board.length;\n    int n = board[0].length;\n    \n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            dfs(board, i, j, trie, \"\", result);\n        }\n    }\n    \n    return new ArrayList<>(result);\n}\n\nprivate void dfs(char[][] board, int i, int j, Trie trie, String current, Set<String> result) {\n    if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || \n        board[i][j] == '#') {\n        return;\n    }\n    \n    char c = board[i][j];\n    String newWord = current + c;\n    \n    if (!trie.startsWith(newWord)) {\n        return;\n    }\n    \n    if (trie.search(newWord)) {\n        result.add(newWord);\n    }\n    \n    board[i][j] = '#'; // Mark as visited\n    \n    dfs(board, i + 1, j, trie, newWord, result);\n    dfs(board, i - 1, j, trie, newWord, result);\n    dfs(board, i, j + 1, trie, newWord, result);\n    dfs(board, i, j - 1, trie, newWord, result);\n    \n    board[i][j] = c; // Backtrack\n}"
    },
    {
      "type": "code",
      "title": "Longest Common Prefix",
      "content": "// Find longest common prefix of all strings\npublic String longestCommonPrefix(String[] strs) {\n    if (strs == null || strs.length == 0) return \"\";\n    \n    Trie trie = new Trie();\n    for (String str : strs) {\n        trie.insert(str);\n    }\n    \n    StringBuilder prefix = new StringBuilder();\n    TrieNode current = trie.getRoot();\n    \n    while (current != null) {\n        int childCount = 0;\n        int childIndex = -1;\n        \n        for (int i = 0; i < 26; i++) {\n            if (current.children[i] != null) {\n                childCount++;\n                childIndex = i;\n            }\n        }\n        \n        if (childCount != 1 || current.isEndOfWord) {\n            break;\n        }\n        \n        prefix.append((char) (childIndex + 'a'));\n        current = current.children[childIndex];\n    }\n    \n    return prefix.toString();\n}"
    },
    {
      "type": "text",
      "title": "Common Applications",
      "content": "<ul><li><strong>Autocomplete:</strong> Search suggestions as user types</li><li><strong>Spell Checker:</strong> Dictionary lookup and suggestions</li><li><strong>IP Routing:</strong> Longest prefix matching</li><li><strong>Contact List:</strong> Phone number storage and search</li><li><strong>Text Processing:</strong> Word frequency counting</li></ul>"
    }
  ]
} 