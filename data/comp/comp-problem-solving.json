{
  "id": "comp-problem-solving",
  "title": "Problem-Solving Framework",
  "sections": [
    {
      "type": "text",
      "title": "The 4-Step Framework",
      "content": "Every competitive coding problem can be solved using this systematic approach: Understand, Plan, Execute, Review."
    },
    {
      "type": "text",
      "title": "Step 1: Understand the Problem",
      "content": "<ul><li>Read the problem statement carefully</li><li>Identify input/output format</li><li>Note constraints and edge cases</li><li>Ask clarifying questions if needed</li><li>Write down what you understand in your own words</li></ul>"
    },
    {
      "type": "text",
      "title": "Step 2: Plan Your Solution",
      "content": "<ul><li>Think of a brute force approach first</li><li>Identify patterns or data structures that could help</li><li>Consider time and space complexity</li><li>Write pseudocode or draw diagrams</li><li>Think of edge cases and how to handle them</li></ul>"
    },
    {
      "type": "text",
      "title": "Step 3: Execute Your Plan",
      "content": "<ul><li>Implement your solution step by step</li><li>Test with small examples first</li><li>Handle edge cases explicitly</li><li>Write clean, readable code</li><li>Add comments for complex logic</li></ul>"
    },
    {
      "type": "text",
      "title": "Step 4: Review and Optimize",
      "content": "<ul><li>Test with the given examples</li><li>Check for bugs and edge cases</li><li>Analyze time and space complexity</li><li>Look for optimization opportunities</li><li>Consider alternative approaches</li></ul>"
    },
    {
      "type": "code",
      "title": "Example: Two Sum Problem",
      "content": "// Problem: Find two numbers that add up to target\n// Input: nums = [2, 7, 11, 15], target = 9\n// Output: [0, 1]\n\n// Step 1: Understand - need to find two indices\n// Step 2: Plan - use hash map to store complements\n// Step 3: Execute\n// Step 4: Review - O(n) time, O(n) space\n\npublic int[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[]{map.get(complement), i};\n        }\n        map.put(nums[i], i);\n    }\n    return new int[]{-1, -1};\n}"
    }
  ]
} 