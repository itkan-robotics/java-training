{
  "id": "comp-advanced-dp",
  "title": "Advanced Dynamic Programming",
  "sections": [
    {
      "type": "text",
      "title": "Advanced DP Concepts",
      "content": "Advanced dynamic programming involves complex state definitions, multiple dimensions, and sophisticated optimization techniques."
    },
    {
      "type": "code",
      "title": "Longest Common Subsequence (LCS)",
      "content": "// Find length of longest common subsequence\npublic int longestCommonSubsequence(String text1, String text2) {\n    int m = text1.length();\n    int n = text2.length();\n    \n    int[][] dp = new int[m + 1][n + 1];\n    \n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (text1.charAt(i - 1) == text2.charAt(j - 1)) {\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    \n    return dp[m][n];\n}\n\n// Space optimized version\npublic int longestCommonSubsequenceOptimized(String text1, String text2) {\n    int m = text1.length();\n    int n = text2.length();\n    \n    int[] dp = new int[n + 1];\n    \n    for (int i = 1; i <= m; i++) {\n        int prev = 0;\n        for (int j = 1; j <= n; j++) {\n            int temp = dp[j];\n            if (text1.charAt(i - 1) == text2.charAt(j - 1)) {\n                dp[j] = prev + 1;\n            } else {\n                dp[j] = Math.max(dp[j], dp[j - 1]);\n            }\n            prev = temp;\n        }\n    }\n    \n    return dp[n];\n}"
    },
    {
      "type": "code",
      "title": "0/1 Knapsack Problem",
      "content": "// Classic 0/1 knapsack problem\npublic int knapsack(int[] weights, int[] values, int capacity) {\n    int n = weights.length;\n    int[][] dp = new int[n + 1][capacity + 1];\n    \n    for (int i = 1; i <= n; i++) {\n        for (int w = 0; w <= capacity; w++) {\n            if (weights[i - 1] <= w) {\n                dp[i][w] = Math.max(dp[i - 1][w], \n                                   dp[i - 1][w - weights[i - 1]] + values[i - 1]);\n            } else {\n                dp[i][w] = dp[i - 1][w];\n            }\n        }\n    }\n    \n    return dp[n][capacity];\n}\n\n// Space optimized version\npublic int knapsackOptimized(int[] weights, int[] values, int capacity) {\n    int n = weights.length;\n    int[] dp = new int[capacity + 1];\n    \n    for (int i = 0; i < n; i++) {\n        for (int w = capacity; w >= weights[i]; w--) {\n            dp[w] = Math.max(dp[w], dp[w - weights[i]] + values[i]);\n        }\n    }\n    \n    return dp[capacity];\n}"
    },
    {
      "type": "code",
      "title": "Edit Distance",
      "content": "// Minimum operations to convert word1 to word2\npublic int minDistance(String word1, String word2) {\n    int m = word1.length();\n    int n = word2.length();\n    \n    int[][] dp = new int[m + 1][n + 1];\n    \n    // Initialize first row and column\n    for (int i = 0; i <= m; i++) {\n        dp[i][0] = i;\n    }\n    for (int j = 0; j <= n; j++) {\n        dp[0][j] = j;\n    }\n    \n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (word1.charAt(i - 1) == word2.charAt(j - 1)) {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = 1 + Math.min(dp[i - 1][j - 1], \n                                       Math.min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n    \n    return dp[m][n];\n}"
    },
    {
      "type": "text",
      "title": "Advanced DP Techniques",
      "content": "<ul><li><strong>State Compression:</strong> Use bit manipulation for small state spaces</li><li><strong>Digit DP:</strong> Solve problems involving digits and constraints</li><li><strong>Tree DP:</strong> Dynamic programming on trees</li><li><strong>Convex Hull Optimization:</strong> Optimize certain DP transitions</li><li><strong>Monotonic Queue Optimization:</strong> Optimize sliding window DP</li></ul>"
    }
  ]
} 
