{
  "id": "comp-segment-trees",
  "title": "Segment Trees",
  "sections": [
    {
      "type": "text",
      "title": "Segment Tree Overview",
      "content": "A Segment Tree is a data structure that allows efficient range queries and range updates on an array. It's particularly useful for problems involving range sum, range minimum/maximum, and range updates."
    },
    {
      "type": "text",
      "title": "Segment Tree Properties",
      "content": "<ul><li><strong>Range Queries:</strong> O(log n) time for range operations</li><li><strong>Point Updates:</strong> O(log n) time for single element updates</li><li><strong>Range Updates:</strong> O(log n) time with lazy propagation</li><li><strong>Space Complexity:</strong> O(n) space</li></ul>"
    },
    {
      "type": "code",
      "title": "Basic Segment Tree Implementation",
      "content": "class SegmentTree {\n    private int[] tree;\n    private int n;\n    \n    public SegmentTree(int[] arr) {\n        n = arr.length;\n        tree = new int[4 * n]; // Size should be 4 * n for safety\n        buildTree(arr, 0, 0, n - 1);\n    }\n    \n    private void buildTree(int[] arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n            return;\n        }\n        \n        int mid = start + (end - start) / 2;\n        buildTree(arr, 2 * node + 1, start, mid);\n        buildTree(arr, 2 * node + 2, mid + 1, end);\n        \n        tree[node] = tree[2 * node + 1] + tree[2 * node + 2]; // Sum operation\n    }\n    \n    // Range sum query\n    public int rangeSum(int left, int right) {\n        return rangeSumQuery(0, 0, n - 1, left, right);\n    }\n    \n    private int rangeSumQuery(int node, int start, int end, int left, int right) {\n        if (right < start || left > end) {\n            return 0; // Out of range\n        }\n        \n        if (left <= start && right >= end) {\n            return tree[node]; // Completely within range\n        }\n        \n        int mid = start + (end - start) / 2;\n        int leftSum = rangeSumQuery(2 * node + 1, start, mid, left, right);\n        int rightSum = rangeSumQuery(2 * node + 2, mid + 1, end, left, right);\n        \n        return leftSum + rightSum;\n    }\n    \n    // Point update\n    public void update(int index, int value) {\n        updatePoint(0, 0, n - 1, index, value);\n    }\n    \n    private void updatePoint(int node, int start, int end, int index, int value) {\n        if (start == end) {\n            tree[node] = value;\n            return;\n        }\n        \n        int mid = start + (end - start) / 2;\n        if (index <= mid) {\n            updatePoint(2 * node + 1, start, mid, index, value);\n        } else {\n            updatePoint(2 * node + 2, mid + 1, end, index, value);\n        }\n        \n        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n    }\n}"
    },
    {
      "type": "code",
      "title": "Range Sum Query - Mutable",
      "content": "// Problem: Range sum query with point updates\nclass NumArray {\n    private SegmentTree st;\n    \n    public NumArray(int[] nums) {\n        st = new SegmentTree(nums);\n    }\n    \n    public void update(int index, int val) {\n        st.update(index, val);\n    }\n    \n    public int sumRange(int left, int right) {\n        return st.rangeSum(left, right);\n    }\n}"
    },
    {
      "type": "code",
      "title": "Segment Tree with Lazy Propagation",
      "content": "class LazySegmentTree {\n    private int[] tree;\n    private int[] lazy;\n    private int n;\n    \n    public LazySegmentTree(int[] arr) {\n        n = arr.length;\n        tree = new int[4 * n];\n        lazy = new int[4 * n];\n        buildTree(arr, 0, 0, n - 1);\n    }\n    \n    private void buildTree(int[] arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n            return;\n        }\n        \n        int mid = start + (end - start) / 2;\n        buildTree(arr, 2 * node + 1, start, mid);\n        buildTree(arr, 2 * node + 2, mid + 1, end);\n        \n        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n    }\n    \n    // Range update with lazy propagation\n    public void rangeUpdate(int left, int right, int value) {\n        rangeUpdateQuery(0, 0, n - 1, left, right, value);\n    }\n    \n    private void rangeUpdateQuery(int node, int start, int end, int left, int right, int value) {\n        // Propagate lazy values\n        if (lazy[node] != 0) {\n            tree[node] += lazy[node] * (end - start + 1);\n            if (start != end) {\n                lazy[2 * node + 1] += lazy[node];\n                lazy[2 * node + 2] += lazy[node];\n            }\n            lazy[node] = 0;\n        }\n        \n        if (right < start || left > end) {\n            return;\n        }\n        \n        if (left <= start && right >= end) {\n            tree[node] += value * (end - start + 1);\n            if (start != end) {\n                lazy[2 * node + 1] += value;\n                lazy[2 * node + 2] += value;\n            }\n            return;\n        }\n        \n        int mid = start + (end - start) / 2;\n        rangeUpdateQuery(2 * node + 1, start, mid, left, right, value);\n        rangeUpdateQuery(2 * node + 2, mid + 1, end, left, right, value);\n        \n        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n    }\n}"
    },
    {
      "type": "text",
      "title": "Common Applications",
      "content": "<ul><li><strong>Range Sum:</strong> Sum of elements in a range</li><li><strong>Range Min/Max:</strong> Minimum/maximum in a range</li><li><strong>Range Updates:</strong> Add value to all elements in range</li><li><strong>Inversion Count:</strong> Count inversions in array</li><li><strong>2D Problems:</strong> 2D segment trees for matrix operations</li></ul>"
    }
  ]
} 
