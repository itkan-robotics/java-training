{
  "id": "comp-bit-manipulation",
  "title": "Bit Manipulation",
  "sections": [
    {
      "type": "text",
      "title": "Bit Manipulation Overview",
      "content": "Bit manipulation involves using bitwise operators to solve problems efficiently. It's useful for optimization, low-level programming, and certain algorithmic tricks."
    },
    {
      "type": "text",
      "title": "Common Bitwise Operators",
      "content": "<ul><li><strong>AND (&):</strong> 1 if both bits are 1</li><li><strong>OR (|):</strong> 1 if at least one bit is 1</li><li><strong>XOR (^):</strong> 1 if bits are different</li><li><strong>NOT (~):</strong> Inverts all bits</li><li><strong>Left Shift (<<):</strong> Shifts bits left</li><li><strong>Right Shift (>>):</strong> Shifts bits right</li></ul>"
    },
    {
      "type": "code",
      "title": "Bit Tricks Examples",
      "content": "// Check if n is even\nboolean isEven(int n) {\n    return (n & 1) == 0;\n}\n\n// Swap two numbers without temp\nvoid swap(int a, int b) {\n    a = a ^ b;\n    b = a ^ b;\n    a = a ^ b;\n}\n\n// Count set bits\nint countBits(int n) {\n    int count = 0;\n    while (n != 0) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n\n// Get rightmost set bit\nint rightmostSetBit(int n) {\n    return n & -n;\n}\n\n// Check if n is power of two\nboolean isPowerOfTwo(int n) {\n    return n > 0 && (n & (n - 1)) == 0;\n}"
    },
    {
      "type": "text",
      "title": "Common Applications",
      "content": "<ul><li><strong>Optimization:</strong> Fast arithmetic, state compression</li><li><strong>Masking:</strong> Enable/disable bits</li><li><strong>Subset Generation:</strong> Use bits to represent sets</li><li><strong>Gray Code:</strong> Generate binary reflected Gray code</li><li><strong>Bit DP:</strong> Dynamic programming with bitmasks</li></ul>"
    }
  ]
} 
