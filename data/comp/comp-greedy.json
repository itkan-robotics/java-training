{
  "id": "comp-greedy",
  "title": "Greedy Algorithms",
  "sections": [
    {
      "type": "text",
      "title": "Greedy Algorithm Overview",
      "content": "Greedy algorithms make locally optimal choices at each step with the hope of finding a globally optimal solution. They're simple and often efficient but don't always guarantee the best solution."
    },
    {
      "type": "text",
      "title": "When to Use Greedy",
      "content": "<ul><li><strong>Optimal Substructure:</strong> Optimal solution contains optimal solutions to subproblems</li><li><strong>Greedy Choice Property:</strong> Locally optimal choice leads to globally optimal solution</li><li><strong>Simple Implementation:</strong> Often easier to implement than DP</li><li><strong>Efficiency:</strong> Usually O(n log n) or O(n) time complexity</li></ul>"
    },
    {
      "type": "code",
      "title": "Activity Selection Problem",
      "content": "// Problem: Select maximum number of activities that don't overlap\npublic int activitySelection(int[] start, int[] end) {\n    int n = start.length;\n    if (n == 0) return 0;\n    \n    // Create pairs of (start, end) and sort by end time\n    int[][] activities = new int[n][2];\n    for (int i = 0; i < n; i++) {\n        activities[i][0] = start[i];\n        activities[i][1] = end[i];\n    }\n    \n    Arrays.sort(activities, (a, b) -> a[1] - b[1]);\n    \n    int count = 1;\n    int lastEnd = activities[0][1];\n    \n    for (int i = 1; i < n; i++) {\n        if (activities[i][0] >= lastEnd) {\n            count++;\n            lastEnd = activities[i][1];\n        }\n    }\n    \n    return count;\n}"
    },
    {
      "type": "code",
      "title": "Fractional Knapsack",
      "content": "// Problem: Fill knapsack with fractional items to maximize value\npublic double fractionalKnapsack(int[] weights, int[] values, int capacity) {\n    int n = weights.length;\n    \n    // Create items with value per unit weight\n    double[][] items = new double[n][3];\n    for (int i = 0; i < n; i++) {\n        items[i][0] = weights[i];\n        items[i][1] = values[i];\n        items[i][2] = (double) values[i] / weights[i];\n    }\n    \n    // Sort by value per unit weight (descending)\n    Arrays.sort(items, (a, b) -> Double.compare(b[2], a[2]));\n    \n    double totalValue = 0.0;\n    int remainingCapacity = capacity;\n    \n    for (int i = 0; i < n && remainingCapacity > 0; i++) {\n        double weight = items[i][0];\n        double value = items[i][1];\n        \n        if (weight <= remainingCapacity) {\n            totalValue += value;\n            remainingCapacity -= weight;\n        } else {\n            // Take fractional part\n            double fraction = remainingCapacity / weight;\n            totalValue += value * fraction;\n            remainingCapacity = 0;\n        }\n    }\n    \n    return totalValue;\n}"
    },
    {
      "type": "code",
      "title": "Huffman Coding",
      "content": "// Problem: Create optimal prefix code for characters\nclass HuffmanNode implements Comparable<HuffmanNode> {\n    char data;\n    int frequency;\n    HuffmanNode left, right;\n    \n    public HuffmanNode(char data, int frequency) {\n        this.data = data;\n        this.frequency = frequency;\n    }\n    \n    @Override\n    public int compareTo(HuffmanNode other) {\n        return this.frequency - other.frequency;\n    }\n}\n\npublic HuffmanNode buildHuffmanTree(char[] chars, int[] freq) {\n    PriorityQueue<HuffmanNode> pq = new PriorityQueue<>();\n    \n    // Create leaf nodes\n    for (int i = 0; i < chars.length; i++) {\n        pq.offer(new HuffmanNode(chars[i], freq[i]));\n    }\n    \n    // Build tree\n    while (pq.size() > 1) {\n        HuffmanNode left = pq.poll();\n        HuffmanNode right = pq.poll();\n        \n        HuffmanNode parent = new HuffmanNode('\\0', left.frequency + right.frequency);\n        parent.left = left;\n        parent.right = right;\n        \n        pq.offer(parent);\n    }\n    \n    return pq.poll();\n}"
    },
    {
      "type": "text",
      "title": "Common Greedy Problems",
      "content": "<ul><li><strong>Scheduling:</strong> Activity selection, job scheduling</li><li><strong>Knapsack:</strong> Fractional knapsack (0/1 knapsack is not greedy)</li><li><strong>Compression:</strong> Huffman coding</li><li><strong>Graph:</strong> Minimum spanning tree (Kruskal's, Prim's)</li><li><strong>Coin Change:</strong> Making change with minimum coins (when greedy works)</li><li><strong>Gas Station:</strong> Circular tour problem</li></ul>"
    }
  ]
} 