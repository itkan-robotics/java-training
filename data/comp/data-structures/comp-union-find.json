{
  "id": "comp-union-find",
  "title": "Union Find (Disjoint Sets)",
  "sections": [
    {
      "type": "text",
      "title": "Union Find Overview",
      "content": "Union Find (Disjoint Sets) is a data structure that tracks a set of elements partitioned into a number of disjoint subsets. It supports two main operations: find and union."
    },
    {
      "type": "text",
      "title": "Operations",
      "content": "<ul><li><strong>Find:</strong> Determine which subset an element belongs to</li><li><strong>Union:</strong> Join two subsets into a single subset</li><li><strong>Connected:</strong> Check if two elements are in the same subset</li></ul>"
    },
    {
      "type": "code",
      "title": "Basic Union Find Implementation",
      "content": "class UnionFind {\n    private int[] parent;\n    private int[] rank;\n    private int count;\n    \n    public UnionFind(int n) {\n        parent = new int[n];\n        rank = new int[n];\n        count = n;\n        \n        for (int i = 0; i < n; i++) {\n            parent[i] = i;\n            rank[i] = 0;\n        }\n    }\n    \n    // Find with path compression\n    public int find(int x) {\n        if (parent[x] != x) {\n            parent[x] = find(parent[x]); // Path compression\n        }\n        return parent[x];\n    }\n    \n    // Union by rank\n    public void union(int x, int y) {\n        int rootX = find(x);\n        int rootY = find(y);\n        \n        if (rootX == rootY) return;\n        \n        if (rank[rootX] < rank[rootY]) {\n            parent[rootX] = rootY;\n        } else if (rank[rootX] > rank[rootY]) {\n            parent[rootY] = rootX;\n        } else {\n            parent[rootY] = rootX;\n            rank[rootX]++;\n        }\n        \n        count--;\n    }\n    \n    public boolean connected(int x, int y) {\n        return find(x) == find(y);\n    }\n    \n    public int getCount() {\n        return count;\n    }\n}"
    },
    {
      "type": "code",
      "title": "Number of Islands Problem",
      "content": "// Count number of islands in 2D grid\npublic int numIslands(char[][] grid) {\n    if (grid == null || grid.length == 0) return 0;\n    \n    int m = grid.length;\n    int n = grid[0].length;\n    UnionFind uf = new UnionFind(m * n);\n    \n    int count = 0;\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == '1') {\n                count++;\n                \n                // Check four directions\n                int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n                for (int[] dir : directions) {\n                    int newI = i + dir[0];\n                    int newJ = j + dir[1];\n                    \n                    if (newI >= 0 && newI < m && newJ >= 0 && newJ < n && \n                        grid[newI][newJ] == '1') {\n                        \n                        int id1 = i * n + j;\n                        int id2 = newI * n + newJ;\n                        \n                        if (!uf.connected(id1, id2)) {\n                            uf.union(id1, id2);\n                            count--;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    return count;\n}"
    },
    {
      "type": "code",
      "title": "Redundant Connection Problem",
      "content": "// Find redundant connection in undirected graph\npublic int[] findRedundantConnection(int[][] edges) {\n    int n = edges.length;\n    UnionFind uf = new UnionFind(n + 1);\n    \n    for (int[] edge : edges) {\n        int u = edge[0];\n        int v = edge[1];\n        \n        if (uf.connected(u, v)) {\n            return edge;\n        }\n        \n        uf.union(u, v);\n    }\n    \n    return new int[0];\n}"
    },
    {
      "type": "text",
      "title": "Common Applications",
      "content": "<ul><li><strong>Graph Problems:</strong> Cycle detection, connected components</li><li><strong>Network Problems:</strong> Network connectivity, clustering</li><li><strong>Image Processing:</strong> Connected component labeling</li><li><strong>Kruskal's Algorithm:</strong> Minimum spanning tree</li><li><strong>Game Theory:</strong> Board games with connected regions</li></ul>"
    }
  ]
} 
