{
  "id": "comp-linked-lists",
  "title": "Linked Lists",
  "sections": [
    {
      "type": "text",
      "title": "Linked List Basics",
      "content": "Linked lists are linear data structures where elements are stored in nodes, and each node points to the next node. They're useful for dynamic memory allocation and certain algorithms."
    },
    {
      "type": "code",
      "title": "Linked List Node Definition",
      "content": "class ListNode {\n    int val;\n    ListNode next;\n    \n    ListNode(int val) {\n        this.val = val;\n        this.next = null;\n    }\n}"
    },
    {
      "type": "code",
      "title": "Common Linked List Operations",
      "content": "// Traversal\nListNode current = head;\nwhile (current != null) {\n    // Process current.val\n    current = current.next;\n}\n\n// Insert at beginning\nListNode newNode = new ListNode(val);\nnewNode.next = head;\nhead = newNode;\n\n// Insert at end\nif (head == null) {\n    head = new ListNode(val);\n} else {\n    ListNode current = head;\n    while (current.next != null) {\n        current = current.next;\n    }\n    current.next = new ListNode(val);\n}\n\n// Delete node\nListNode dummy = new ListNode(0);\ndummy.next = head;\nListNode prev = dummy;\nwhile (prev.next != null && prev.next.val != target) {\n    prev = prev.next;\n}\nif (prev.next != null) {\n    prev.next = prev.next.next;\n}\nreturn dummy.next;"
    },
    {
      "type": "text",
      "title": "Key Techniques",
      "content": "<ul><li><strong>Two Pointers (Fast & Slow):</strong> Detect cycles, find middle</li><li><strong>Dummy Node:</strong> Handle edge cases in insertion/deletion</li><li><strong>Reverse:</strong> Reverse entire list or portions</li><li><strong>Merge:</strong> Merge two sorted lists</li><li><strong>Cycle Detection:</strong> Floyd's Cycle Finding Algorithm</li></ul>"
    },
    {
      "type": "code",
      "title": "Cycle Detection (Floyd's Algorithm)",
      "content": "boolean hasCycle(ListNode head) {\n    if (head == null || head.next == null) return false;\n    \n    ListNode slow = head;\n    ListNode fast = head;\n    \n    while (fast != null && fast.next != null) {\n        slow = slow.next;\n        fast = fast.next.next;\n        if (slow == fast) return true;\n    }\n    return false;\n}"
    }
  ]
} 