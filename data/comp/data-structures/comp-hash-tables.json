{
  "id": "comp-hash-tables",
  "title": "Hash Tables & Sets",
  "sections": [
    {
      "type": "text",
      "title": "Hash Table Basics",
      "content": "A hash table is a data structure that stores key-value pairs. It provides average O(1) time complexity for insertions, deletions, and lookups."
    },
    {
      "type": "code",
      "title": "HashMap in Java",
      "content": "// Basic HashMap operations\nHashMap<String, Integer> map = new HashMap<>();\n\n// Insert/Update\nmap.put(\"apple\", 1);\nmap.put(\"banana\", 2);\n\n// Get value\nint value = map.get(\"apple\"); // 1\n\n// Check if key exists\nboolean contains = map.containsKey(\"apple\"); // true\n\n// Remove key-value pair\nmap.remove(\"apple\");\n\n// Get size\nint size = map.size();\n\n// Check if empty\nboolean isEmpty = map.isEmpty();\n\n// Clear all entries\nmap.clear();\n\n// Iterate through entries\nfor (Map.Entry<String, Integer> entry : map.entrySet()) {\n    String key = entry.getKey();\n    Integer val = entry.getValue();\n    System.out.println(key + \": \" + val);\n}"
    },
    {
      "type": "text",
      "title": "HashSet in Java",
      "content": "A HashSet is a collection that contains no duplicate elements. It's implemented using a hash table and provides O(1) average time complexity for add, remove, and contains operations."
    },
    {
      "type": "code",
      "title": "HashSet Operations",
      "content": "// Basic HashSet operations\nHashSet<Integer> set = new HashSet<>();\n\n// Add elements\nset.add(1);\nset.add(2);\nset.add(1); // Duplicate, won't be added\n\n// Check if element exists\nboolean contains = set.contains(1); // true\n\n// Remove element\nset.remove(1);\n\n// Get size\nint size = set.size();\n\n// Check if empty\nboolean isEmpty = set.isEmpty();\n\n// Clear all elements\nset.clear();\n\n// Iterate through elements\nfor (int num : set) {\n    System.out.println(num);\n}"
    },
    {
      "type": "text",
      "title": "Common Applications",
      "content": "<ul><li><strong>Duplicate Detection:</strong> Find duplicates in arrays</li><li><strong>Two Sum:</strong> Find pairs that sum to target</li><li><strong>Anagram Detection:</strong> Check if strings are anagrams</li><li><strong>Subarray Sum:</strong> Find subarrays with given sum</li><li><strong>Union/Intersection:</strong> Set operations</li><li><strong>Frequency Counting:</strong> Count occurrences of elements</li></ul>"
    },
    {
      "type": "code",
      "title": "Two Sum Example",
      "content": "public int[] twoSum(int[] nums, int target) {\n    HashMap<Integer, Integer> map = new HashMap<>();\n    \n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[]{map.get(complement), i};\n        }\n        map.put(nums[i], i);\n    }\n    \n    return new int[]{-1, -1}; // No solution found\n}"
    }
  ]
} 
