{
  "id": "comp-graphs",
  "title": "Graphs & Graph Algorithms",
  "sections": [
    {
      "type": "text",
      "title": "Graph Basics",
      "content": "A graph is a data structure consisting of vertices (nodes) connected by edges. Graphs can be directed or undirected, weighted or unweighted."
    },
    {
      "type": "code",
      "title": "Graph Representation",
      "content": "// Adjacency List representation\nclass Graph {\n    private Map<Integer, List<Integer>> adjacencyList;\n    \n    public Graph() {\n        adjacencyList = new HashMap<>();\n    }\n    \n    public void addVertex(int vertex) {\n        adjacencyList.putIfAbsent(vertex, new ArrayList<>());\n    }\n    \n    public void addEdge(int source, int destination) {\n        adjacencyList.get(source).add(destination);\n        // For undirected graph, also add reverse edge\n        // adjacencyList.get(destination).add(source);\n    }\n    \n    public List<Integer> getNeighbors(int vertex) {\n        return adjacencyList.getOrDefault(vertex, new ArrayList<>());\n    }\n}\n\n// Adjacency Matrix representation\nclass GraphMatrix {\n    private int[][] adjacencyMatrix;\n    private int numVertices;\n    \n    public GraphMatrix(int numVertices) {\n        this.numVertices = numVertices;\n        this.adjacencyMatrix = new int[numVertices][numVertices];\n    }\n    \n    public void addEdge(int source, int destination) {\n        adjacencyMatrix[source][destination] = 1;\n        // For undirected graph\n        // adjacencyMatrix[destination][source] = 1;\n    }\n}"
    },
    {
      "type": "text",
      "title": "Graph Traversal",
      "content": "<ul><li><strong>Depth-First Search (DFS):</strong> Explore as far as possible along each branch before backtracking</li><li><strong>Breadth-First Search (BFS):</strong> Explore all neighbors at the present depth before moving to next level</li></ul>"
    },
    {
      "type": "code",
      "title": "DFS Implementation",
      "content": "// DFS using recursion\nvoid dfsRecursive(int vertex, boolean[] visited, List<Integer> result) {\n    visited[vertex] = true;\n    result.add(vertex);\n    \n    for (int neighbor : getNeighbors(vertex)) {\n        if (!visited[neighbor]) {\n            dfsRecursive(neighbor, visited, result);\n        }\n    }\n}\n\n// DFS using stack (iterative)\nList<Integer> dfsIterative(int startVertex) {\n    List<Integer> result = new ArrayList<>();\n    boolean[] visited = new boolean[numVertices];\n    Stack<Integer> stack = new Stack<>();\n    \n    stack.push(startVertex);\n    \n    while (!stack.isEmpty()) {\n        int vertex = stack.pop();\n        \n        if (!visited[vertex]) {\n            visited[vertex] = true;\n            result.add(vertex);\n            \n            for (int neighbor : getNeighbors(vertex)) {\n                if (!visited[neighbor]) {\n                    stack.push(neighbor);\n                }\n            }\n        }\n    }\n    \n    return result;\n}"
    },
    {
      "type": "code",
      "title": "BFS Implementation",
      "content": "List<Integer> bfs(int startVertex) {\n    List<Integer> result = new ArrayList<>();\n    boolean[] visited = new boolean[numVertices];\n    Queue<Integer> queue = new LinkedList<>();\n    \n    queue.offer(startVertex);\n    visited[startVertex] = true;\n    \n    while (!queue.isEmpty()) {\n        int vertex = queue.poll();\n        result.add(vertex);\n        \n        for (int neighbor : getNeighbors(vertex)) {\n            if (!visited[neighbor]) {\n                visited[neighbor] = true;\n                queue.offer(neighbor);\n            }\n        }\n    }\n    \n    return result;\n}"
    },
    {
      "type": "text",
      "title": "Common Graph Problems",
      "content": "<ul><li><strong>Connected Components:</strong> Find all connected components in a graph</li><li><strong>Cycle Detection:</strong> Detect cycles in directed/undirected graphs</li><li><strong>Topological Sort:</strong> Order vertices in directed acyclic graph</li><li><strong>Shortest Path:</strong> Find shortest path between vertices</li><li><strong>Minimum Spanning Tree:</strong> Find minimum weight spanning tree</li></ul>"
    }
  ]
} 
