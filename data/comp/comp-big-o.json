{
  "id": "comp-big-o",
  "title": "Big O Notation Mastery",
  "sections": [
    {
      "type": "text",
      "title": "Understanding Big O Notation",
      "content": "Big O notation describes the upper bound of an algorithm's growth rate. It helps us compare algorithms and predict performance."
    },
    {
      "type": "text",
      "title": "Key Rules for Big O Analysis",
      "content": "<ul><li><strong>Drop Constants:</strong> O(2n) = O(n)</li><li><strong>Drop Lower Order Terms:</strong> O(n² + n) = O(n²)</li><li><strong>Worst Case:</strong> We analyze the worst-case scenario</li><li><strong>Input Size:</strong> n represents the size of the input</li></ul>"
    },
    {
      "type": "code",
      "title": "Common Big O Complexities",
      "content": "// O(1) - Constant Time\nint getElement(int[] arr, int index) {\n    return arr[index];\n}\n\n// O(log n) - Logarithmic Time\nint binarySearch(int[] arr, int target) {\n    int left = 0, right = arr.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == target) return mid;\n        if (arr[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}\n\n// O(n) - Linear Time\nint findMax(int[] arr) {\n    int max = arr[0];\n    for (int num : arr) {\n        if (num > max) max = num;\n    }\n    return max;\n}\n\n// O(n log n) - Linearithmic Time\n// Merge Sort, Quick Sort, Heap Sort\n\n// O(n²) - Quadratic Time\nvoid bubbleSort(int[] arr) {\n    for (int i = 0; i < arr.length; i++) {\n        for (int j = 0; j < arr.length - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // swap\n            }\n        }\n    }\n}\n\n// O(2ⁿ) - Exponential Time\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n-1) + fibonacci(n-2);\n}"
    },
    {
      "type": "text",
      "title": "Nested Loops Analysis",
      "content": "<ul><li><strong>Two nested loops:</strong> O(n²)</li><li><strong>Three nested loops:</strong> O(n³)</li><li><strong>Loop with different bounds:</strong> O(n × m)</li><li><strong>Loop with halving:</strong> O(log n)</li></ul>"
    },
    {
      "type": "text",
      "title": "Space Complexity Examples",
      "content": "<ul><li><strong>O(1):</strong> Using only a few variables</li><li><strong>O(n):</strong> Creating an array of size n</li><li><strong>O(n²):</strong> Creating a 2D array of size n×n</li><li><strong>O(log n):</strong> Recursive calls with halving</li></ul>"
    }
  ]
} 