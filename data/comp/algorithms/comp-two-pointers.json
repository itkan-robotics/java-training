{
  "id": "comp-two-pointers",
  "title": "Two Pointers Technique",
  "sections": [
    {
      "type": "text",
      "title": "Two Pointers Technique",
      "content": "The two pointers technique is a common algorithmic pattern that uses two pointers to solve problems efficiently. It's particularly useful for array and string problems."
    },
    {
      "type": "text",
      "title": "Types of Two Pointers",
      "content": "<ul><li><strong>Opposite Directional:</strong> Pointers start from opposite ends and move toward each other</li><li><strong>Same Directional:</strong> Pointers start from the same end and move in the same direction</li><li><strong>Fast and Slow:</strong> One pointer moves faster than the other</li></ul>"
    },
    {
      "type": "code",
      "title": "Opposite Directional Example - Two Sum in Sorted Array",
      "content": "// Find two numbers that sum to target in sorted array\npublic int[] twoSum(int[] numbers, int target) {\n    int left = 0;\n    int right = numbers.length - 1;\n    \n    while (left < right) {\n        int sum = numbers[left] + numbers[right];\n        \n        if (sum == target) {\n            return new int[]{left + 1, right + 1}; // 1-indexed\n        } else if (sum < target) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n    \n    return new int[]{-1, -1};\n}"
    },
    {
      "type": "code",
      "title": "Same Directional Example - Remove Duplicates",
      "content": "// Remove duplicates from sorted array\npublic int removeDuplicates(int[] nums) {\n    if (nums.length == 0) return 0;\n    \n    int writeIndex = 1;\n    \n    for (int readIndex = 1; readIndex < nums.length; readIndex++) {\n        if (nums[readIndex] != nums[readIndex - 1]) {\n            nums[writeIndex] = nums[readIndex];\n            writeIndex++;\n        }\n    }\n    \n    return writeIndex;\n}\n\n// Remove duplicates allowing at most 2 occurrences\npublic int removeDuplicatesII(int[] nums) {\n    if (nums.length <= 2) return nums.length;\n    \n    int writeIndex = 2;\n    \n    for (int readIndex = 2; readIndex < nums.length; readIndex++) {\n        if (nums[readIndex] != nums[writeIndex - 2]) {\n            nums[writeIndex] = nums[readIndex];\n            writeIndex++;\n        }\n    }\n    \n    return writeIndex;\n}"
    },
    {
      "type": "code",
      "title": "Fast and Slow Pointers - Cycle Detection",
      "content": "// Detect cycle in linked list (Floyd's Algorithm)\npublic boolean hasCycle(ListNode head) {\n    if (head == null || head.next == null) return false;\n    \n    ListNode slow = head;\n    ListNode fast = head;\n    \n    while (fast != null && fast.next != null) {\n        slow = slow.next;\n        fast = fast.next.next;\n        \n        if (slow == fast) return true;\n    }\n    \n    return false;\n}\n\n// Find middle of linked list\npublic ListNode findMiddle(ListNode head) {\n    if (head == null) return null;\n    \n    ListNode slow = head;\n    ListNode fast = head;\n    \n    while (fast.next != null && fast.next.next != null) {\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n    \n    return slow;\n}"
    },
    {
      "type": "text",
      "title": "Common Applications",
      "content": "<ul><li><strong>Array Problems:</strong> Two sum, container with most water, 3 sum</li><li><strong>String Problems:</strong> Palindrome check, reverse string</li><li><strong>Linked List:</strong> Cycle detection, find middle, reverse</li><li><strong>Optimization:</strong> Reduce time complexity from O(nÂ²) to O(n)</li></ul>"
    }
  ]
} 
