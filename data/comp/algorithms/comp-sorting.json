{
  "id": "comp-sorting",
  "title": "Sorting Algorithms",
  "sections": [
    {
      "type": "text",
      "title": "Sorting Algorithm Overview",
      "content": "Sorting is one of the most fundamental operations in computer science. Understanding different sorting algorithms helps in choosing the right one for specific scenarios."
    },
    {
      "type": "code",
      "title": "Quick Sort",
      "content": "// Quick Sort - O(n log n) average, O(n²) worst case\npublic void quickSort(int[] arr, int low, int high) {\n    if (low < high) {\n        int pi = partition(arr, low, high);\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}\n\nprivate int partition(int[] arr, int low, int high) {\n    int pivot = arr[high];\n    int i = low - 1;\n    \n    for (int j = low; j < high; j++) {\n        if (arr[j] <= pivot) {\n            i++;\n            swap(arr, i, j);\n        }\n    }\n    \n    swap(arr, i + 1, high);\n    return i + 1;\n}\n\nprivate void swap(int[] arr, int i, int j) {\n    int temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}"
    },
    {
      "type": "code",
      "title": "Merge Sort",
      "content": "// Merge Sort - O(n log n) time, O(n) space\npublic void mergeSort(int[] arr, int left, int right) {\n    if (left < right) {\n        int mid = left + (right - left) / 2;\n        mergeSort(arr, left, mid);\n        mergeSort(arr, mid + 1, right);\n        merge(arr, left, mid, right);\n    }\n}\n\nprivate void merge(int[] arr, int left, int mid, int right) {\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n    \n    int[] leftArr = new int[n1];\n    int[] rightArr = new int[n2];\n    \n    for (int i = 0; i < n1; i++) {\n        leftArr[i] = arr[left + i];\n    }\n    for (int j = 0; j < n2; j++) {\n        rightArr[j] = arr[mid + 1 + j];\n    }\n    \n    int i = 0, j = 0, k = left;\n    while (i < n1 && j < n2) {\n        if (leftArr[i] <= rightArr[j]) {\n            arr[k] = leftArr[i];\n            i++;\n        } else {\n            arr[k] = rightArr[j];\n            j++;\n        }\n        k++;\n    }\n    \n    while (i < n1) {\n        arr[k] = leftArr[i];\n        i++;\n        k++;\n    }\n    \n    while (j < n2) {\n        arr[k] = rightArr[j];\n        j++;\n        k++;\n    }\n}"
    },
    {
      "type": "code",
      "title": "Heap Sort",
      "content": "// Heap Sort - O(n log n) time, O(1) space\npublic void heapSort(int[] arr) {\n    int n = arr.length;\n    \n    // Build max heap\n    for (int i = n / 2 - 1; i >= 0; i--) {\n        heapify(arr, n, i);\n    }\n    \n    // Extract elements from heap one by one\n    for (int i = n - 1; i > 0; i--) {\n        swap(arr, 0, i);\n        heapify(arr, i, 0);\n    }\n}\n\nprivate void heapify(int[] arr, int n, int i) {\n    int largest = i;\n    int left = 2 * i + 1;\n    int right = 2 * i + 2;\n    \n    if (left < n && arr[left] > arr[largest]) {\n        largest = left;\n    }\n    \n    if (right < n && arr[right] > arr[largest]) {\n        largest = right;\n    }\n    \n    if (largest != i) {\n        swap(arr, i, largest);\n        heapify(arr, n, largest);\n    }\n}"
    },
    {
      "type": "text",
      "title": "Sorting Algorithm Comparison",
      "content": "<table><tr><th>Algorithm</th><th>Time Complexity</th><th>Space Complexity</th><th>Stable</th><th>In-Place</th></tr><tr><td>Quick Sort</td><td>O(n log n) avg, O(n²) worst</td><td>O(log n)</td><td>No</td><td>Yes</td></tr><tr><td>Merge Sort</td><td>O(n log n)</td><td>O(n)</td><td>Yes</td><td>No</td></tr><tr><td>Heap Sort</td><td>O(n log n)</td><td>O(1)</td><td>No</td><td>Yes</td></tr><tr><td>Bubble Sort</td><td>O(n²)</td><td>O(1)</td><td>Yes</td><td>Yes</td></tr><tr><td>Insertion Sort</td><td>O(n²)</td><td>O(1)</td><td>Yes</td><td>Yes</td></tr></table>"
    }
  ]
} 