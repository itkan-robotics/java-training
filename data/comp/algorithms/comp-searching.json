{
  "id": "comp-searching",
  "title": "Searching Algorithms",
  "sections": [
    {
      "type": "text",
      "title": "Searching Algorithm Overview",
      "content": "Searching algorithms are used to find specific elements in data structures. The choice of algorithm depends on the data structure and whether it's sorted."
    },
    {
      "type": "code",
      "title": "Linear Search",
      "content": "// Linear Search - O(n) time\npublic int linearSearch(int[] arr, int target) {\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] == target) {\n            return i;\n        }\n    }\n    return -1; // Not found\n}\n\n// Linear Search with enhanced for loop\npublic int linearSearchEnhanced(int[] arr, int target) {\n    for (int num : arr) {\n        if (num == target) {\n            return num; // Return the value if found\n        }\n    }\n    return -1;\n}"
    },
    {
      "type": "code",
      "title": "Binary Search",
      "content": "// Binary Search - O(log n) time (requires sorted array)\npublic int binarySearch(int[] arr, int target) {\n    int left = 0;\n    int right = arr.length - 1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (arr[mid] == target) {\n            return mid;\n        } else if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return -1; // Not found\n}\n\n// Binary Search with recursion\npublic int binarySearchRecursive(int[] arr, int target, int left, int right) {\n    if (left > right) {\n        return -1;\n    }\n    \n    int mid = left + (right - left) / 2;\n    \n    if (arr[mid] == target) {\n        return mid;\n    } else if (arr[mid] < target) {\n        return binarySearchRecursive(arr, target, mid + 1, right);\n    } else {\n        return binarySearchRecursive(arr, target, left, mid - 1);\n    }\n}"
    },
    {
      "type": "code",
      "title": "Binary Search Variations",
      "content": "// Find first occurrence of target\npublic int findFirstOccurrence(int[] arr, int target) {\n    int left = 0;\n    int right = arr.length - 1;\n    int result = -1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (arr[mid] == target) {\n            result = mid;\n            right = mid - 1; // Continue searching left\n        } else if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return result;\n}\n\n// Find last occurrence of target\npublic int findLastOccurrence(int[] arr, int target) {\n    int left = 0;\n    int right = arr.length - 1;\n    int result = -1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (arr[mid] == target) {\n            result = mid;\n            left = mid + 1; // Continue searching right\n        } else if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return result;\n}"
    },
    {
      "type": "text",
      "title": "Searching in Different Data Structures",
      "content": "<ul><li><strong>Arrays:</strong> Linear search (O(n)), Binary search (O(log n)) if sorted</li><li><strong>Linked Lists:</strong> Linear search only (O(n))</li><li><strong>Hash Tables:</strong> Average O(1), worst case O(n)</li><li><strong>Binary Search Trees:</strong> O(log n) average, O(n) worst case</li><li><strong>Heaps:</strong> Linear search (O(n))</li></ul>"
    }
  ]
} 
