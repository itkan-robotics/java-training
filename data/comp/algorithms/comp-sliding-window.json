{
  "id": "comp-sliding-window",
  "title": "Sliding Window",
  "sections": [
    {
      "type": "text",
      "title": "Sliding Window Technique",
      "content": "The sliding window technique is used to solve problems involving arrays/strings where we need to find a subarray/substring that satisfies certain conditions."
    },
    {
      "type": "text",
      "title": "Types of Sliding Windows",
      "content": "<ul><li><strong>Fixed Size Window:</strong> Window size is constant</li><li><strong>Variable Size Window:</strong> Window size changes based on conditions</li><li><strong>Dynamic Window:</strong> Window expands and contracts</li></ul>"
    },
    {
      "type": "code",
      "title": "Fixed Size Window Example",
      "content": "// Find maximum sum of subarray of size k\npublic int maxSumSubarray(int[] nums, int k) {\n    if (nums.length < k) return 0;\n    \n    // Calculate sum of first window\n    int windowSum = 0;\n    for (int i = 0; i < k; i++) {\n        windowSum += nums[i];\n    }\n    \n    int maxSum = windowSum;\n    \n    // Slide the window\n    for (int i = k; i < nums.length; i++) {\n        windowSum = windowSum - nums[i - k] + nums[i];\n        maxSum = Math.max(maxSum, windowSum);\n    }\n    \n    return maxSum;\n}"
    },
    {
      "type": "code",
      "title": "Variable Size Window Example",
      "content": "// Find smallest subarray with sum >= target\npublic int minSubArrayLen(int target, int[] nums) {\n    int left = 0;\n    int sum = 0;\n    int minLength = Integer.MAX_VALUE;\n    \n    for (int right = 0; right < nums.length; right++) {\n        sum += nums[right];\n        \n        while (sum >= target) {\n            minLength = Math.min(minLength, right - left + 1);\n            sum -= nums[left];\n            left++;\n        }\n    }\n    \n    return minLength == Integer.MAX_VALUE ? 0 : minLength;\n}\n\n// Longest substring without repeating characters\npublic int lengthOfLongestSubstring(String s) {\n    int left = 0;\n    int maxLength = 0;\n    Set<Character> charSet = new HashSet<>();\n    \n    for (int right = 0; right < s.length(); right++) {\n        char currentChar = s.charAt(right);\n        \n        while (charSet.contains(currentChar)) {\n            charSet.remove(s.charAt(left));\n            left++;\n        }\n        \n        charSet.add(currentChar);\n        maxLength = Math.max(maxLength, right - left + 1);\n    }\n    \n    return maxLength;\n}"
    },
    {
      "type": "code",
      "title": "Dynamic Window with HashMap",
      "content": "// Longest substring with at most k distinct characters\npublic int lengthOfLongestSubstringKDistinct(String s, int k) {\n    if (k == 0) return 0;\n    \n    int left = 0;\n    int maxLength = 0;\n    Map<Character, Integer> charCount = new HashMap<>();\n    \n    for (int right = 0; right < s.length(); right++) {\n        char currentChar = s.charAt(right);\n        charCount.put(currentChar, charCount.getOrDefault(currentChar, 0) + 1);\n        \n        while (charCount.size() > k) {\n            char leftChar = s.charAt(left);\n            charCount.put(leftChar, charCount.get(leftChar) - 1);\n            if (charCount.get(leftChar) == 0) {\n                charCount.remove(leftChar);\n            }\n            left++;\n        }\n        \n        maxLength = Math.max(maxLength, right - left + 1);\n    }\n    \n    return maxLength;\n}"
    },
    {
      "type": "text",
      "title": "Common Applications",
      "content": "<ul><li><strong>Subarray Problems:</strong> Maximum/minimum sum, average</li><li><strong>Substring Problems:</strong> Longest/shortest substring with conditions</li><li><strong>Frequency Problems:</strong> Substrings with specific character frequencies</li><li><strong>Optimization:</strong> Reduce time complexity from O(nÂ²) to O(n)</li></ul>"
    }
  ]
} 