{
  "id": "comp-heaps",
  "title": "Heaps & Priority Queues",
  "sections": [
    {
      "type": "text",
      "title": "Heap Data Structure",
      "content": "A heap is a specialized tree-based data structure that satisfies the heap property. In a max heap, parent nodes are always greater than or equal to their children."
    },
    {
      "type": "text",
      "title": "Types of Heaps",
      "content": "<ul><li><strong>Max Heap:</strong> Parent is always greater than or equal to children</li><li><strong>Min Heap:</strong> Parent is always less than or equal to children</li><li><strong>Binary Heap:</strong> Most common implementation using arrays</li></ul>"
    },
    {
      "type": "code",
      "title": "Priority Queue in Java",
      "content": "// Min Heap (default)\nPriorityQueue<Integer> minHeap = new PriorityQueue<>();\nminHeap.offer(5);\nminHeap.offer(2);\nminHeap.offer(8);\nSystem.out.println(minHeap.poll()); // 2 (smallest)\n\n// Max Heap\nPriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\nmaxHeap.offer(5);\nmaxHeap.offer(2);\nmaxHeap.offer(8);\nSystem.out.println(maxHeap.poll()); // 8 (largest)\n\n// Custom comparator\nPriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n// For max heap: (a, b) -> b[0] - a[0]"
    },
    {
      "type": "text",
      "title": "Common Applications",
      "content": "<ul><li><strong>Top K Elements:</strong> Find k largest/smallest elements</li><li><strong>Heap Sort:</strong> Sorting using heap data structure</li><li><strong>Dijkstra's Algorithm:</strong> Shortest path in weighted graphs</li><li><strong>Merge K Sorted Lists:</strong> Efficient merging</li><li><strong>Task Scheduling:</strong> Priority-based scheduling</li></ul>"
    },
    {
      "type": "code",
      "title": "Find Top K Elements",
      "content": "// Find k largest elements\npublic int[] findKLargest(int[] nums, int k) {\n    PriorityQueue<Integer> minHeap = new PriorityQueue<>();\n    \n    for (int num : nums) {\n        minHeap.offer(num);\n        if (minHeap.size() > k) {\n            minHeap.poll();\n        }\n    }\n    \n    int[] result = new int[k];\n    for (int i = k - 1; i >= 0; i--) {\n        result[i] = minHeap.poll();\n    }\n    return result;\n}\n\n// Find k smallest elements\npublic int[] findKSmallest(int[] nums, int k) {\n    PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n    \n    for (int num : nums) {\n        maxHeap.offer(num);\n        if (maxHeap.size() > k) {\n            maxHeap.poll();\n        }\n    }\n    \n    int[] result = new int[k];\n    for (int i = 0; i < k; i++) {\n        result[i] = maxHeap.poll();\n    }\n    return result;\n}"
    }
  ]
} 
