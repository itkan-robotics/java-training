{
  "id": "comp-trees",
  "title": "Trees & Binary Trees",
  "sections": [
    {
      "type": "text",
      "title": "Tree Data Structure",
      "content": "A tree is a hierarchical data structure with nodes connected by edges. Each node contains data and references to child nodes."
    },
    {
      "type": "code",
      "title": "Binary Tree Node Definition",
      "content": "class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    \n    TreeNode(int val) {\n        this.val = val;\n        this.left = null;\n        this.right = null;\n    }\n}"
    },
    {
      "type": "text",
      "title": "Tree Traversal Methods",
      "content": "<ul><li><strong>Inorder (Left-Root-Right):</strong> Visits left subtree, then root, then right subtree</li><li><strong>Preorder (Root-Left-Right):</strong> Visits root, then left subtree, then right subtree</li><li><strong>Postorder (Left-Right-Root):</strong> Visits left subtree, then right subtree, then root</li><li><strong>Level Order:</strong> Visits nodes level by level (BFS)</li></ul>"
    },
    {
      "type": "code",
      "title": "Tree Traversal Implementations",
      "content": "// Inorder Traversal (Recursive)\nvoid inorder(TreeNode root) {\n    if (root != null) {\n        inorder(root.left);\n        System.out.print(root.val + \" \");\n        inorder(root.right);\n    }\n}\n\n// Preorder Traversal (Recursive)\nvoid preorder(TreeNode root) {\n    if (root != null) {\n        System.out.print(root.val + \" \");\n        preorder(root.left);\n        preorder(root.right);\n    }\n}\n\n// Postorder Traversal (Recursive)\nvoid postorder(TreeNode root) {\n    if (root != null) {\n        postorder(root.left);\n        postorder(root.right);\n        System.out.print(root.val + \" \");\n    }\n}\n\n// Level Order Traversal (BFS)\nvoid levelOrder(TreeNode root) {\n    if (root == null) return;\n    \n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.offer(root);\n    \n    while (!queue.isEmpty()) {\n        TreeNode current = queue.poll();\n        System.out.print(current.val + \" \");\n        \n        if (current.left != null) queue.offer(current.left);\n        if (current.right != null) queue.offer(current.right);\n    }\n}"
    },
    {
      "type": "text",
      "title": "Common Tree Problems",
      "content": "<ul><li><strong>Height/Depth:</strong> Find the height of a tree</li><li><strong>Balanced Tree:</strong> Check if tree is height-balanced</li><li><strong>Symmetric Tree:</strong> Check if tree is symmetric</li><li><strong>Path Sum:</strong> Find paths with given sum</li><li><strong>Lowest Common Ancestor:</strong> Find LCA of two nodes</li><li><strong>Serialize/Deserialize:</strong> Convert tree to/from string</li></ul>"
    }
  ]
} 