{
  "id": "try-catch",
  "title": "Try-Catch Exception Handling",
  "sections": [
    {
      "type": "text",
      "title": "What are Exceptions?",
      "content": "Exceptions are errors that occur during program execution that can disrupt the normal flow of your program. In robotics, exceptions might happen when sensors fail, motors disconnect, or invalid data is received. Java provides try-catch blocks to handle these errors gracefully instead of crashing your robot program."
    },
    {
      "type": "text",
      "title": "Why Use Try-Catch?",
      "content": "In FTC robotics, your program must be robust and handle unexpected situations. Without proper exception handling, a single sensor failure could crash your entire autonomous routine. Try-catch blocks allow your robot to continue operating even when errors occur, providing fallback behavior and error recovery."
    },
    {
      "type": "code",
      "title": "Basic Try-Catch Structure:",
      "content": "// Basic try-catch syntax\ntry {\n    // Code that might throw an exception\n    // This is the \"risky\" code\n} catch (ExceptionType e) {\n    // Code to handle the exception\n    // This runs if an exception occurs\n}\n\n// Simple example with division\ntry {\n    int result = 10 / 0;  // This will throw ArithmeticException\n    System.out.println(\"Result: \" + result);\n} catch (ArithmeticException e) {\n    System.out.println(\"Error: Cannot divide by zero!\");\n    System.out.println(\"Exception message: \" + e.getMessage());\n}\n\nSystem.out.println(\"Program continues...\");"
    },
    {
      "type": "text",
      "title": "Common Java Exceptions",
      "content": "Understanding common exceptions helps you write better error handling code. Here are the most frequent exceptions you'll encounter in robot programming:"
    },
    {
      "type": "code",
      "title": "Common Exception Examples:",
      "content": "// 1. NumberFormatException - Invalid string to number conversion\ntry {\n    String userInput = \"abc\";  // Invalid number\n    int number = Integer.parseInt(userInput);\n} catch (NumberFormatException e) {\n    System.out.println(\"Invalid number format: \" + userInput);\n}\n\n// 2. ArrayIndexOutOfBoundsException - Invalid array access\ntry {\n    int[] motorPowers = {0, 1, 2, 3};\n    int power = motorPowers[5];  // Index 5 doesn't exist\n} catch (ArrayIndexOutOfBoundsException e) {\n    System.out.println(\"Motor index out of range!\");\n}\n\n// 3. NullPointerException - Accessing null object\ntry {\n    String sensorName = null;\n    int length = sensorName.length();  // Calling method on null\n} catch (NullPointerException e) {\n    System.out.println(\"Sensor object is null!\");\n}"
    },
    {
      "type": "text",
      "title": "Multiple Catch Blocks",
      "content": "You can have multiple catch blocks to handle different types of exceptions differently. This allows for specific error handling based on the type of problem that occurred."
    },
    {
      "type": "code",
      "title": "Multiple Catch Example:",
      "content": "import java.util.Scanner;\n\npublic class RobotSensorReader {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String[] sensorNames = {\"Ultrasonic\", \"Color\", \"Touch\", \"Gyro\"};\n        \n        try {\n            System.out.print(\"Enter sensor index (0-3): \");\n            String input = scanner.nextLine();\n            int index = Integer.parseInt(input);  // Could throw NumberFormatException\n            \n            String selectedSensor = sensorNames[index];  // Could throw ArrayIndexOutOfBoundsException\n            System.out.println(\"Selected sensor: \" + selectedSensor);\n            \n            double reading = readSensor(selectedSensor);\n            System.out.println(\"Sensor reading: \" + reading);\n            \n        } catch (NumberFormatException e) {\n            System.out.println(\"‚ùå Error: Please enter a valid number!\");\n            \n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println(\"‚ùå Error: Sensor index out of range!\");\n            System.out.println(\"   Valid range: 0 to \" + (sensorNames.length - 1));\n            \n        } catch (Exception e) {\n            // Generic catch for any other exceptions\n            System.out.println(\"‚ùå Unexpected error: \" + e.getMessage());\n        }\n    }\n    \n    public static double readSensor(String sensorName) {\n        return Math.random() * 100;\n    }\n}"
    },
    {
      "type": "text",
      "title": "The Finally Block",
      "content": "The <code>finally</code> block contains code that always executes, whether an exception occurs or not. This is perfect for cleanup operations like stopping motors, closing files, or releasing resources."
    },
    {
      "type": "code",
      "title": "Finally Block Example:",
      "content": "public class RobotMotorTest {\n    public static void main(String[] args) {\n        boolean motorStarted = false;\n        \n        try {\n            System.out.println(\"Starting motor test...\");\n            startMotor();\n            motorStarted = true;\n            \n            // Simulate motor test that might fail\n            performMotorTest();\n            \n            System.out.println(\"Motor test completed successfully!\");\n            \n        } catch (Exception e) {\n            System.out.println(\"‚ùå Motor test failed: \" + e.getMessage());\n            \n        } finally {\n            // Always stop the motor, even if test fails\n            if (motorStarted) {\n                System.out.println(\"üõë Stopping motor for safety...\");\n                stopMotor();\n            }\n            System.out.println(\"Motor test cleanup completed.\");\n        }\n    }\n    \n    public static void startMotor() {\n        System.out.println(\"üöÄ Motor started\");\n    }\n    \n    public static void stopMotor() {\n        System.out.println(\"‚èπÔ∏è Motor stopped\");\n    }\n    \n    public static void performMotorTest() {\n        // Simulate a test that might fail randomly\n        if (Math.random() > 0.5) {\n            throw new RuntimeException(\"Motor overheated during test!\");\n        }\n        System.out.println(\"Motor test passed\");\n    }\n}"
    },
    {
      "type": "rules-box",
      "title": "Exception Handling Best Practices:",
      "subtitle": "Guidelines for Robust Robot Code:",
      "items": [
        "<strong>Be Specific:</strong> Catch specific exception types rather than generic Exception",
        "<strong>Log Useful Information:</strong> Include context about what the robot was doing",
        "<strong>Provide Fallbacks:</strong> Have backup plans when primary systems fail",
        "<strong>Don't Ignore Exceptions:</strong> Always handle or log exceptions appropriately",
        "<strong>Use Finally for Cleanup:</strong> Stop motors and release resources in finally blocks",
        "<strong>Fail Gracefully:</strong> Allow robot to continue operating when possible"
      ]
    },
    {
      "type": "exercise-box",
      "title": "Try It Yourself:",
      "subtitle": "Exercise 1: Exception Handling Practice",
      "content": "Practice implementing try-catch blocks for robot programming scenarios:",
      "tasks": [
        "Create a safe sensor reading system with exception handling",
        "Build a motor control system with input validation and error recovery",
        "Implement a robot configuration loader with multiple exception types",
        "Design an autonomous routine with step-by-step error handling"
      ],
      "answers": [
        {
          "task": "Create a safe sensor reading system with exception handling",
          "code": "import java.util.Scanner;\n\npublic class SafeSensorSystem {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String[] sensors = {\"Ultrasonic\", \"Color\", \"Touch\", \"Gyro\"};\n        double[] lastReadings = {0.0, 0.0, 0.0, 0.0};\n        \n        while (true) {\n            try {\n                System.out.println(\"\\nAvailable sensors:\");\n                for (int i = 0; i < sensors.length; i++) {\n                    System.out.printf(\"%d: %s (last: %.1f)\\n\", i, sensors[i], lastReadings[i]);\n                }\n                \n                System.out.print(\"Enter sensor index (-1 to exit): \");\n                String input = scanner.nextLine().trim();\n                int index = Integer.parseInt(input);\n                \n                if (index == -1) {\n                    break;\n                }\n                \n                if (index < 0 || index >= sensors.length) {\n                    throw new ArrayIndexOutOfBoundsException(\"Sensor index out of range\");\n                }\n                \n                String sensor = sensors[index];\n                double reading = readSensorSafely(sensor, lastReadings[index]);\n                lastReadings[index] = reading;\n                \n                System.out.println(\"‚úÖ \" + sensor + \" reading: \" + String.format(\"%.2f\", reading));\n                \n            } catch (NumberFormatException e) {\n                System.out.println(\"‚ùå Please enter a valid number!\");\n            } catch (ArrayIndexOutOfBoundsException e) {\n                System.out.println(\"‚ùå \" + e.getMessage());\n                System.out.println(\"   Valid range: 0 to \" + (sensors.length - 1));\n            } catch (Exception e) {\n                System.out.println(\"‚ùå Sensor system error: \" + e.getMessage());\n                System.out.println(\"   Attempting system recovery...\");\n                // Reset all readings to safe defaults\n                for (int i = 0; i < lastReadings.length; i++) {\n                    lastReadings[i] = 0.0;\n                }\n            }\n        }\n        \n        System.out.println(\"Sensor system shut down safely.\");\n    }\n    \n    public static double readSensorSafely(String sensorName, double lastReading) {\n        try {\n            // Simulate sensor reading with potential failure\n            if (Math.random() > 0.8) {  // 20% chance of sensor failure\n                throw new RuntimeException(\"Sensor communication error\");\n            }\n            \n            // Generate realistic sensor reading\n            return Math.random() * 100;\n            \n        } catch (RuntimeException e) {\n            System.out.println(\"‚ö†Ô∏è Sensor \" + sensorName + \" failed: \" + e.getMessage());\n            System.out.println(\"   Using last known reading: \" + lastReading);\n            return lastReading;  // Fallback to last known value\n        }\n    }\n}"
        },
        {
          "task": "Build a motor control system with input validation and error recovery",
          "code": "import java.util.Scanner;\n\npublic class SafeMotorControl {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String[] motors = {\"Front Left\", \"Front Right\", \"Back Left\", \"Back Right\"};\n        double[] powers = {0.0, 0.0, 0.0, 0.0};\n        boolean emergencyStop = false;\n        \n        System.out.println(\"=== FTC Safe Motor Control System ===\");\n        \n        while (true) {\n            try {\n                System.out.println(\"\\n=== Motor Status ===\" + (emergencyStop ? \" [EMERGENCY STOP]\" : \"\"));\n                displayMotors(motors, powers, emergencyStop);\n                \n                if (emergencyStop) {\n                    System.out.println(\"\\nEmergency stop active. Commands:\");\n                    System.out.println(\"R: Reset emergency stop\");\n                    System.out.println(\"Q: Quit\");\n                } else {\n                    System.out.println(\"\\nCommands:\");\n                    System.out.println(\"0-3: Set motor power\");\n                    System.out.println(\"A: Set all motors\");\n                    System.out.println(\"S: Emergency stop\");\n                    System.out.println(\"Q: Quit\");\n                }\n                \n                System.out.print(\"Enter command: \");\n                String command = scanner.nextLine().trim().toUpperCase();\n                \n                if (command.equals(\"Q\")) {\n                    break;\n                }\n                \n                if (emergencyStop) {\n                    if (command.equals(\"R\")) {\n                        emergencyStop = false;\n                        System.out.println(\"‚úÖ Emergency stop reset. Motors can be controlled.\");\n                    } else {\n                        System.out.println(\"‚ùå Emergency stop is active. Use 'R' to reset.\");\n                    }\n                    continue;\n                }\n                \n                if (command.equals(\"S\")) {\n                    emergencyStop = true;\n                    for (int i = 0; i < powers.length; i++) {\n                        powers[i] = 0.0;\n                    }\n                    System.out.println(\"üö® EMERGENCY STOP ACTIVATED!\");\n                    continue;\n                }\n                \n                if (command.equals(\"A\")) {\n                    setAllMotors(scanner, powers);\n                } else if (command.matches(\"[0-3]\")) {\n                    int motorIndex = Integer.parseInt(command);\n                    setIndividualMotor(scanner, motors, powers, motorIndex);\n                } else {\n                    System.out.println(\"‚ùå Invalid command: \" + command);\n                }\n                \n            } catch (Exception e) {\n                System.out.println(\"‚ùå Critical error: \" + e.getMessage());\n                System.out.println(\"üö® Activating emergency stop for safety!\");\n                emergencyStop = true;\n                for (int i = 0; i < powers.length; i++) {\n                    powers[i] = 0.0;\n                }\n            }\n        }\n        \n        // Shutdown sequence\n        System.out.println(\"\\nüõë Shutting down motor control system...\");\n        for (int i = 0; i < powers.length; i++) {\n            powers[i] = 0.0;\n        }\n        System.out.println(\"All motors stopped. System shut down safely.\");\n    }\n    \n    public static void displayMotors(String[] motors, double[] powers, boolean emergencyStop) {\n        for (int i = 0; i < motors.length; i++) {\n            String status = emergencyStop ? \"üî¥ STOPPED\" : (powers[i] == 0 ? \"‚è∏Ô∏è IDLE\" : \"üü¢ RUNNING\");\n            System.out.printf(\"%d: %-12s %6.2f %s\\n\", i, motors[i], powers[i], status);\n        }\n    }\n    \n    public static void setIndividualMotor(Scanner scanner, String[] motors, double[] powers, int index) {\n        try {\n            System.out.print(\"Enter power for \" + motors[index] + \" (-1.0 to 1.0): \");\n            String powerInput = scanner.nextLine().trim();\n            double power = Double.parseDouble(powerInput);\n            \n            if (power < -1.0 || power > 1.0) {\n                throw new IllegalArgumentException(\"Power must be between -1.0 and 1.0\");\n            }\n            \n            powers[index] = power;\n            System.out.println(\"‚úÖ \" + motors[index] + \" set to \" + power);\n            \n        } catch (NumberFormatException e) {\n            System.out.println(\"‚ùå Invalid power value. Please enter a decimal number.\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"‚ùå \" + e.getMessage());\n        }\n    }\n    \n    public static void setAllMotors(Scanner scanner, double[] powers) {\n        try {\n            System.out.print(\"Enter power for all motors (-1.0 to 1.0): \");\n            String powerInput = scanner.nextLine().trim();\n            double power = Double.parseDouble(powerInput);\n            \n            if (power < -1.0 || power > 1.0) {\n                throw new IllegalArgumentException(\"Power must be between -1.0 and 1.0\");\n            }\n            \n            for (int i = 0; i < powers.length; i++) {\n                powers[i] = power;\n            }\n            \n            System.out.println(\"‚úÖ All motors set to \" + power);\n            \n        } catch (NumberFormatException e) {\n            System.out.println(\"‚ùå Invalid power value. Please enter a decimal number.\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"‚ùå \" + e.getMessage());\n        }\n    }\n}"
        },
        {
          "task": "Implement a robot configuration loader with multiple exception types",
          "code": "import java.util.Scanner;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class RobotConfigLoader {\n    private static Map<String, String> config = new HashMap<>();\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        System.out.println(\"=== FTC Robot Configuration Loader ===\");\n        \n        // Load default configuration\n        loadDefaultConfig();\n        \n        while (true) {\n            try {\n                System.out.println(\"\\nConfiguration Commands:\");\n                System.out.println(\"1. Load config from input\");\n                System.out.println(\"2. Display current config\");\n                System.out.println(\"3. Validate configuration\");\n                System.out.println(\"4. Save configuration\");\n                System.out.println(\"0. Exit\");\n                \n                System.out.print(\"Enter command: \");\n                String input = scanner.nextLine().trim();\n                int command = Integer.parseInt(input);\n                \n                switch (command) {\n                    case 0:\n                        System.out.println(\"Configuration system shut down.\");\n                        return;\n                    case 1:\n                        loadConfigFromInput(scanner);\n                        break;\n                    case 2:\n                        displayConfig();\n                        break;\n                    case 3:\n                        validateConfiguration();\n                        break;\n                    case 4:\n                        saveConfiguration();\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Invalid command: \" + command);\n                }\n                \n            } catch (NumberFormatException e) {\n                System.out.println(\"‚ùå Please enter a valid command number.\");\n            } catch (IllegalArgumentException e) {\n                System.out.println(\"‚ùå \" + e.getMessage());\n            } catch (Exception e) {\n                System.out.println(\"‚ùå Configuration error: \" + e.getMessage());\n                System.out.println(\"   Restoring default configuration...\");\n                loadDefaultConfig();\n            }\n        }\n    }\n    \n    public static void loadDefaultConfig() {\n        config.clear();\n        config.put(\"robot_name\", \"FTC_Robot\");\n        config.put(\"team_number\", \"12345\");\n        config.put(\"motor_count\", \"4\");\n        config.put(\"sensor_count\", \"5\");\n        config.put(\"max_speed\", \"1.0\");\n        System.out.println(\"‚úÖ Default configuration loaded.\");\n    }\n    \n    public static void loadConfigFromInput(Scanner scanner) {\n        System.out.println(\"\\nEnter configuration values (empty line to finish):\");\n        \n        while (true) {\n            try {\n                System.out.print(\"Key=Value (or press Enter to finish): \");\n                String line = scanner.nextLine().trim();\n                \n                if (line.isEmpty()) {\n                    break;\n                }\n                \n                if (!line.contains(\"=\")) {\n                    throw new IllegalArgumentException(\"Invalid format. Use: key=value\");\n                }\n                \n                String[] parts = line.split(\"=\", 2);\n                if (parts.length != 2) {\n                    throw new IllegalArgumentException(\"Invalid format. Use: key=value\");\n                }\n                \n                String key = parts[0].trim();\n                String value = parts[1].trim();\n                \n                if (key.isEmpty() || value.isEmpty()) {\n                    throw new IllegalArgumentException(\"Key and value cannot be empty\");\n                }\n                \n                // Validate specific configuration values\n                validateConfigValue(key, value);\n                \n                config.put(key, value);\n                System.out.println(\"‚úÖ Set \" + key + \" = \" + value);\n                \n            } catch (IllegalArgumentException e) {\n                System.out.println(\"‚ùå \" + e.getMessage());\n            } catch (Exception e) {\n                System.out.println(\"‚ùå Error processing input: \" + e.getMessage());\n            }\n        }\n    }\n    \n    public static void validateConfigValue(String key, String value) {\n        try {\n            switch (key) {\n                case \"team_number\":\n                    int teamNum = Integer.parseInt(value);\n                    if (teamNum < 1 || teamNum > 99999) {\n                        throw new IllegalArgumentException(\"Team number must be 1-99999\");\n                    }\n                    break;\n                    \n                case \"motor_count\":\n                    int motorCount = Integer.parseInt(value);\n                    if (motorCount < 1 || motorCount > 12) {\n                        throw new IllegalArgumentException(\"Motor count must be 1-12\");\n                    }\n                    break;\n                    \n                case \"sensor_count\":\n                    int sensorCount = Integer.parseInt(value);\n                    if (sensorCount < 0 || sensorCount > 20) {\n                        throw new IllegalArgumentException(\"Sensor count must be 0-20\");\n                    }\n                    break;\n                    \n                case \"max_speed\":\n                    double maxSpeed = Double.parseDouble(value);\n                    if (maxSpeed <= 0 || maxSpeed > 1.0) {\n                        throw new IllegalArgumentException(\"Max speed must be 0.0-1.0\");\n                    }\n                    break;\n                    \n                case \"robot_name\":\n                    if (value.length() > 50) {\n                        throw new IllegalArgumentException(\"Robot name too long (max 50 chars)\");\n                    }\n                    break;\n            }\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Invalid numeric value for \" + key + \": \" + value);\n        }\n    }\n    \n    public static void displayConfig() {\n        System.out.println(\"\\nüìã Current Configuration:\");\n        if (config.isEmpty()) {\n            System.out.println(\"   No configuration loaded.\");\n        } else {\n            for (Map.Entry<String, String> entry : config.entrySet()) {\n                System.out.printf(\"   %-15s: %s\\n\", entry.getKey(), entry.getValue());\n            }\n        }\n    }\n    \n    public static void validateConfiguration() {\n        System.out.println(\"\\nüîç Validating configuration...\");\n        \n        try {\n            // Check required fields\n            String[] required = {\"robot_name\", \"team_number\", \"motor_count\"};\n            for (String field : required) {\n                if (!config.containsKey(field)) {\n                    throw new IllegalStateException(\"Missing required field: \" + field);\n                }\n            }\n            \n            // Validate all current values\n            for (Map.Entry<String, String> entry : config.entrySet()) {\n                validateConfigValue(entry.getKey(), entry.getValue());\n            }\n            \n            System.out.println(\"‚úÖ Configuration is valid!\");\n            \n        } catch (IllegalStateException | IllegalArgumentException e) {\n            System.out.println(\"‚ùå Configuration validation failed: \" + e.getMessage());\n        } catch (Exception e) {\n            System.out.println(\"‚ùå Validation error: \" + e.getMessage());\n        }\n    }\n    \n    public static void saveConfiguration() {\n        try {\n            // Validate before saving\n            validateConfiguration();\n            \n            // Simulate saving to file\n            System.out.println(\"üíæ Saving configuration...\");\n            Thread.sleep(1000);  // Simulate file write delay\n            \n            System.out.println(\"‚úÖ Configuration saved successfully!\");\n            \n        } catch (IllegalStateException | IllegalArgumentException e) {\n            System.out.println(\"‚ùå Cannot save invalid configuration: \" + e.getMessage());\n        } catch (InterruptedException e) {\n            System.out.println(\"‚ùå Save operation interrupted.\");\n        } catch (Exception e) {\n            System.out.println(\"‚ùå Save failed: \" + e.getMessage());\n        }\n    }\n}"
        },
        {
          "task": "Design an autonomous routine with step-by-step error handling",
          "code": "public class AutonomousRoutine {\n    private static boolean robotInitialized = false;\n    private static String currentStep = \"None\";\n    \n    public static void main(String[] args) {\n        System.out.println(\"=== FTC Autonomous Routine with Error Handling ===\");\n        \n        try {\n            executeAutonomousSequence();\n            System.out.println(\"\\nüéâ Autonomous routine completed successfully!\");\n            \n        } catch (Exception e) {\n            System.out.println(\"\\nüí• Autonomous routine failed: \" + e.getMessage());\n            System.out.println(\"Last completed step: \" + currentStep);\n            emergencyStop();\n        } finally {\n            System.out.println(\"\\nüèÅ Autonomous routine finished.\");\n            shutdownSafely();\n        }\n    }\n    \n    public static void executeAutonomousSequence() {\n        // Step 1: Initialize Robot\n        executeStep(\"Robot Initialization\", () -> {\n            System.out.println(\"Initializing robot systems...\");\n            if (Math.random() > 0.9) {  // 10% chance of init failure\n                throw new RuntimeException(\"Hardware initialization failed\");\n            }\n            robotInitialized = true;\n            Thread.sleep(500);\n        });\n        \n        // Step 2: Move to Scoring Position\n        executeStep(\"Move to Scoring Position\", () -> {\n            System.out.println(\"Moving to scoring position...\");\n            if (!robotInitialized) {\n                throw new IllegalStateException(\"Robot not initialized\");\n            }\n            if (Math.random() > 0.8) {  // 20% chance of movement failure\n                throw new RuntimeException(\"Obstacle detected - path blocked\");\n            }\n            Thread.sleep(1000);\n        });\n        \n        // Step 3: Deploy Arm\n        executeStep(\"Deploy Arm\", () -> {\n            System.out.println(\"Deploying arm mechanism...\");\n            if (Math.random() > 0.85) {  // 15% chance of arm failure\n                throw new RuntimeException(\"Arm motor stalled\");\n            }\n            Thread.sleep(800);\n        });\n        \n        // Step 4: Score Element\n        executeStep(\"Score Element\", () -> {\n            System.out.println(\"Scoring game element...\");\n            if (Math.random() > 0.9) {  // 10% chance of scoring failure\n                throw new RuntimeException(\"Element not detected in gripper\");\n            }\n            Thread.sleep(600);\n        });\n        \n        // Step 5: Return to Start\n        executeStep(\"Return to Start\", () -> {\n            System.out.println(\"Returning to starting position...\");\n            if (Math.random() > 0.95) {  // 5% chance of return failure\n                throw new RuntimeException(\"Navigation sensor error\");\n            }\n            Thread.sleep(1200);\n        });\n    }\n    \n    public static void executeStep(String stepName, Runnable stepCode) {\n        int maxRetries = 2;\n        int retryCount = 0;\n        \n        while (retryCount <= maxRetries) {\n            try {\n                System.out.println(\"\\nüìç Executing: \" + stepName + \n                                 (retryCount > 0 ? \" (Retry \" + retryCount + \")\" : \"\"));\n                \n                stepCode.run();\n                \n                currentStep = stepName;\n                System.out.println(\"‚úÖ Completed: \" + stepName);\n                return;  // Success - exit retry loop\n                \n            } catch (RuntimeException e) {\n                retryCount++;\n                System.out.println(\"‚ùå Step failed: \" + stepName + \" - \" + e.getMessage());\n                \n                if (retryCount <= maxRetries) {\n                    System.out.println(\"üîÑ Attempting recovery and retry...\");\n                    \n                    try {\n                        performStepRecovery(stepName);\n                        Thread.sleep(500);  // Recovery delay\n                    } catch (Exception recoveryError) {\n                        System.out.println(\"‚ö†Ô∏è Recovery failed: \" + recoveryError.getMessage());\n                    }\n                } else {\n                    System.out.println(\"üí• Max retries exceeded for step: \" + stepName);\n                    throw new RuntimeException(\"Step \" + stepName + \" failed after \" + maxRetries + \" retries: \" + e.getMessage());\n                }\n                \n            } catch (InterruptedException e) {\n                System.out.println(\"‚è∏Ô∏è Step interrupted: \" + stepName);\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(\"Step interrupted: \" + stepName);\n                \n            } catch (Exception e) {\n                System.out.println(\"üí• Unexpected error in step: \" + stepName + \" - \" + e.getMessage());\n                throw new RuntimeException(\"Unexpected error in \" + stepName + \": \" + e.getMessage());\n            }\n        }\n    }\n    \n    public static void performStepRecovery(String stepName) {\n        System.out.println(\"   üîß Performing recovery for: \" + stepName);\n        \n        switch (stepName) {\n            case \"Robot Initialization\":\n                System.out.println(\"   ‚Üí Resetting hardware connections\");\n                System.out.println(\"   ‚Üí Clearing error flags\");\n                robotInitialized = false;  // Force re-initialization\n                break;\n                \n            case \"Move to Scoring Position\":\n                System.out.println(\"   ‚Üí Checking for obstacles\");\n                System.out.println(\"   ‚Üí Recalculating path\");\n                break;\n                \n            case \"Deploy Arm\":\n                System.out.println(\"   ‚Üí Checking arm motor connections\");\n                System.out.println(\"   ‚Üí Resetting arm position\");\n                break;\n                \n            case \"Score Element\":\n                System.out.println(\"   ‚Üí Checking gripper sensors\");\n                System.out.println(\"   ‚Üí Adjusting element position\");\n                break;\n                \n            case \"Return to Start\":\n                System.out.println(\"   ‚Üí Recalibrating navigation sensors\");\n                System.out.println(\"   ‚Üí Using backup navigation method\");\n                break;\n                \n            default:\n                System.out.println(\"   ‚Üí Generic recovery procedure\");\n        }\n    }\n    \n    public static void emergencyStop() {\n        try {\n            System.out.println(\"\\nüö® EMERGENCY STOP ACTIVATED\");\n            System.out.println(\"   ‚Üí Stopping all motors\");\n            System.out.println(\"   ‚Üí Retracting arm\");\n            System.out.println(\"   ‚Üí Disabling autonomous mode\");\n            \n            // Simulate emergency stop procedures\n            Thread.sleep(200);\n            \n            System.out.println(\"‚úÖ Emergency stop completed\");\n            \n        } catch (InterruptedException e) {\n            System.out.println(\"‚ùå Emergency stop interrupted - CRITICAL!\");\n            Thread.currentThread().interrupt();\n        } catch (Exception e) {\n            System.out.println(\"üí• Error during emergency stop: \" + e.getMessage());\n        }\n    }\n    \n    public static void shutdownSafely() {\n        try {\n            System.out.println(\"\\nüîÑ Performing safe shutdown...\");\n            System.out.println(\"   ‚Üí Stopping all motors\");\n            System.out.println(\"   ‚Üí Saving telemetry data\");\n            System.out.println(\"   ‚Üí Closing sensor connections\");\n            \n            Thread.sleep(300);\n            \n            System.out.println(\"‚úÖ Safe shutdown completed\");\n            \n        } catch (InterruptedException e) {\n            System.out.println(\"‚ö†Ô∏è Shutdown interrupted\");\n            Thread.currentThread().interrupt();\n        } catch (Exception e) {\n            System.out.println(\"‚ùå Error during shutdown: \" + e.getMessage());\n        }\n    }\n}"
        }
      ]
    }
  ]
}
