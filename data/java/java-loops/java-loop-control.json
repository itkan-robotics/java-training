{
  "id": "loop-control",
  "title": "Loop Control",
  "sections": [
    {
      "type": "text",
      "title": "Breaking Out of Loops",
      "content": "The <code>break</code> statement immediately exits the loop, moving execution to the first line after the loop block."
    },
    {
      "type": "code",
      "title": "Using Break Statement:",
      "content": "// Counting from 1 to 5 with break\nint number = 1;\n\nwhile (true) {\n    System.out.println(number);\n    \n    if (number >= 5) {\n        break;  // Exit when we reach 5\n    }\n    \n    number = number + 1;\n}\n\nSystem.out.println(\"Ready!\");\n// Output: 1, 2, 3, 4, 5, Ready!"
    },
    {
      "type": "text",
      "title": "Continue Statement",
      "content": "The <code>continue</code> statement skips the rest of the current loop iteration and jumps back to the beginning of the loop to check the condition again."
    },
    {
      "type": "code",
      "title": "Using Continue Statement:",
      "content": "Scanner scanner = new Scanner(System.in);\n\nwhile (true) {\n    System.out.println(\"Insert positive integers\");\n    int number = Integer.valueOf(scanner.nextLine());\n    \n    if (number <= 0) {\n        System.out.println(\"Unfit number! Try again.\");\n        continue;  // Skip to beginning of loop\n    }\n    \n    if (number == 999) {\n        break;  // Exit condition\n    }\n    \n    System.out.println(\"Your input was \" + number);\n}\n\n// Robot example: Process valid sensor readings only\nwhile (true) {\n    System.out.println(\"Enter sensor reading (0-100, -1 to exit)\");\n    int reading = Integer.valueOf(scanner.nextLine());\n    \n    if (reading == -1) {\n        break;\n    }\n    \n    if (reading < 0 || reading > 100) {\n        System.out.println(\"Invalid reading! Must be 0-100\");\n        continue;  // Skip invalid readings\n    }\n    \n    System.out.println(\"Processing sensor reading: \" + reading);\n}"
    },
    {
      "type": "text",
      "title": "Loop Execution Timing",
      "content": "Important: Loop conditions are only checked at the <strong>beginning</strong> of each iteration and when the loop <strong>first starts</strong>. Changes to variables inside the loop don't immediately stop the loop."
    },
    {
      "type": "code",
      "title": "Loop Timing Example:",
      "content": "int number = 1;\n\nwhile (number != 2) {\n    System.out.println(number);  // prints 1\n    number = 2;                  // Now number equals 2\n    System.out.println(number);  // prints 2\n    number = 1;                  // Back to 1 - loop continues!\n}\n// This loop runs forever!\n\n// The condition (number != 2) is only checked:\n// 1. When loop starts\n// 2. After reaching the closing }\n\n// For loop example:\nfor (int i = 0; i != 100; i++) {\n    System.out.println(i);       // prints current i\n    i = 100;                     // Set i to 100\n    System.out.println(i);       // prints 100\n    i = 0;                       // Reset i to 0\n}  // At this point, i++ makes i = 1, loop continues\n// This loop also runs forever!"
    },
    {
      "type": "rules-box",
      "title": "Loop Control Best Practices:",
      "subtitle": "Important Guidelines:",
      "items": [
        "<strong>Always update loop variables:</strong> Ensure conditions can eventually become false",
        "<strong>Use break wisely:</strong> Provide clear exit conditions for infinite loops",
        "<strong>Continue for validation:</strong> Skip invalid input without exiting the loop",
        "<strong>Single clear task:</strong> Each if-statement should have one specific purpose"
      ]
    },
    {
      "type": "exercise-box",
      "title": "Try It Yourself:",
      "subtitle": "Exercise 1: Loop Control Practice",
      "content": "Practice using break and continue statements:",
      "tasks": [
        "Create a number validator that uses continue for invalid input",
        "Build a menu system that uses break to exit",
        "Make a sensor monitoring system with both break and continue",
        "Create a robot safety system with emergency break conditions"
      ],
      "answers": [
        {
          "task": "Create a number validator that uses continue for invalid input",
          "content": "import java.util.Scanner;\n\npublic class NumberValidator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        int validNumbers = 0;\n        int invalidAttempts = 0;\n        double sum = 0.0;\n        final int TARGET_NUMBERS = 5;\n        \n        System.out.println(\"=== Robot Sensor Value Validator ===\");\n        System.out.println(\"Enter \" + TARGET_NUMBERS + \" valid sensor readings (0.0 - 100.0)\");\n        System.out.println(\"Type 'quit' to exit early\\n\");\n        \n        while (validNumbers < TARGET_NUMBERS) {\n            System.out.print(\"Sensor reading \" + (validNumbers + 1) + \"/\" + TARGET_NUMBERS + \": \");\n            String input = scanner.nextLine().trim();\n            \n            // Check for quit command\n            if (input.equalsIgnoreCase(\"quit\")) {\n                System.out.println(\"Validation stopped by user.\");\n                break;\n            }\n            \n            // Try to parse the number\n            double reading;\n            try {\n                reading = Double.parseDouble(input);\n            } catch (NumberFormatException e) {\n                System.out.println(\"❌ Invalid format! Please enter a decimal number.\");\n                invalidAttempts++;\n                continue;  // Skip this iteration, try again\n            }\n            \n            // Validate range\n            if (reading < 0.0 || reading > 100.0) {\n                System.out.println(\"❌ Out of range! Value must be between 0.0 and 100.0\");\n                System.out.println(\"   Your input: \" + reading);\n                invalidAttempts++;\n                continue;  // Skip this iteration, try again\n            }\n            \n            // Check for suspicious values\n            if (reading == 0.0 || reading == 100.0) {\n                System.out.print(\"⚠️ Extreme value detected (\" + reading + \"). Are you sure? (y/n): \");\n                String confirm = scanner.nextLine().trim().toLowerCase();\n                \n                if (!confirm.equals(\"y\") && !confirm.equals(\"yes\")) {\n                    System.out.println(\"Value rejected by user.\");\n                    invalidAttempts++;\n                    continue;  // Skip this iteration\n                }\n            }\n            \n            // Value is valid!\n            validNumbers++;\n            sum += reading;\n            System.out.println(\"✅ Valid reading accepted: \" + reading);\n            \n            // Show progress\n            if (validNumbers < TARGET_NUMBERS) {\n                double currentAverage = sum / validNumbers;\n                System.out.println(\"   Current average: \" + String.format(\"%.2f\", currentAverage));\n                System.out.println(\"   Progress: \" + validNumbers + \"/\" + TARGET_NUMBERS + \" readings\");\n            }\n        }\n        \n        // Final results\n        System.out.println(\"\\n=== Validation Complete ===\");\n        System.out.println(\"Valid readings collected: \" + validNumbers);\n        System.out.println(\"Invalid attempts: \" + invalidAttempts);\n        \n        if (validNumbers > 0) {\n            double average = sum / validNumbers;\n            System.out.println(\"Average sensor value: \" + String.format(\"%.2f\", average));\n            \n            // Assess data quality\n            double errorRate = (double) invalidAttempts / (validNumbers + invalidAttempts) * 100;\n            System.out.println(\"Error rate: \" + String.format(\"%.1f\", errorRate) + \"%\");\n            \n            if (errorRate < 10) {\n                System.out.println(\"✅ Excellent data quality\");\n            } else if (errorRate < 25) {\n                System.out.println(\"⚠️ Acceptable data quality\");\n            } else {\n                System.out.println(\"❌ Poor data quality - check input process\");\n            }\n        }\n        \n        System.out.println(\"Number validation complete.\");\n    }\n}"
        },
        {
          "task": "Build a menu system that uses break to exit",
          "content": "import java.util.Scanner;\n\npublic class RobotControlMenu {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        boolean robotArmed = false;\n        int batteryLevel = 85;\n        String currentMode = \"STOPPED\";\n        int commandCount = 0;\n        \n        System.out.println(\"=== FRC Robot Control System ===\");\n        System.out.println(\"Robot initialized and ready for commands\\n\");\n        \n        while (true) {\n            // Display current status\n            System.out.println(\"\\n=== Robot Status ===\");\n            System.out.println(\"Mode: \" + currentMode);\n            System.out.println(\"Armed: \" + (robotArmed ? \"YES\" : \"NO\"));\n            System.out.println(\"Battery: \" + batteryLevel + \"%\");\n            System.out.println(\"Commands executed: \" + commandCount);\n            \n            // Display menu\n            System.out.println(\"\\n=== Control Menu ===\");\n            System.out.println(\"1. Arm/Disarm robot\");\n            System.out.println(\"2. Start autonomous mode\");\n            System.out.println(\"3. Start teleop mode\");\n            System.out.println(\"4. Emergency stop\");\n            System.out.println(\"5. Battery status\");\n            System.out.println(\"6. System diagnostics\");\n            System.out.println(\"0. Shutdown robot\");\n            System.out.print(\"\\nEnter command: \");\n            \n            String input = scanner.nextLine().trim();\n            commandCount++;\n            \n            // Process menu choice\n            if (input.equals(\"0\")) {\n                System.out.println(\"\\n🔴 SHUTDOWN SEQUENCE INITIATED\");\n                System.out.print(\"Are you sure you want to shutdown? (y/n): \");\n                String confirm = scanner.nextLine().trim().toLowerCase();\n                \n                if (confirm.equals(\"y\") || confirm.equals(\"yes\")) {\n                    System.out.println(\"\\n🤖 Shutting down robot systems...\");\n                    System.out.println(\"   → Stopping all motors\");\n                    System.out.println(\"   → Disabling sensors\");\n                    System.out.println(\"   → Saving configuration\");\n                    System.out.println(\"   → Robot shutdown complete\");\n                    break;  // Exit the main loop\n                } else {\n                    System.out.println(\"Shutdown cancelled.\");\n                }\n                \n            } else if (input.equals(\"1\")) {\n                robotArmed = !robotArmed;\n                System.out.println(\"🔧 Robot \" + (robotArmed ? \"ARMED\" : \"DISARMED\"));\n                \n                if (robotArmed) {\n                    System.out.println(\"   ⚠️ Robot is now ready for operation\");\n                    System.out.println(\"   ⚠️ Use caution when executing commands\");\n                } else {\n                    currentMode = \"STOPPED\";\n                    System.out.println(\"   ✅ Robot is now safe\");\n                }\n                \n            } else if (input.equals(\"2\")) {\n                if (!robotArmed) {\n                    System.out.println(\"❌ Cannot start autonomous - robot not armed\");\n                } else if (batteryLevel < 20) {\n                    System.out.println(\"❌ Cannot start autonomous - low battery\");\n                } else {\n                    currentMode = \"AUTONOMOUS\";\n                    System.out.println(\"🤖 Autonomous mode started\");\n                    System.out.println(\"   → Robot executing pre-programmed sequence\");\n                    batteryLevel -= 5;  // Simulate battery usage\n                }\n                \n            } else if (input.equals(\"3\")) {\n                if (!robotArmed) {\n                    System.out.println(\"❌ Cannot start teleop - robot not armed\");\n                } else {\n                    currentMode = \"TELEOP\";\n                    System.out.println(\"🎮 Teleop mode started\");\n                    System.out.println(\"   → Robot ready for manual control\");\n                    batteryLevel -= 2;  // Simulate battery usage\n                }\n                \n            } else if (input.equals(\"4\")) {\n                currentMode = \"EMERGENCY_STOP\";\n                robotArmed = false;\n                System.out.println(\"🚨 EMERGENCY STOP ACTIVATED\");\n                System.out.println(\"   → All motors stopped immediately\");\n                System.out.println(\"   → Robot automatically disarmed\");\n                System.out.println(\"   → Check robot before re-arming\");\n                \n            } else if (input.equals(\"5\")) {\n                System.out.println(\"🔋 Battery Status Report:\");\n                System.out.println(\"   Current level: \" + batteryLevel + \"%\");\n                \n                if (batteryLevel > 80) {\n                    System.out.println(\"   Status: ✅ Excellent\");\n                } else if (batteryLevel > 50) {\n                    System.out.println(\"   Status: ⚠️ Good\");\n                } else if (batteryLevel > 20) {\n                    System.out.println(\"   Status: ⚠️ Low - consider charging\");\n                } else {\n                    System.out.println(\"   Status: 🔴 Critical - charge immediately\");\n                }\n                \n                int estimatedRuntime = batteryLevel / 5;  // Rough estimate\n                System.out.println(\"   Estimated runtime: \" + estimatedRuntime + \" minutes\");\n                \n            } else if (input.equals(\"6\")) {\n                System.out.println(\"🔍 System Diagnostics:\");\n                System.out.println(\"   Motors: ✅ All operational\");\n                System.out.println(\"   Sensors: ✅ All responding\");\n                System.out.println(\"   Communication: ✅ Strong signal\");\n                System.out.println(\"   Temperature: ✅ Normal (\" + (int)(Math.random() * 10 + 65) + \"°F)\");\n                System.out.println(\"   Voltage: ✅ Stable (\" + String.format(\"%.1f\", 11.5 + Math.random()) + \"V)\");\n                \n            } else {\n                System.out.println(\"❌ Invalid command: \" + input);\n                System.out.println(\"   Please enter a number 0-6\");\n                commandCount--;  // Don't count invalid commands\n            }\n            \n            // Simulate battery drain over time\n            if (commandCount % 3 == 0 && batteryLevel > 0) {\n                batteryLevel = Math.max(0, batteryLevel - 1);\n            }\n            \n            // Critical battery warning\n            if (batteryLevel <= 15 && robotArmed) {\n                System.out.println(\"\\n⚠️ WARNING: Critical battery level!\");\n                System.out.println(\"   Consider shutdown to prevent damage\");\n            }\n            \n            // Auto-shutdown on dead battery\n            if (batteryLevel <= 0) {\n                System.out.println(\"\\n🔴 CRITICAL: Battery depleted!\");\n                System.out.println(\"🤖 Initiating emergency shutdown...\");\n                break;  // Emergency exit\n            }\n        }\n        \n        // Cleanup and final status\n        System.out.println(\"\\n=== Final Status Report ===\");\n        System.out.println(\"Final mode: \" + currentMode);\n        System.out.println(\"Final battery: \" + batteryLevel + \"%\");\n        System.out.println(\"Commands processed: \" + commandCount);\n        System.out.println(\"\\nRobot control system terminated.\");\n        System.out.println(\"Thank you for using FRC Robot Control!\");\n    }\n}"
        }
      ]
    }
  ]
}
