{
  "id": "loop-best-practices",
  "title": "Loop Best Practices",
  "sections": [
    {
      "type": "text",
      "title": "Variable Scope in Loops",
      "content": "Variables declared inside a loop only exist within that loop. To use values after the loop ends, declare variables before the loop starts."
    },
    {
      "type": "code",
      "title": "Variable Scope - Wrong Way:",
      "content": "Scanner scanner = new Scanner(System.in);\n\nwhile (true) {\n    int ones = 0;  // ❌ Variable declared inside loop\n    \n    System.out.println(\"Input a number (0 exits): \");\n    int number = Integer.valueOf(scanner.nextLine());\n    \n    if (number == 0) {\n        break;\n    }\n    \n    if (number == 1) {\n        ones = ones + 1;\n    }\n}\n\n// ❌ This won't work - 'ones' doesn't exist here!\n// System.out.println(\"Total ones: \" + ones);"
    },
    {
      "type": "code",
      "title": "Variable Scope - Correct Way:",
      "content": "Scanner scanner = new Scanner(System.in);\nint ones = 0;  // ✅ Variable declared before loop\n\nwhile (true) {\n    System.out.println(\"Give a number (end with 0): \");\n    int number = Integer.valueOf(scanner.nextLine());\n    \n    if (number == 0) {\n        break;\n    }\n    \n    if (number == 1) {\n        ones = ones + 1;\n    }\n}\n\n// ✅ Now we can access 'ones' after the loop\nSystem.out.println(\"The total of ones: \" + ones);"
    },
    {
      "type": "text",
      "title": "Program Structure Best Practices",
      "content": "Keep loops clean by separating the loop logic from the post-loop processing. Place calculations and output <strong>after</strong> the loop ends, not inside it."
    },
    {
      "type": "code",
      "title": "Poor Structure (Avoid):",
      "content": "// ❌ Poor structure - processing inside loop\nScanner scanner = new Scanner(System.in);\nint sum = 0;\nint validNumbers = 0;\nint invalidNumbers = 0;\n\nwhile (true) {\n    int input = Integer.valueOf(scanner.nextLine());\n    \n    if (input == 0) {\n        // ❌ Final processing inside the loop - hard to maintain\n        System.out.println(\"Sum: \" + sum);\n        System.out.println(\"Valid: \" + validNumbers);\n        System.out.println(\"Invalid: \" + invalidNumbers);\n        break;\n    }\n    \n    if (input < 0) {\n        invalidNumbers++;\n        continue;\n    }\n    \n    sum += input;\n    validNumbers++;\n}"
    },
    {
      "type": "code",
      "title": "Good Structure (Recommended):",
      "content": "// ✅ Good structure - clean separation\nScanner scanner = new Scanner(System.in);\n\n// Variables for loop processing\nint sum = 0;\nint validNumbers = 0;\nint invalidNumbers = 0;\n\nSystem.out.println(\"Enter numbers (negative invalid, 0 to stop):\");\n\nwhile (true) {\n    int input = Integer.valueOf(scanner.nextLine());\n    \n    // Exit condition - clean break\n    if (input == 0) {\n        break;\n    }\n    \n    // Handle invalid input\n    if (input < 0) {\n        invalidNumbers++;\n        System.out.println(\"Invalid number: \" + input);\n        continue;\n    }\n    \n    // Process valid input\n    sum += input;\n    validNumbers++;\n    System.out.println(\"Added: \" + input);\n}\n\n// ✅ All final processing after loop\nSystem.out.println(\"\\n=== Final Results ===\");\nSystem.out.println(\"Sum of valid numbers: \" + sum);\nSystem.out.println(\"Valid numbers entered: \" + validNumbers);\nSystem.out.println(\"Invalid numbers entered: \" + invalidNumbers);\n\nif (validNumbers > 0) {\n    double average = (double) sum / validNumbers;\n    System.out.println(\"Average: \" + average);\n}"
    },
    {
      "type": "rules-box",
      "title": "Recommended Loop Structure:",
      "subtitle": "Clean Code Pattern:",
      "items": [
        "<strong>Before loop:</strong> Initialize variables and give instructions",
        "<strong>Start of loop:</strong> Read input or get next data",
        "<strong>Early exit:</strong> Check break conditions first",
        "<strong>Validation:</strong> Handle invalid input with continue",
        "<strong>Processing:</strong> Handle valid input",
        "<strong>After loop:</strong> Display results and final calculations"
      ]
    },
    {
      "type": "text",
      "title": "When to Use Which Loop Type",
      "content": "Choose the right loop type based on your specific needs and the nature of your problem."
    },
    {
      "type": "rules-box",
      "title": "Loop Selection Guide:",
      "subtitle": "Choosing the Right Loop:",
      "items": [
        "<strong>For loop:</strong> When you know the exact number of iterations",
        "<strong>While with condition:</strong> When you have a clear end condition",
        "<strong>While (true) with break:</strong> For user input or complex exit conditions",
        "<strong>Continue:</strong> Skip invalid input without exiting the loop"
      ]
    },
    {
      "type": "code",
      "title": "Simulating Program Execution:",
      "content": "// Practice tracing through this loop\nint result = 0;\n\nfor (int i = 0; i < 4; i++) {\n    result += 3;\n}\n\n/*\nExecution trace table:\n\nStep | result | i | i < 4 | Action\n-----|--------|---|-------|--------\n  1  |   0    | 0 | true  | result = 0 + 3 = 3\n  2  |   3    | 1 | true  | result = 3 + 3 = 6\n  3  |   6    | 2 | true  | result = 6 + 3 = 9\n  4  |   9    | 3 | true  | result = 9 + 3 = 12\n  5  |  12    | 4 | false | Exit loop\n\nFinal result: 12\n*/\n\nSystem.out.println(\"Result: \" + result);"
    },
    {
      "type": "text",
      "title": "Incremental Development",
      "content": "Build complex programs step by step, testing each part before adding the next. This makes debugging easier and ensures each component works correctly."
    },
    {
      "type": "code",
      "title": "Step-by-Step Development:",
      "content": "// Robot calibration program - build incrementally\n\n// Step 1: Basic loop structure\n// for (int i = 0; i < 5; i++) {\n//     System.out.println(\"Step \" + i);\n// }\n\n// Step 2: Add sensor reading simulation\n// for (int i = 0; i < 5; i++) {\n//     int reading = (int)(Math.random() * 100);\n//     System.out.println(\"Calibration step \" + i + \": \" + reading);\n// }\n\n// Step 3: Add processing and validation\nSystem.out.println(\"=== Robot Sensor Calibration ===\");\nint totalReadings = 0;\nint validReadings = 0;\ndouble sum = 0;\n\nfor (int step = 1; step <= 5; step++) {\n    System.out.println(\"\\nCalibration step \" + step + \" of 5\");\n    \n    // Simulate sensor reading\n    double reading = Math.random() * 120;  // 0-120 range\n    totalReadings++;\n    \n    System.out.println(\"Raw sensor reading: \" + String.format(\"%.2f\", reading));\n    \n    // Validate reading\n    if (reading < 0 || reading > 100) {\n        System.out.println(\"⚠️ Reading out of range - skipping\");\n        continue;\n    }\n    \n    // Process valid reading\n    validReadings++;\n    sum += reading;\n    System.out.println(\"✅ Valid reading accepted\");\n}\n\n// Final calibration results\nSystem.out.println(\"\\n=== Calibration Complete ===\");\nSystem.out.println(\"Total attempts: \" + totalReadings);\nSystem.out.println(\"Valid readings: \" + validReadings);\n\nif (validReadings > 0) {\n    double average = sum / validReadings;\n    System.out.println(\"Average calibration value: \" + String.format(\"%.2f\", average));\n    System.out.println(\"✅ Calibration successful!\");\n} else {\n    System.out.println(\"❌ Calibration failed - no valid readings\");\n}"
    },
    {
      "type": "exercise-box",
      "title": "Try It Yourself:",
      "subtitle": "Exercise 1: Best Practices Application",
      "content": "Apply best practices to create well-structured programs:",
      "tasks": [
        "Refactor a poorly structured loop program using best practices",
        "Create a data collection system with proper variable scope",
        "Build a robot diagnostic system using incremental development",
        "Design a statistics calculator with clean loop structure"
      ],
      "answers": [
        {
          "task": "Refactor a poorly structured loop program using best practices",
          "content": "import java.util.Scanner;\n\n// BEFORE: Poorly structured program\n/*\npublic class BadStructure {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            int total = 0; // ❌ Variable reset each iteration\n            String input = scanner.nextLine();\n            if (input.equals(\"quit\")) {\n                System.out.println(\"Total: \" + total); // ❌ Always prints 0\n                break;\n            }\n            total += Integer.parseInt(input);\n        }\n    }\n}\n*/\n\n// AFTER: Well-structured program using best practices\npublic class GoodStructure {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        // ✅ Variables declared before loop with proper scope\n        int total = 0;\n        int numberCount = 0;\n        int errorCount = 0;\n        \n        System.out.println(\"=== Number Accumulator ===\");\n        System.out.println(\"Enter numbers to add (type 'quit' to finish)\");\n        \n        // ✅ Clean loop structure\n        while (true) {\n            System.out.print(\"Enter number (or 'quit'): \");\n            String input = scanner.nextLine().trim();\n            \n            // ✅ Exit condition checked first\n            if (input.equalsIgnoreCase(\"quit\")) {\n                break;\n            }\n            \n            // ✅ Input validation with continue\n            try {\n                int number = Integer.parseInt(input);\n                \n                // ✅ Process valid input\n                total += number;\n                numberCount++;\n                System.out.println(\"Added \" + number + \" (running total: \" + total + \")\");\n                \n            } catch (NumberFormatException e) {\n                // ✅ Handle errors gracefully\n                System.out.println(\"❌ Invalid number: \" + input);\n                errorCount++;\n                continue;\n            }\n        }\n        \n        // ✅ All final processing after loop\n        System.out.println(\"\\n=== Final Results ===\");\n        System.out.println(\"Total sum: \" + total);\n        System.out.println(\"Numbers entered: \" + numberCount);\n        System.out.println(\"Errors encountered: \" + errorCount);\n        \n        if (numberCount > 0) {\n            double average = (double) total / numberCount;\n            System.out.println(\"Average: \" + String.format(\"%.2f\", average));\n            \n            // Additional analysis\n            double successRate = (double) numberCount / (numberCount + errorCount) * 100;\n            System.out.println(\"Success rate: \" + String.format(\"%.1f\", successRate) + \"%\");\n        } else {\n            System.out.println(\"No valid numbers were entered.\");\n        }\n        \n        System.out.println(\"Program completed successfully.\");\n    }\n}"
        },
        {
          "task": "Create a data collection system with proper variable scope",
          "content": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DataCollectionSystem {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        // ✅ All variables declared with proper scope BEFORE loops\n        List<Double> sensorData = new ArrayList<>();\n        double sum = 0.0;\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        int validReadings = 0;\n        int invalidReadings = 0;\n        int totalAttempts = 0;\n        \n        // Configuration constants\n        final double MIN_VALID = 0.0;\n        final double MAX_VALID = 100.0;\n        final int TARGET_READINGS = 10;\n        \n        System.out.println(\"=== Robot Sensor Data Collection System ===\");\n        System.out.println(\"Target readings: \" + TARGET_READINGS);\n        System.out.println(\"Valid range: \" + MIN_VALID + \" - \" + MAX_VALID);\n        System.out.println(\"Enter sensor readings (type 'done' when finished)\\n\");\n        \n        // ✅ Main data collection loop with clean structure\n        while (validReadings < TARGET_READINGS) {\n            System.out.printf(\"Reading %d/%d: \", validReadings + 1, TARGET_READINGS);\n            String input = scanner.nextLine().trim();\n            totalAttempts++;\n            \n            // ✅ Early exit condition\n            if (input.equalsIgnoreCase(\"done\")) {\n                System.out.println(\"Data collection stopped by user.\");\n                break;\n            }\n            \n            // ✅ Input validation with proper error handling\n            double reading;\n            try {\n                reading = Double.parseDouble(input);\n            } catch (NumberFormatException e) {\n                System.out.println(\"❌ Invalid format. Please enter a decimal number.\");\n                invalidReadings++;\n                continue;\n            }\n            \n            // ✅ Range validation\n            if (reading < MIN_VALID || reading > MAX_VALID) {\n                System.out.printf(\"❌ Out of range (%.2f). Must be %.1f-%.1f\\n\", \n                                reading, MIN_VALID, MAX_VALID);\n                invalidReadings++;\n                continue;\n            }\n            \n            // ✅ Process valid reading\n            sensorData.add(reading);\n            sum += reading;\n            validReadings++;\n            \n            // Update min/max\n            if (reading < min) min = reading;\n            if (reading > max) max = reading;\n            \n            System.out.printf(\"✅ Valid reading: %.2f\\n\", reading);\n            \n            // Show progress\n            if (validReadings < TARGET_READINGS) {\n                double currentAvg = sum / validReadings;\n                System.out.printf(\"   Current average: %.2f, Range: %.2f-%.2f\\n\", \n                                currentAvg, min, max);\n            }\n        }\n        \n        // ✅ ALL analysis and output AFTER the loop\n        System.out.println(\"\\n=== Data Collection Complete ===\");\n        System.out.println(\"Valid readings collected: \" + validReadings);\n        System.out.println(\"Invalid attempts: \" + invalidReadings);\n        System.out.println(\"Total attempts: \" + totalAttempts);\n        \n        if (validReadings > 0) {\n            // Basic statistics\n            double average = sum / validReadings;\n            double range = max - min;\n            \n            System.out.println(\"\\n📊 Statistical Analysis:\");\n            System.out.printf(\"Average: %.2f\\n\", average);\n            System.out.printf(\"Minimum: %.2f\\n\", min);\n            System.out.printf(\"Maximum: %.2f\\n\", max);\n            System.out.printf(\"Range: %.2f\\n\", range);\n            System.out.printf(\"Sum: %.2f\\n\", sum);\n            \n            // Calculate standard deviation\n            double variance = 0.0;\n            for (double value : sensorData) {\n                double diff = value - average;\n                variance += diff * diff;\n            }\n            variance /= validReadings;\n            double stdDev = Math.sqrt(variance);\n            System.out.printf(\"Standard deviation: %.2f\\n\", stdDev);\n            \n            // Data quality assessment\n            double errorRate = (double) invalidReadings / totalAttempts * 100;\n            System.out.println(\"\\n🔍 Data Quality Assessment:\");\n            System.out.printf(\"Error rate: %.1f%%\\n\", errorRate);\n            System.out.printf(\"Data completeness: %.1f%%\\n\", \n                            (double) validReadings / TARGET_READINGS * 100);\n            \n            if (errorRate < 5 && stdDev < 10) {\n                System.out.println(\"✅ EXCELLENT: High quality data collected\");\n            } else if (errorRate < 15 && stdDev < 20) {\n                System.out.println(\"⚠️ GOOD: Acceptable data quality\");\n            } else {\n                System.out.println(\"❌ POOR: Data quality issues detected\");\n            }\n            \n            // Display all readings\n            System.out.println(\"\\n📋 All Valid Readings:\");\n            for (int i = 0; i < sensorData.size(); i++) {\n                System.out.printf(\"  %2d: %6.2f\\n\", i + 1, sensorData.get(i));\n            }\n            \n        } else {\n            System.out.println(\"❌ No valid data collected.\");\n        }\n        \n        System.out.println(\"\\nData collection system shutdown.\");\n    }\n}"
        }
      ]
    }
  ]
}
