{
  "title": "GitHub and Remote Repositories",
  "sections": [
    {
      "type": "text",
      "title": "Connecting to GitHub",
      "content": "GitHub provides cloud storage for your Git repositories, enabling collaboration and backup. This lesson covers creating remote repositories, connecting local repos to GitHub, and syncing changes."
    },
    {
      "type": "text",
      "title": "Key Concepts",
      "content": "Remote repositories are hosted on servers like GitHub, providing cloud storage and backup for your code. It's important to understand that Git and GitHub are different: Git is the version control tool that runs on your computer, while GitHub is a web service that hosts Git repositories. Push uploads your local changes to the remote repository, while pull downloads remote changes to your local repository. Remote repositories enable team collaboration by providing a central location where everyone can share and access code."
    },
    {
      "type": "list",
      "title": "Setting Up GitHub",
      "content": [
        "Create GitHub account and verify email",
        "Set up SSH keys for secure authentication",
        "Create new repository on GitHub website",
        "Connect local repo to remote: <code>git remote add origin URL</code>",
        "Verify remote connection: <code>git remote -v</code>"
      ]
    },
    {
      "type": "code",
      "title": "Syncing with Remote",
      "content": "Use these commands to sync your local repository with GitHub:",
      "code": "git push origin branch-name     # Push changes\ngit pull origin branch-name      # Pull changes\ngit fetch                        # Download without merging\ngit clone repository-url         # Clone existing repo\ngit push -u origin main         # Set upstream branch"
    },
    {
      "type": "text",
      "title": "Authentication Methods",
      "content": "GitHub offers several authentication methods to secure your access. SSH keys are recommended for security as they provide encrypted communication and don't require you to enter passwords repeatedly. Personal access tokens are used for HTTPS connections and provide fine-grained control over permissions. GitHub CLI offers command line access with built-in authentication. Two-factor authentication adds an extra layer of security to your account, and team member access management allows you to control who can access your repositories."
    },
    {
      "type": "text",
      "title": "Understanding Remote Repository Workflow",
      "content": "Remote repositories create a distributed workflow where multiple developers can work on the same project. When you push changes, you're uploading your local commits to the remote repository, making them available to other team members. When you pull changes, you're downloading and integrating updates from the remote repository into your local copy. The fetch command downloads remote changes without merging them, allowing you to review changes before integrating them. This workflow enables seamless collaboration while maintaining the integrity of your local development environment."
    },
    {
      "type": "link-grid",
      "title": "Further Reading Resources",
      "content": [
        {
          "title": "GitHub Guides: Getting Started",
          "url": "https://guides.github.com/activities/hello-world/"
        },
        {
          "title": "GitHub Documentation: Remote Repositories",
          "url": "https://docs.github.com/en/get-started/getting-started-with-git/managing-remote-repositories"
        },
        {
          "title": "SSH Key Setup for GitHub",
          "url": "https://docs.github.com/en/authentication/connecting-to-github-with-ssh"
        }
      ]
    }
  ]
} 