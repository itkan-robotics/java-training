{
  "title": "Advanced Git Concepts",
  "sections": [
    {
      "type": "text",
      "title": "Advanced Version Control Techniques",
      "content": "Advanced Git concepts help teams maintain clean history and handle complex scenarios. This lesson covers undoing changes, stashing, rebasing, and other advanced techniques useful for experienced users."
    },
    {
      "type": "text",
      "title": "Key Concepts",
      "content": "Git reset allows you to undo commits and changes at different levels, from keeping changes staged to completely discarding them. Git revert creates new commits that undo previous changes, which is safer for shared repositories. Stashing temporarily saves work without committing, allowing you to switch contexts quickly. Rebasing rewrites commit history for cleaner logs by moving commits to a new base. These advanced techniques require careful use to avoid data loss, so it's important to understand when and how to use them properly."
    },
    {
      "type": "code",
      "title": "Undoing Changes",
      "content": "Use these commands to undo changes safely:",
      "code": "git reset --soft HEAD~1    # Undo commit, keep changes staged\ngit reset --mixed HEAD~1   # Undo commit, unstage changes\ngit reset --hard HEAD~1     # Undo commit, discard all changes\ngit revert HEAD            # Create new commit that undoes previous\ngit checkout -- filename   # Discard changes in working directory"
    },
    {
      "type": "text",
      "title": "Stashing Work",
      "content": "<code>Git stash</code> allows you to save work without committing, which is useful when you need to switch to a different task temporarily. Use <code>git stash</code> to save your current work, <code>git stash pop</code> to apply and remove the most recent stash, and <code>git stash list</code> to view all your stashes. You can apply a specific stash without removing it using <code>git stash apply</code>, and remove individual stashes with <code>git stash drop</code>. Stashing is particularly useful when you need to pull the latest changes but have uncommitted work that isn't ready to commit yet."
    },
    {
      "type": "text",
      "title": "Rebasing for Clean History",
      "content": "Git rebase rewrites commit history by moving commits to a new base, creating a linear history that's easier to follow. Interactive rebasing with <code>git rebase -i</code> allows you to squash commits, reorder them, or edit commit messages during the rebase process. Squashing commits combines multiple small commits into one larger commit, while reordering allows you to organize your commit history logically. You can also edit commit messages during rebase to improve clarity and consistency."
    },
    {
      "type": "text",
      "title": "Tags and Releases",
      "content": "Git tags mark important commits such as competition versions or major milestones in your robot's development. Annotated tags created with <code>git tag -a v1.0 -m \"Competition ready\"</code> include additional metadata and are recommended for important releases. GitHub releases can be created from tags, providing a way to package and distribute specific versions of your robot code. Version your robot code for different competitions to maintain clear separation between competition-ready code and development work. Document release notes for each version to help team members understand what changed and why."
    },
    {
      "type": "text",
      "title": "Advanced Branching Strategies",
      "content": "Git flow is a branching strategy that uses feature, develop, release, and hotfix branches to organize development work systematically. Trunk-based development works directly on the main branch, which is simpler but requires more discipline. Feature flags allow for gradual rollouts of new features by enabling or disabling code paths without deploying new versions. Environment-specific branches like dev, staging, and prod help manage code across different deployment environments. Choose your branching strategy based on team size, experience level, and the complexity of your project."
    },
    {
      "type": "text",
      "title": "Mastering Advanced Git for Robotics Teams",
      "content": "Advanced Git techniques become valuable as robotics teams grow more experienced and their projects become more complex. Understanding when to use reset versus revert, how to manage work with stashing, and when to rebase versus merge helps teams maintain clean, professional repositories. These skills are particularly important for teams that work on multiple features simultaneously or need to maintain different versions of their robot code for different competitions. The key is to choose the right tool for each situation while always prioritizing code safety and team collaboration."
    },
    {
      "type": "link-grid",
      "title": "Further Reading Resources",
      "content": [
        {
          "title": "Git Documentation: Advanced Topics",
          "url": "https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified"
        },
        {
          "title": "GitHub Guides: Git Handbook",
          "url": "https://guides.github.com/introduction/git-handbook/"
        },
        {
          "title": "Git Flow Workflow",
          "url": "https://nvie.com/posts/a-successful-git-branching-model/"
        },
        {
          "title": "Git Rebase Tutorial",
          "url": "https://git-scm.com/book/en/v2/Git-Branching-Rebasing"
        }
      ]
    }
  ]
} 