{
  "title": "Branching and Merging",
  "sections": [
    {
      "type": "text",
      "title": "Working with Branches",
      "content": "Branches allow you to work on different features or improvements without affecting the main code. This lesson covers creating branches, switching between them, and merging changes back together."
    },
    {
      "type": "text",
      "title": "Key Concepts",
      "content": "Branches are separate lines of development that allow you to work on features independently. The main branch (often called master or main) contains stable code that is ready for production or competition. Feature branches isolate new work and prevent it from affecting the main codebase until it's ready. Merging combines changes from different branches back into the main branch. Branching enables parallel development where multiple team members can work on different features simultaneously."
    },
    {
      "type": "code",
      "title": "Branch Operations",
      "content": "Use these commands to work with branches:",
      "code": "git branch feature-name          # Create new branch\ngit checkout branch-name        # Switch to branch\ngit checkout -b new-branch     # Create and switch\ngit branch                      # List branches\ngit branch -d branch-name      # Delete branch"
    },
    {
      "type": "text",
      "title": "Merging Workflows",
      "content": "When you're ready to combine your feature work with the main code, you merge the feature branch into main using <code>git merge feature-branch</code. Git will create fast-forward merges for linear history when possible, or merge commits for more complex histories. Sometimes branches modify the same files, which creates conflicts that must be resolved manually. The key is to keep the main branch stable and tested while allowing experimental work on feature branches."
    },
    {
      "type": "emphasis-box",
      "title": "Robotics Branching Examples",
      "content": "For robotics teams, you might create an autonomous branch with <code>git checkout -b autonomous-improvements</code>, work on teleop features with <code>git checkout -b teleop-enhancements</code>, create a bug fix branch with <code>git checkout -b fix-drivetrain-issue</code>, merge working features with <code>git merge autonomous-improvements</code>, and keep the main branch for competition-ready code."
    },
    {
      "type": "text",
      "title": "Conflict Resolution",
      "content": "Conflicts occur when branches modify the same lines in the same files. Git marks conflicts in affected files with special markers, and you must manually edit the files to resolve the conflicts. You can use git status to see which files have conflicts. Once you've resolved all conflicts, you complete the merge by adding the resolved files and committing the merge."
    },
    {
      "type": "text",
      "title": "Understanding Branch Management",
      "content": "Effective branch management is crucial for team collaboration. The main branch should always contain stable, working code that's ready for competition or deployment. Feature branches should be short-lived and focused on single features or fixes to make them easier to review and merge. When merging, choose the appropriate strategy: fast-forward merges keep history linear, while merge commits preserve the branch structure. Regular cleanup of merged branches keeps your repository organized and prevents confusion about which branches are still active."
    },
    {
      "type": "link-grid",
      "title": "Further Reading Resources",
      "content": [
        {
          "title": "Git Documentation: Branching and Merging",
          "url": "https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell"
        },
        {
          "title": "Git Branching Tutorial",
          "url": "https://learngitbranching.js.org/"
        },
        {
          "title": "GitHub Skills: Introduction to GitHub",
          "url": "https://skills.github.com/"
        }
      ]
    }
  ]
} 