{
  "title": "Pull Requests and Collaboration",
  "sections": [
    {
      "type": "text",
      "title": "Collaborating with Pull Requests",
      "content": "Pull requests (PRs) are GitHub's way of proposing changes to a repository. They enable code review, discussion, and controlled merging of changes. This lesson covers creating, reviewing, and managing pull requests."
    },
    {
      "type": "text",
      "title": "Key Concepts",
      "content": "Pull requests propose changes to a repository and serve as a formal way to request that your code be merged into the main branch. PRs enable code review before merging, allowing team members to examine your changes and provide feedback. Comments and discussions happen directly on PR pages, creating a collaborative environment for improving code. PRs can be merged, closed, or updated based on feedback, and they maintain clean project history by documenting the review process."
    },
    {
      "type": "list",
      "title": "Creating Pull Requests",
      "content": [
        "Push feature branch to GitHub",
        "Click 'Compare & pull request' on GitHub",
        "Write descriptive title and description",
        "Add reviewers and assignees",
        "Link related issues or discussions"
      ]
    },
    {
      "type": "list",
      "title": "Reviewing Pull Requests",
      "content": [
        "Read PR description and changes",
        "Test changes locally if needed",
        "Add constructive comments",
        "Approve, request changes, or comment",
        "Use review suggestions for improvements"
      ]
    },
    {
      "type": "text",
      "title": "PR Best Practices",
      "content": "Writing clear, descriptive PR titles helps reviewers understand what changes you're proposing at a glance. Include context and reasoning in the description to explain why the changes are necessary and how they improve the codebase. Keep PRs focused on single features or fixes to make them easier to review and understand. Respond to review comments promptly to keep the conversation flowing and show that you value feedback. Always test changes before submitting a PR to ensure they work as expected."
    },
    {
      "type": "text",
      "title": "Merging Pull Requests",
      "content": "Before merging a pull request, ensure all reviews are approved and any requested changes have been addressed. If there are merge conflicts, resolve them by updating your branch with the latest changes from main. Choose an appropriate merge strategy: merge commit preserves the branch history, squash combines all commits into one, and rebase creates a linear history. After merging, delete the feature branch to keep the repository clean and update any related issues or documentation."
    },
    {
      "type": "text",
      "title": "Understanding the Pull Request Workflow",
      "content": "Pull requests create a structured workflow for code collaboration that improves code quality and team communication. The process starts when a developer creates a feature branch and makes changes locally. Once the changes are ready, they push the branch to GitHub and create a pull request. This triggers a review process where team members can examine the code, ask questions, and suggest improvements. The discussion happens directly on the PR page, creating a permanent record of the decision-making process. Once approved, the PR is merged into the main branch, completing the collaborative development cycle."
    },
    {
      "type": "link-grid",
      "title": "Further Reading Resources",
      "content": [
        {
          "title": "GitHub Documentation: About Pull Requests",
          "url": "https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests"
        },
        {
          "title": "Code Review Best Practices",
          "url": "https://github.com/thoughtbot/guides/tree/main/code-review"
        }
      ]
    }
  ]
} 