{
  "title": "Version Control Best Practices",
  "sections": [
    {
      "type": "text",
      "title": "Writing Good Version Control",
      "content": "Good version control practices make collaboration easier and project history more useful. This lesson covers commit message quality, branching strategies, and team workflow best practices."
    },
    {
      "type": "text",
      "title": "Key Concepts",
      "content": "Quality commit messages explain what changes were made and why they were necessary, making it easier for team members to understand the project history. Small, focused commits are easier to review and understand than large commits that change many things at once. Branch naming conventions improve organization and make it clear what each branch is for. Regular commits prevent losing work and create a more detailed history of your development process. Code review improves code quality and provides learning opportunities for the entire team."
    },
    {
      "type": "code",
      "title": "Writing Good Commit Messages",
      "content": "Follow these guidelines for effective commit messages:",
      "code": "# Good commit message format:\n# Use imperative mood: 'Add feature' not 'Added feature'\n# Keep first line under 50 characters\n# Add detailed description for complex changes\n# Reference issues or pull requests\n# Explain why changes were made\n\ngit commit -m \"Add autonomous scoring sequence for alliance hub\"\ngit commit -m \"Fix drivetrain calibration issue in teleop mode\""
    },
    {
      "type": "text",
      "title": "Branch Naming and Organization",
      "content": "Use descriptive branch names that clearly indicate what the branch is for, such as feature/autonomous-scoring or fix/drivetrain-issue. Prefix branches by type using conventions like feature/, fix/, or hotfix/ to make it easy to understand the purpose at a glance. Keep branches short-lived and focused on single features or fixes to make them easier to manage. Delete merged branches to keep the repository clean and avoid confusion. Use consistent naming across your team to maintain organization."
    },
    {
      "type": "emphasis-box",
      "title": "Robotics Team Best Practices",
      "content": "For robotics teams, use clear and descriptive commit messages such as 'Add autonomous scoring routine' or 'Fix drivetrain calibration bug'. Create branch names that reflect the purpose and year, like feature/autonomous-scoring-2024 or fix/drivetrain-issue. Make regular commits during development to track progress and avoid losing work. Conduct code reviews before merging changes into the main branch to maintain code quality and share knowledge. Document any changes to robot configuration or hardware in the repository to keep the whole team informed."
    },
    {
      "type": "text",
      "title": "Team Workflow Practices",
      "content": "Always pull the latest changes before starting work to ensure you're building on the most current code. Create feature branches for new work to isolate your changes and prevent conflicts. Test changes before committing to ensure they work as expected and don't break existing functionality. Review code before merging to catch issues early and share knowledge across the team. Keep the main branch stable and tested by only merging code that has been thoroughly reviewed and tested."
    },
    {
      "type": "text",
      "title": "File and Repository Organization",
      "content": "Use .gitignore files to exclude build artifacts and temporary files that shouldn't be tracked in version control. Organize code into logical directories that reflect the structure of your project. Include README files for project documentation to help new team members understand the codebase. Version configuration files separately from code to track changes to settings and parameters. Keep sensitive information like API keys and passwords out of repositories by using environment variables or secure configuration management."
    },
    {
      "type": "text",
      "title": "Building a Professional Development Culture",
      "content": "Good version control practices create a foundation for professional software development. Clear commit messages and organized branches make it easier for team members to understand and contribute to the project. Regular code reviews improve code quality and provide learning opportunities for everyone on the team. Consistent workflow practices reduce confusion and prevent common mistakes. By following these best practices, teams can collaborate more effectively and maintain high-quality code that's easy to understand and modify."
    },
    {
      "type": "link-grid",
      "title": "Further Reading Resources",
      "content": [
        {
          "title": "Conventional Commits Specification",
          "url": "https://www.conventionalcommits.org/"
        },
        {
          "title": "GitHub Flow Documentation",
          "url": "https://guides.github.com/introduction/flow/"
        },
        {
          "title": "Git Best Practices",
          "url": "https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project"
        },
        {
          "title": "Code Review Best Practices",
          "url": "https://github.com/thoughtbot/guides/tree/main/code-review"
        }
      ]
    }
  ]
} 