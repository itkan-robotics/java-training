{
  "id": "printing",
  "title": "Java Printing",
  "sections": [
    {
      "type": "text",
      "title": "Basic Printing",
      "content": "The <code>System.out.println()</code> command prints text to the console. It's one of the first commands you'll learn in Java programming."
    },
    {
      "type": "code",
      "title": "Simple Print Example:",
      "content": "System.out.println(\"Hello world!\");\nSystem.out.println(\"Welcome to Java programming!\");\n\n// Output:\n// Hello world!\n// Welcome to Java programming!"
    },
    {
      "type": "text",
      "title": "Program Structure",
      "content": "Every Java program needs boilerplate code to function. The program execution starts from the <code>main</code> method."
    },
    {
      "type": "code",
      "title": "Complete Java Program:",
      "content": "public class MyProgram {\n    public static void main(String[] args) {\n        // Your code goes here\n        System.out.println(\"Hello from Java!\");\n        System.out.println(\"This is my first program\");\n    }\n}"
    },
    {
      "type": "list",
      "title": "Key Concepts:",
      "items": [
        "<strong>Parameters:</strong> Text inside parentheses that gets printed",
        "<strong>Semicolon:</strong> Every command must end with <code>;</code>",
        "<strong>Quotation marks:</strong> Text must be enclosed in double quotes <code>\"\"</code>",
        "<strong>Case sensitivity:</strong> <code>System</code> must be capitalized exactly"
      ]
    },
    {
      "type": "code",
      "title": "Multiple Lines and Comments:",
      "content": "public class Example {\n    public static void main(String[] args) {\n        // Single-line comment\n        System.out.println(\"First line\");\n        System.out.println(\"Second line\");\n        \n        /* Multi-line comment\n           for longer explanations */\n        System.out.println(\"Third line\");\n    }\n}"
    },
    {
      "type": "rules-box",
      "title": "Printing Best Practices:",
      "goodPractices": [
        "Use meaningful text in your print statements",
        "Add comments to explain your code",
        "Use the <code>sout</code> shortcut in IDEs (type 'sout' + Tab)",
        "One command per line for readability"
      ],
      "avoid": [
        "Forgetting semicolons at the end of statements",
        "Misspelling <code>println</code> as <code>printin</code>",
        "Missing quotation marks around text",
        "Writing everything on one line"
      ]
    },
    {
      "type": "exercise-box",
      "title": "Try It Yourself:",
      "subtitle": "Exercise 1: Basic Printing",
      "content": "Practice with these printing exercises:",
      "tasks": [
        "Write a program that prints your name",
        "Print your favorite programming quote on multiple lines",
        "Add comments explaining what each print statement does",
        "Try the 'sout' shortcut if you're using an IDE"
      ],
      "answers": [
        {
          "task": "Write a program that prints your name",
          "content": "public class MyName {\n    public static void main(String[] args) {\n        System.out.println(\"John Doe\");\n    }\n}"
        },
        {
          "task": "Print your favorite programming quote on multiple lines",
          "content": "public class Quote {\n    public static void main(String[] args) {\n        System.out.println(\"First, solve the problem.\");\n        System.out.println(\"Then, write the code.\");\n        System.out.println(\"- John Johnson\");\n    }\n}"
        },
        {
          "task": "Add comments explaining what each print statement does",
          "content": "public class CommentsExample {\n    public static void main(String[] args) {\n        // Print greeting message\n        System.out.println(\"Welcome to Java!\");\n        \n        // Print instructional text\n        System.out.println(\"Let's learn programming!\");\n        \n        /* Print closing message\n           This is a multi-line comment */\n        System.out.println(\"Happy coding!\");\n    }\n}"
        },
        {
          "task": "Try the 'sout' shortcut if you're using an IDE",
          "content": "// In your IDE:\n// 1. Type 'sout' on a blank line\n// 2. Press Tab key\n// 3. The IDE will expand it to:\nSystem.out.println();\n// 4. Add your text between the quotes"
        }
      ]
    },
    {
      "type": "text",
      "title": "Applications in FRC",
      "content": "In FRC, printing to the console is a powerful tool for debugging and monitoring robot behavior. It allows developers to quickly access important data without relying on external tools like SmartDashboard. This can be especially useful during testing and characterization."
    },
    {
      "type": "code",
      "title": "FRC Console Printing Example:",
      "content": "System.out.println(\"********** Drive FF Characterization Results **********\");\nSystem.out.println(\"\\tkS: \" + formatter.format(kS));\nSystem.out.println(\"\\tkV: \" + formatter.format(kV));"
    },
    {
      "type": "text",
      "title": "Explanation",
      "content": "The example above demonstrates how to print formatted feedforward characterization results directly to the console. By using <code>System.out.println()</code>, we can easily display values like <code>kS</code> and <code>kV</code> in a readable format. This approach eliminates the need to configure SmartDashboard or other external tools, making it a quick and efficient way to debug and analyze data during development."
    }
    
  ]
} 
