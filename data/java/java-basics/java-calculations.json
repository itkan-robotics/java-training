{
  "id": "calculations",
  "title": "Calculating with Numbers",
  "sections": [
    {
      "type": "text",
      "title": "Basic Mathematical Operations",
      "content": "Java supports the standard mathematical operations: addition <code>+</code>, subtraction <code>-</code>, multiplication <code>*</code>, and division <code>/</code>. Operations follow familiar precedence rules."
    },
    {
      "type": "code",
      "title": "Simple Calculations:",
      "content": "int first = 2;\nint second = 4;\nint sum = first + second;        // Addition: 6\nint difference = second - first; // Subtraction: 2\nint product = first * second;    // Multiplication: 8\nint quotient = second / first;   // Division: 2\n\nSystem.out.println(\"Sum: \" + sum);\nSystem.out.println(\"Product: \" + product);"
    },
    {
      "type": "text",
      "title": "Precedence and Parentheses",
      "content": "Operations are performed left to right, with <code>*</code> and <code>/</code> calculated before <code>+</code> and <code>-</code>. Use parentheses to control the order of operations."
    },
    {
      "type": "code",
      "title": "Order of Operations:",
      "content": "int withParentheses = (1 + 1) + 3 * (2 + 5);\nSystem.out.println(withParentheses); // prints 23\n\nint withoutParentheses = 1 + 1 + 3 * 2 + 5;\nSystem.out.println(withoutParentheses); // prints 13\n\n// Step by step:\n// (1 + 1) = 2, (2 + 5) = 7, 3 * 7 = 21, 2 + 21 = 23\n// vs\n// 3 * 2 = 6, then 1 + 1 + 6 + 5 = 13"
    },
    {
      "type": "list",
      "title": "Key Concepts:",
      "items": [
        "<strong>Expression:</strong> A combination of values that produces another value",
        "<strong>Statement:</strong> A complete instruction that performs an action",
        "<strong>Precedence:</strong> Multiplication and division before addition and subtraction",
        "<strong>Parentheses:</strong> Override normal precedence rules"
      ]
    },
    {
      "type": "code",
      "title": "Calculating and Printing:",
      "content": "int robotSpeed = 25;\nint time = 4;\nint distance = robotSpeed * time;\n\n// Combine text and calculations\nSystem.out.println(\"Robot speed: \" + robotSpeed + \" mph\");\nSystem.out.println(\"Distance traveled: \" + distance + \" miles\");\nSystem.out.println(\"Average: \" + (robotSpeed + time) / 2);\n\n// String concatenation precedence\nSystem.out.println(\"Result: \" + (2 + 3));     // prints \"Result: 5\"\nSystem.out.println(\"Wrong: \" + 2 + 3);        // prints \"Wrong: 23\""
    },
    {
      "type": "text",
      "title": "Division and Data Types",
      "content": "Division behavior depends on the data types involved. Integer division produces integer results, while floating-point division produces decimal results."
    },
    {
      "type": "code",
      "title": "Integer vs Floating-Point Division:",
      "content": "// Integer division - truncates decimal part\nint intResult = 7 / 2;\nSystem.out.println(intResult); // prints 3\n\n// Floating-point division\ndouble floatResult1 = 7.0 / 2;    // 3.5\ndouble floatResult2 = 7 / 2.0;    // 3.5\ndouble floatResult3 = 7.0 / 2.0;  // 3.5\n\n// Type casting for precise division\nint a = 7;\nint b = 2;\ndouble precise = (double) a / b;  // 3.5\ndouble wrong = (double) (a / b);  // 3.0 (division done first!)"
    },
    {
      "type": "rules-box",
      "title": "Division Best Practices:",
      "goodPractices": [
        "Use <code>double</code> for calculations requiring decimal precision",
        "Cast to <code>(double)</code> before division for exact results",
        "Be aware of integer division truncation",
        "Use parentheses to control evaluation order"
      ],
      "avoid": [
        "Expecting decimals from integer division",
        "Casting after division: <code>(double)(a/b)</code>",
        "Dividing by zero (causes runtime error)",
        "Forgetting precedence in mixed operations"
      ]
    },
    {
      "type": "code",
      "title": "Practical Robot Calculations:",
      "content": "public class RobotCalculations {\n    public static void main(String[] args) {\n        // Robot navigation calculations\n        double startX = 10.5;\n        double startY = 15.0;\n        double endX = 25.3;\n        double endY = 30.7;\n        \n        // Distance formula: sqrt((x2-x1)² + (y2-y1)²)\n        double deltaX = endX - startX;\n        double deltaY = endY - startY;\n        double distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n        \n        System.out.println(\"Robot must travel: \" + distance + \" units\");\n        \n        // Battery calculation\n        double batteryStart = 100.0;\n        double powerConsumption = 2.5; // percent per minute\n        int timeMinutes = 25;\n        \n        double batteryUsed = powerConsumption * timeMinutes;\n        double batteryRemaining = batteryStart - batteryUsed;\n        \n        System.out.println(\"Battery remaining: \" + batteryRemaining + \"%\");\n    }\n}"
    },
    {
      "type": "rules-box",
      "title": "Common Variable Assignment Misconceptions:",
      "subtitle": "Understanding Variable Assignment:",
      "items": [
        "<strong>Assignment is copying:</strong> <code>a = b</code> copies b's value to a, b keeps its value",
        "<strong>No automatic dependency:</strong> Changing b later doesn't affect a",
        "<strong>Direction matters:</strong> <code>a = b</code> means 'copy b into a', not the reverse",
        "<strong>One-time operation:</strong> Assignment happens once when the line executes"
      ]
    },
    {
      "type": "code",
      "title": "Variable Assignment Example:",
      "content": "int robotCount = 5;\nint backupCount = robotCount;  // Copy 5 to backupCount\n\nSystem.out.println(\"Original: \" + robotCount);    // 5\nSystem.out.println(\"Backup: \" + backupCount);     // 5\n\n// Change original\nrobotCount = 10;\n\nSystem.out.println(\"After change:\");\nSystem.out.println(\"Original: \" + robotCount);    // 10\nSystem.out.println(\"Backup: \" + backupCount);     // Still 5!\n\n// backupCount did NOT automatically change"
    },
    {
      "type": "exercise-box",
      "title": "Try It Yourself:",
      "subtitle": "Exercise 1: Calculation Practice",
      "content": "Practice with mathematical operations and calculations:",
      "tasks": [
        "Calculate the area of a rectangular robot base (length × width)",
        "Compute average speed from distance and time with proper division",
        "Create a battery percentage calculator with remaining time",
        "Demonstrate the difference between integer and floating-point division"
      ],
      "answers": [
        {
          "task": "Calculate the area of a rectangular robot base (length × width)",
          "content": "public class RobotBaseArea {\n    public static void main(String[] args) {\n        double length = 45.5;  // cm\n        double width = 30.2;   // cm\n        \n        double area = length * width;\n        double perimeter = 2 * (length + width);\n        \n        System.out.println(\"=== Robot Base Dimensions ===\");\n        System.out.println(\"Length: \" + length + \" cm\");\n        System.out.println(\"Width: \" + width + \" cm\");\n        System.out.println(\"Area: \" + area + \" cm²\");\n        System.out.println(\"Perimeter: \" + perimeter + \" cm\");\n    }\n}"
        },
        {
          "task": "Compute average speed from distance and time with proper division",
          "content": "public class SpeedCalculator {\n    public static void main(String[] args) {\n        int distanceTraveled = 150;  // meters\n        int timeSeconds = 45;        // seconds\n        \n        // Proper floating-point division\n        double averageSpeed = (double) distanceTraveled / timeSeconds;\n        \n        // Convert to different units\n        double speedMPS = averageSpeed;  // meters per second\n        double speedKMH = averageSpeed * 3.6;  // km/h conversion\n        \n        System.out.println(\"=== Speed Analysis ===\");\n        System.out.println(\"Distance: \" + distanceTraveled + \" meters\");\n        System.out.println(\"Time: \" + timeSeconds + \" seconds\");\n        System.out.println(\"Speed: \" + speedMPS + \" m/s\");\n        System.out.println(\"Speed: \" + speedKMH + \" km/h\");\n        \n        // Show wrong way (integer division)\n        int wrongSpeed = distanceTraveled / timeSeconds;\n        System.out.println(\"Wrong (integer): \" + wrongSpeed + \" m/s\");\n    }\n}"
        },
        {
          "task": "Create a battery percentage calculator with remaining time",
          "content": "public class BatteryCalculator {\n    public static void main(String[] args) {\n        double currentBattery = 85.5;     // percent\n        double consumptionRate = 3.2;    // percent per hour\n        double lowBatteryThreshold = 20.0;\n        \n        // Calculate remaining time\n        double usableBattery = currentBattery - lowBatteryThreshold;\n        double remainingHours = usableBattery / consumptionRate;\n        double remainingMinutes = remainingHours * 60;\n        \n        System.out.println(\"=== Battery Status ===\");\n        System.out.println(\"Current battery: \" + currentBattery + \"%\");\n        System.out.println(\"Consumption rate: \" + consumptionRate + \"%/hour\");\n        System.out.println(\"Low battery threshold: \" + lowBatteryThreshold + \"%\");\n        System.out.println(\"Remaining time: \" + remainingHours + \" hours\");\n        System.out.println(\"Remaining time: \" + remainingMinutes + \" minutes\");\n        \n        if (remainingHours < 1.0) {\n            System.out.println(\"⚠️ WARNING: Less than 1 hour remaining!\");\n        }\n    }\n}"
        },
        {
          "task": "Demonstrate the difference between integer and floating-point division",
          "content": "public class DivisionDemo {\n    public static void main(String[] args) {\n        int totalSensors = 7;\n        int robotCount = 2;\n        \n        System.out.println(\"=== Division Comparison ===\");\n        System.out.println(\"Total sensors: \" + totalSensors);\n        System.out.println(\"Robot count: \" + robotCount);\n        System.out.println();\n        \n        // Integer division - truncates\n        int sensorsPerRobotInt = totalSensors / robotCount;\n        System.out.println(\"Integer division: \" + sensorsPerRobotInt + \" sensors per robot\");\n        \n        // Floating-point division - precise\n        double sensorsPerRobotDouble = (double) totalSensors / robotCount;\n        System.out.println(\"Precise division: \" + sensorsPerRobotDouble + \" sensors per robot\");\n        \n        // Show the difference\n        System.out.println();\n        System.out.println(\"Difference: \" + (sensorsPerRobotDouble - sensorsPerRobotInt));\n        \n        // Real-world application\n        double leftoverSensors = totalSensors % robotCount;\n        System.out.println(\"Leftover sensors: \" + leftoverSensors);\n    }\n}"
        }
      ]
    }
  ]
} 
