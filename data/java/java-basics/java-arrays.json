{
  "id": "arrays",
  "title": "Arrays",
  "sections": [
    {
      "type": "text",
      "title": "What are Arrays?",
      "content": "An array contains a limited amount of numbered spots (indices) for values. The length (or size) of an array is the amount of these spots - how many values you can place in the array. The values in an array are called <strong>elements</strong>. Arrays can store primitive types (int, double, boolean) or objects (String, custom classes)."
    },
    {
      "type": "code",
      "title": "Creating Arrays - Basic Types:",
      "content": "// Arrays of primitive types\nint[] sensorReadings = new int[5];     // Array for 5 integers\ndouble[] coordinates = new double[6];  // Array for 6 coordinates\nboolean[] motorStatus = new boolean[4]; // Array for 4 boolean values\n\n// Initialize with values\nint[] powerLevels = {25, 50, 75, 100};\ndouble[] targetPositions = {12.5, 24.0, 36.5};\n\n// Access elements using index (starts at 0)\nsensorReadings[0] = 100;  // First element\nsensorReadings[4] = 95;   // Last element (index 4 for array of size 5)\n\nSystem.out.println(\"Array length: \" + sensorReadings.length);\nSystem.out.println(\"First reading: \" + sensorReadings[0]);"
    },
    {
      "type": "text",
      "title": "Arrays of Objects",
      "content": "Just like primitive types, arrays can store objects. String arrays are a common example, but you can create arrays of any object type, including custom classes. This is where arrays become really powerful for robotics applications."
    },
    {
      "type": "code",
      "title": "String Arrays Example:",
      "content": "// Create an array of strings\nString[] teamMembers = new String[4];\n\n// Add names to the array\nteamMembers[0] = \"Alice\";\nteamMembers[1] = \"Bob\";\nteamMembers[2] = \"Charlie\";\nteamMembers[3] = \"Diana\";\n\n// Or initialize directly\nString[] robotSystems = {\"Drive\", \"Arm\", \"Intake\", \"Launcher\"};\n\n// Iterate through the array\nSystem.out.println(\"Team Members:\");\nfor (int i = 0; i < teamMembers.length; i++) {\n    System.out.println((i + 1) + \". \" + teamMembers[i]);\n}\n\n// Enhanced for loop (for-each)\nSystem.out.println(\"\\nRobot Systems:\");\nfor (String system : robotSystems) {\n    System.out.println(\"- \" + system);\n}"
    },
    {
      "type": "text",
      "title": "Adding Objects to Arrays",
      "content": "Objects can be added to arrays just like primitive values. You can create objects first and then add them, or create objects directly when assigning to array positions. Let's use a Robot class example."
    },
    {
      "type": "code",
      "title": "Robot Objects in Arrays:",
      "content": "// Assume we have a Robot class\npublic class Robot {\n    private String name;\n    private int teamNumber;\n    private boolean isActive;\n    \n    public Robot(String name, int teamNumber) {\n        this.name = name;\n        this.teamNumber = teamNumber;\n        this.isActive = false;\n    }\n    \n    public String getName() { return this.name; }\n    public int getTeamNumber() { return this.teamNumber; }\n    public boolean isActive() { return this.isActive; }\n    public void activate() { this.isActive = true; }\n    \n    public String toString() {\n        return name + \" (Team \" + teamNumber + \") - \" + (isActive ? \"Active\" : \"Inactive\");\n    }\n}\n\n// Create an array for robot objects\nRobot[] competition = new Robot[4];\n\n// Method 1: Create robot first, then add to array\nRobot robot1 = new Robot(\"SpeedBot\", 12345);\ncompetition[0] = robot1;\n\n// Method 2: Create robot directly in array assignment\ncompetition[1] = new Robot(\"PowerBot\", 67890);\ncompetition[2] = new Robot(\"PrecisionBot\", 11111);\ncompetition[3] = new Robot(\"AllStarBot\", 22222);\n\n// Activate all robots and display\nfor (int i = 0; i < competition.length; i++) {\n    competition[i].activate();\n    System.out.println(competition[i]);\n}"
    },
    {
      "type": "text",
      "title": "User Input for Object Arrays",
      "content": "You can collect user input to populate arrays with objects. This is useful for creating team rosters, robot configurations, or competition data from user input."
    },
    {
      "type": "code",
      "title": "Building Object Arrays from User Input:",
      "content": "import java.util.Scanner;\n\npublic class RobotTeamBuilder {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        System.out.print(\"How many robots in your team? \");\n        int teamSize = Integer.valueOf(scanner.nextLine());\n        \n        // Create array based on user input\n        Robot[] robotTeam = new Robot[teamSize];\n        \n        // Collect robot information\n        for (int i = 0; i < robotTeam.length; i++) {\n            System.out.println(\"\\nEntering Robot \" + (i + 1) + \":\");\n            \n            System.out.print(\"Robot name: \");\n            String name = scanner.nextLine();\n            \n            if (name.isEmpty()) {\n                System.out.println(\"Using default name: Robot\" + (i + 1));\n                name = \"Robot\" + (i + 1);\n            }\n            \n            System.out.print(\"Team number: \");\n            int teamNumber = Integer.valueOf(scanner.nextLine());\n            \n            // Create and add robot to array\n            robotTeam[i] = new Robot(name, teamNumber);\n        }\n        \n        // Display the complete team\n        System.out.println(\"\\n=== Robot Team Roster ===\");\n        System.out.println(\"Total robots: \" + robotTeam.length);\n        \n        for (int i = 0; i < robotTeam.length; i++) {\n            System.out.println((i + 1) + \". \" + robotTeam[i]);\n        }\n    }\n}"
    },
    {
      "type": "rules-box",
      "title": "Object Array Best Practices:",
      "subtitle": "Guidelines for Working with Object Arrays:",
      "items": [
        "<strong>Null Checks:</strong> Always check if array elements are null before using them",
        "<strong>Bounds Checking:</strong> Validate array indices before access",
        "<strong>Initialization:</strong> Remember that object arrays start with null values",
        "<strong>Enhanced Loops:</strong> Use for-each loops when you don't need the index",
        "<strong>Array Length:</strong> Use .length property (not .length() method) for arrays",
        "<strong>Meaningful Names:</strong> Use descriptive names for arrays and their elements"
      ]
    },
    {
      "type": "exercise-box",
      "title": "Try It Yourself:",
      "subtitle": "Exercise 1: Complete Object Array System",
      "content": "Build a comprehensive FRC competition management system using object arrays:",
      "tasks": [
        "Create a Competition class and build an array of competitions",
        "Implement user input system for adding competitions with multiple parameters",
        "Create filtering system to find competitions by criteria"
      ],
      "answers": [
        {
          "task": "Create a Competition class and build an array of competitions",
          "code": "public class Competition {\n    private String competitionName;\n    private String location;\n    private int numTeams;\n    private String date;\n    private boolean isActive;\n    \n    public Competition(String name, String location, int numTeams, String date) {\n        this.competitionName = name;\n        this.location = location;\n        this.numTeams = numTeams;\n        this.date = date;\n        this.isActive = false;\n    }\n    \n    // Getters\n    public String getName() { return competitionName; }\n    public String getLocation() { return location; }\n    public int getNumTeams() { return numTeams; }\n    public String getDate() { return date; }\n    public boolean isActive() { return isActive; }\n    \n    // Setters\n    public void setActive(boolean active) { this.isActive = active; }\n    \n    public String toString() {\n        return competitionName + \" in \" + location + \" (\" + date + \") - \" + \n               numTeams + \" teams, \" + (isActive ? \"Active\" : \"Scheduled\");\n    }\n}\n\n// Usage example:\npublic class CompetitionArrayDemo {\n    public static void main(String[] args) {\n        // Create array of competitions\n        Competition[] frcSeason = new Competition[5];\n        \n        // Add competitions to array\n        frcSeason[0] = new Competition(\"District Event 1\", \"Tech High School\", 24, \"2024-01-15\");\n        frcSeason[1] = new Competition(\"District Event 2\", \"Community Center\", 32, \"2024-01-22\");\n        frcSeason[2] = new Competition(\"District Event 3\", \"University Arena\", 48, \"2024-02-12\");\n        frcSeason[3] = new Competition(\"District Championship\", \"Convention Center\", 64, \"2024-02-26\");\n        frcSeason[4] = new Competition(\"World Championship\", \"Houston\", 128, \"2024-04-20\");\n        \n        // Display all competitions\n        System.out.println(\"=== FRC Season Schedule ===\");\n        for (int i = 0; i < frcSeason.length; i++) {\n            System.out.println((i + 1) + \". \" + frcSeason[i]);\n        }\n    }\n}"
        },
        {
          "task": "Implement user input system for adding competitions with multiple parameters",
          "code": "import java.util.Scanner;\n\npublic class CompetitionBuilder {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        System.out.print(\"How many competitions to schedule? \");\n        int numCompetitions = Integer.valueOf(scanner.nextLine());\n        \n        Competition[] competitions = new Competition[numCompetitions];\n        \n        for (int i = 0; i < competitions.length; i++) {\n            System.out.println(\"\\n=== Competition \" + (i + 1) + \" Details ===\");\n            \n            System.out.print(\"Competition name: \");\n            String name = scanner.nextLine();\n            \n            System.out.print(\"Location: \");\n            String location = scanner.nextLine();\n            \n            System.out.print(\"Number of teams: \");\n            int numTeams = Integer.valueOf(scanner.nextLine());\n            \n            System.out.print(\"Date (YYYY-MM-DD): \");\n            String date = scanner.nextLine();\n            \n            competitions[i] = new Competition(name, location, numTeams, date);\n            System.out.println(\"✅ Added: \" + competitions[i].getName());\n        }\n        \n        // Display schedule\n        System.out.println(\"\\n=== Competition Schedule ===\");\n        for (int i = 0; i < competitions.length; i++) {\n            String status = competitions[i].isActive() ? \"🟢\" : \"📅\";\n            System.out.println(status + \" \" + (i + 1) + \". \" + competitions[i]);\n        }\n    }\n}"
        },
        {
          "task": "Create filtering system to find competitions by criteria",
          "code": "public class CompetitionFilter {\n    \n    // Filter by minimum number of teams\n    public static void filterByTeamCount(Competition[] competitions, int minTeams) {\n        System.out.println(\"\\n🏆 Competitions with \" + minTeams + \"+ teams:\");\n        boolean found = false;\n        \n        for (Competition comp : competitions) {\n            if (comp.getNumTeams() >= minTeams) {\n                System.out.println(\"- \" + comp);\n                found = true;\n            }\n        }\n        \n        if (!found) {\n            System.out.println(\"No competitions found with \" + minTeams + \"+ teams.\");\n        }\n    }\n    \n    // Filter by location\n    public static void filterByLocation(Competition[] competitions, String location) {\n        System.out.println(\"\\n📍 Competitions in \" + location + \":\");\n        boolean found = false;\n        \n        for (Competition comp : competitions) {\n            if (comp.getLocation().toLowerCase().contains(location.toLowerCase())) {\n                System.out.println(\"- \" + comp);\n                found = true;\n            }\n        }\n        \n        if (!found) {\n            System.out.println(\"No competitions found in \" + location + \".\");\n        }\n    }\n    \n    // Usage example\n    public static void main(String[] args) {\n        Competition[] season = {\n            new Competition(\"Local Qualifier\", \"Tech High School\", 24, \"2024-01-15\"),\n            new Competition(\"Regional Championship\", \"University Arena\", 48, \"2024-02-12\"),\n            new Competition(\"State Finals\", \"Convention Center\", 64, \"2024-03-05\")\n        };\n        \n        // Apply various filters\n        filterByTeamCount(season, 50);\n        filterByLocation(season, \"Arena\");\n    }\n}"
        }
      ]
    }
  ]
} 