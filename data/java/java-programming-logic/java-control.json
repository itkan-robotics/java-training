{
  "id": "control",
  "title": "Control Structures",
  "sections": [
    {
      "type": "text",
      "title": "Making Decisions with if/else",
      "content": "Control structures help your program make decisions and repeat actions based on conditions."
    },
    {
      "type": "code",
      "title": "If/Else Statements:",
      "content": "int batteryLevel = 75;\n\nif (batteryLevel > 80) {\n    System.out.println(\"Battery level is good\");\n} else if (batteryLevel > 50) {\n    System.out.println(\"Battery level is okay\");\n} else if (batteryLevel > 20) {\n    System.out.println(\"Battery level is low\");\n} else {\n    System.out.println(\"Battery critically low!\");\n}"
    },
    {
      "type": "rules-box",
      "title": "Comparison Operators:",
      "subtitle": "Common Operators:",
      "items": [
        "<code>==</code> - Equal to",
        "<code>!=</code> - Not equal to",
        "<code>&gt;</code> - Greater than",
        "<code>&lt;</code> - Less than",
        "<code>&gt;=</code> - Greater than or equal",
        "<code>&lt;=</code> - Less than or equal"
      ]
    },
    {
      "type": "code",
      "title": "Loops - For Loop:",
      "content": "// For loop - when you know how many times to repeat\nfor (int i = 1; i <= 5; i++) {\n    System.out.println(\"Count: \" + i);\n}\n\n// For loop with arrays\nint[] motorPowers = {50, 75, 100, 25};\nfor (int i = 0; i < motorPowers.length; i++) {\n    System.out.println(\"Motor \" + i + \" power: \" + motorPowers[i]);\n}"
    },
    {
      "type": "code",
      "title": "Loops - While Loop:",
      "content": "// While loop - repeat based on a condition\nint attempts = 0;\nboolean sensorDetected = false;\n\nwhile (!sensorDetected && attempts < 10) {\n    sensorDetected = checkSensor();\n    attempts++;\n    System.out.println(\"Attempt \" + attempts);\n}"
    },
    {
      "type": "logical-operators",
      "title": "Logical Operators:",
      "subtitle": "Combining Conditions:",
      "operators": [
        "<code>&&</code> - AND (both conditions must be true)",
        "<code>||</code> - OR (at least one condition must be true)",
        "<code>!</code> - NOT (reverses the condition)"
      ],
      "examples": "// AND example\nif (batteryLevel > 20 && motorTemperature < 80) {\n    robot.startDriving();\n}\n\n// OR example  \nif (gamepad1.a || gamepad1.b) {\n    robot.activateClaw();\n}"
    },
    {
      "type": "exercise-box",
      "title": "Try It Yourself:",
      "subtitle": "Exercise 1: Control Flow",
      "content": "Write control structures for robot behavior:",
      "tasks": [
        "An if/else chain that sets motor speed based on distance to target",
        "A for loop that checks multiple sensors",
        "A while loop that runs until a button is pressed",
        "Combine conditions using logical operators"
      ],
      "answers": [
        {
          "task": "An if/else chain that sets motor speed based on distance to target",
          "content": "public void setMotorSpeedByDistance(double distanceToTarget) {\n    double motorSpeed;\n    \n    if (distanceToTarget > 50) {\n        motorSpeed = 1.0;  // Full speed for far distances\n        System.out.println(\"Far from target - full speed\");\n    } else if (distanceToTarget > 20) {\n        motorSpeed = 0.6;  // Medium speed\n        System.out.println(\"Medium distance - reduced speed\");\n    } else if (distanceToTarget > 5) {\n        motorSpeed = 0.3;  // Slow speed for precision\n        System.out.println(\"Close to target - slow speed\");\n    } else {\n        motorSpeed = 0.0;  // Stop when very close\n        System.out.println(\"At target - stopping\");\n    }\n    \n    setDriveMotors(motorSpeed);\n}"
        },
        {
          "task": "A for loop that checks multiple sensors",
          "content": "public void checkAllSensors() {\n    String[] sensorNames = {\"colorSensor\", \"distanceSensor\", \"touchSensor\", \"gyroSensor\"};\n    boolean[] sensorStatus = new boolean[4];\n    \n    System.out.println(\"=== Sensor Check ===\");\n    \n    for (int i = 0; i < sensorNames.length; i++) {\n        // Simulate sensor check (replace with actual sensor code)\n        sensorStatus[i] = Math.random() > 0.2; // 80% chance of working\n        \n        if (sensorStatus[i]) {\n            System.out.println(sensorNames[i] + \": ✅ Working\");\n        } else {\n            System.out.println(sensorNames[i] + \": ❌ Error\");\n        }\n    }\n}"
        },
        {
          "task": "A while loop that runs until a button is pressed",
          "content": "public void waitForButtonPress() {\n    System.out.println(\"Waiting for button press to continue...\");\n    \n    while (!gamepad1.a && !gamepad1.b) {\n        // Keep checking for button press\n        telemetry.addData(\"Status\", \"Press A or B to continue\");\n        telemetry.update();\n        \n        // Small delay to prevent excessive CPU usage\n        try {\n            Thread.sleep(50);\n        } catch (InterruptedException e) {\n            break;\n        }\n    }\n    \n    if (gamepad1.a) {\n        System.out.println(\"Button A pressed - continuing\");\n    } else if (gamepad1.b) {\n        System.out.println(\"Button B pressed - continuing\");\n    }\n}"
        },
        {
          "task": "Combine conditions using logical operators",
          "content": "public void robotSafetyCheck() {\n    double batteryLevel = 75;\n    double motorTemp = 45;\n    boolean emergencyStop = false;\n    boolean sensorError = false;\n    \n    // AND operator - both conditions must be true\n    if (batteryLevel > 20 && motorTemp < 80) {\n        System.out.println(\"Robot ready to operate\");\n    }\n    \n    // OR operator - at least one condition must be true\n    if (emergencyStop || sensorError || batteryLevel < 10) {\n        System.out.println(\"⚠️ STOPPING ROBOT - Safety issue detected\");\n        stopAllMotors();\n    }\n    \n    // NOT operator - reverse the condition\n    if (!emergencyStop && !sensorError) {\n        System.out.println(\"All systems normal\");\n    }\n    \n    // Complex combination\n    if ((batteryLevel > 50 && motorTemp < 70) || \n        (batteryLevel > 30 && motorTemp < 60)) {\n        System.out.println(\"Safe to run autonomous mode\");\n    }\n}"
        }
      ]
    }
  ]
} 
