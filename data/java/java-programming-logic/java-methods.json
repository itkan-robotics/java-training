{
  "id": "methods",
  "title": "Java Methods",
  "sections": [
    {
      "type": "text",
      "title": "What are Methods?",
      "content": "A method is a named set of statements that can be called from elsewhere in the program code by its name. Methods are like reusable pieces of code that perform specific tasks. You've already been using methods like <code>System.out.println()</code> and <code>Integer.valueOf()</code> - these are pre-made Java methods."
    },
    {
      "type": "text",
      "title": "Why Use Methods?",
      "content": "Methods help structure programs by breaking them into smaller, manageable pieces. Instead of writing long, complex code in one place, you can create methods that handle specific tasks. This makes your code easier to read, debug, and reuse."
    },
    {
      "type": "code",
      "title": "Method Structure:",
      "content": "// Basic method structure\npublic static void methodName() {\n    // Method body - code to execute\n    System.out.println(\"This method does something!\");\n}\n\n// Method with parameters\npublic static void greet(String name) {\n    System.out.println(\"Hello, \" + name + \"!\");\n}\n\n// Method that returns a value\npublic static int addNumbers(int a, int b) {\n    return a + b;\n}\n\n// Method placement in a class\npublic class RobotProgram {\n    public static void main(String[] args) {\n        // Call methods from main\n        greet(\"Robot\");\n        int result = addNumbers(5, 3);\n        System.out.println(\"Sum: \" + result);\n    }\n    \n    // Methods go here, outside of main but inside the class\n    public static void greet(String name) {\n        System.out.println(\"Hello, \" + name + \"!\");\n    }\n    \n    public static int addNumbers(int a, int b) {\n        return a + b;\n    }\n}"
    },
    {
      "type": "text",
      "title": "Method Parameters",
      "content": "Parameters are values given to a method that can be used in its execution. The parameters are defined within the parentheses following the method name. When you call the method, you pass values (arguments) that get copied into these parameters."
    },
    {
      "type": "code",
      "title": "Single Parameter Example:",
      "content": "// Method with one parameter\npublic static void setMotorPower(double power) {\n    System.out.println(\"Setting motor power to: \" + power);\n    // Code to actually set motor power would go here\n}\n\n// Calling the method\npublic static void main(String[] args) {\n    setMotorPower(0.5);    // Pass 0.5 as the power value\n    setMotorPower(1.0);    // Pass 1.0 as the power value\n    \n    // You can also pass expressions\n    double targetPower = 0.75;\n    setMotorPower(targetPower);        // Pass variable value\n    setMotorPower(0.25 + 0.25);       // Expression evaluates to 0.5\n}"
    },
    {
      "type": "code",
      "title": "Multiple Parameters Example:",
      "content": "// Method with multiple parameters\npublic static void driveRobot(double forward, double strafe, double rotate) {\n    System.out.println(\"Drive command - Forward: \" + forward + \n                      \", Strafe: \" + strafe + \", Rotate: \" + rotate);\n    // Robot driving code would go here\n}\n\n// Method that calculates and returns a value\npublic static double calculateDistance(double x1, double y1, double x2, double y2) {\n    double deltaX = x2 - x1;\n    double deltaY = y2 - y1;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n}\n\n// Calling methods with multiple parameters\npublic static void main(String[] args) {\n    // Parameters are passed in the same order as defined\n    driveRobot(0.8, 0.0, 0.2);  // forward=0.8, strafe=0.0, rotate=0.2\n    \n    // Calculate distance between two points\n    double dist = calculateDistance(0, 0, 3, 4);\n    System.out.println(\"Distance: \" + dist);  // Output: 5.0\n}"
    },
    {
      "type": "text",
      "title": "Method Call Stack",
      "content": "When a method is called, the program creates a new 'frame' in memory to store the method's variables. This creates a call stack - methods are stacked on top of each other. When a method finishes, its frame is removed and execution returns to the calling method."
    },
    {
      "type": "code",
      "title": "Call Stack Example:",
      "content": "public static void main(String[] args) {\n    System.out.println(\"Starting main method\");\n    startRobot();  // Call startRobot method\n    System.out.println(\"Back in main method\");\n}\n\npublic static void startRobot() {\n    System.out.println(\"Robot starting...\");\n    initializeSensors();  // Call initializeSensors method\n    System.out.println(\"Robot ready!\");\n}\n\npublic static void initializeSensors() {\n    System.out.println(\"Initializing sensors...\");\n    System.out.println(\"Sensors ready!\");\n}\n\n/* Output:\nStarting main method\nRobot starting...\nInitializing sensors...\nSensors ready!\nRobot ready!\nBack in main method\n\nCall stack visualization:\n1. main() starts\n2. main() calls startRobot() - stack: [main, startRobot]\n3. startRobot() calls initializeSensors() - stack: [main, startRobot, initializeSensors]\n4. initializeSensors() finishes - stack: [main, startRobot]\n5. startRobot() finishes - stack: [main]\n6. main() finishes - program ends\n*/"
    },
    {
      "type": "code",
      "title": "Basic Method Examples:",
      "content": "public class Calculator {\n    \n    // Method that returns a value\n    public int add(int a, int b) {\n        return a + b;\n    }\n    \n    // Method that doesn't return a value (void)\n    public void printResult(int result) {\n        System.out.println(\"Result: \" + result);\n    }\n    \n    // Method with no parameters\n    public void sayHello() {\n        System.out.println(\"Hello!\");\n    }\n}"
    },
    {
      "type": "text",
      "title": "Method Naming Conventions",
      "content": "Method names should begin with a lowercase letter, and subsequent words should start with uppercase letters (camelCase). Method names should be descriptive verbs that clearly indicate what the method does. The code inside methods should be indented by four spaces."
    },
    {
      "type": "code",
      "title": "Good vs Bad Method Names:",
      "content": "// ❌ BAD: Poor naming conventions\npublic static void This_method_says_woof ( ) {\nSystem.out.println(\"woof\");\n}\n\npublic static void doStuff() {\n    // What does this do?\n}\n\npublic static void x() {\n    // Too short, unclear\n}\n\n// ✅ GOOD: Proper naming conventions\npublic static void thisMethodSaysWoof() {\n    System.out.println(\"woof\");\n}\n\npublic static void initializeRobotSensors() {\n    System.out.println(\"Initializing all robot sensors...\");\n    // Clear purpose, proper camelCase\n}\n\npublic static void calculateMotorPower() {\n    // Descriptive name, proper indentation\n    double power = 0.5;\n    System.out.println(\"Motor power: \" + power);\n}"
    },
    {
      "type": "rules-box",
      "title": "Method Components:",
      "subtitle": "Method Structure:",
      "items": [
        "<strong>public static:</strong> Keywords that define method visibility and type",
        "<strong>Return type:</strong> void (no return), int, double, String, boolean, etc.",
        "<strong>Method name:</strong> descriptive verb in camelCase",
        "<strong>Parameters:</strong> input values in parentheses (type name)",
        "<strong>Method body:</strong> code inside curly braces, indented 4 spaces"
      ]
    },
    {
      "type": "text",
      "title": "Methods Calling Other Methods",
      "content": "Methods can call other methods, creating a chain of execution. This is very useful for breaking complex tasks into smaller, manageable pieces. Each method call adds a new frame to the call stack."
    },
    {
      "type": "code",
      "title": "Methods Calling Other Methods:",
      "content": "public class RobotController {\n    public static void main(String[] args) {\n        System.out.println(\"Starting robot program...\");\n        runAutonomousMode();\n        System.out.println(\"Program complete!\");\n    }\n    \n    public static void runAutonomousMode() {\n        System.out.println(\"Autonomous mode starting...\");\n        initializeRobot();\n        executeMovementSequence();\n        System.out.println(\"Autonomous mode complete!\");\n    }\n    \n    public static void initializeRobot() {\n        System.out.println(\"Initializing robot systems...\");\n        initializeSensors();\n        initializeMotors();\n        System.out.println(\"Robot ready!\");\n    }\n    \n    public static void initializeSensors() {\n        System.out.println(\"- Sensors initialized\");\n    }\n    \n    public static void initializeMotors() {\n        System.out.println(\"- Motors initialized\");\n    }\n    \n    public static void executeMovementSequence() {\n        moveForward(24);  // Move 24 inches forward\n        turnRight(90);    // Turn 90 degrees right\n        moveForward(12);  // Move 12 inches forward\n    }\n    \n    public static void moveForward(double inches) {\n        System.out.println(\"Moving forward \" + inches + \" inches\");\n    }\n    \n    public static void turnRight(double degrees) {\n        System.out.println(\"Turning right \" + degrees + \" degrees\");\n    }\n}\n\n/* Output:\nStarting robot program...\nAutonomous mode starting...\nInitializing robot systems...\n- Sensors initialized\n- Motors initialized\nRobot ready!\nMoving forward 24.0 inches\nTurning right 90.0 degrees\nMoving forward 12.0 inches\nAutonomous mode complete!\nProgram complete!\n*/"
    },
    {
      "type": "text",
      "title": "The Main Method",
      "content": "The <code>main</code> method is special - it's where your program starts executing. When you run a Java program, the operating system calls the <code>main</code> method first. All other methods are called from <code>main</code> or from methods that <code>main</code> calls."
    },

    {
      "type": "exercise-box",
      "title": "Try It Yourself:",
      "subtitle": "Exercise 1: Method Fundamentals",
      "content": "Practice creating and calling methods:",
      "tasks": [
        "Create a simple greet method and call it multiple times",
        "Build a method with parameters that prints robot status",
        "Write a method that returns a calculated value",
        "Create a complex method that calls other methods"
      ],
      "answers": [
        {
          "task": "Create a simple greet method and call it multiple times",
          "content": "public class GreetingProgram {\n    public static void main(String[] args) {\n        System.out.println(\"Welcome to FRC Robot Programming!\");\n        \n        // Call greet method multiple times\n        greetRobot();\n        greetRobot();\n        greetRobot();\n        \n        System.out.println(\"All robots greeted!\");\n    }\n    \n    // Simple method with no parameters and no return value\n    public static void greetRobot() {\n        System.out.println(\"Hello, FRC Robot! Ready to compete!\");\n    }\n}\n\n/* Output:\nWelcome to FRC Robot Programming!\nHello, FRC Robot! Ready to compete!\nHello, FRC Robot! Ready to compete!\nHello, FRC Robot! Ready to compete!\nAll robots greeted!\n*/"
        },
        {
          "task": "Build a method with parameters that prints robot status",
          "content": "public class RobotStatus {\n    public static void main(String[] args) {\n        // Call method with different parameters\n        printRobotStatus(\"Alpha\", 85.5, true);\n        printRobotStatus(\"Beta\", 23.2, false);\n        printRobotStatus(\"Gamma\", 67.8, true);\n    }\n    \n    // Method with multiple parameters\n    public static void printRobotStatus(String robotName, double batteryLevel, boolean isActive) {\n        System.out.println(\"=== Robot Status Report ===\");\n        System.out.println(\"Robot Name: \" + robotName);\n        System.out.println(\"Battery Level: \" + batteryLevel + \"%\");\n        System.out.println(\"Status: \" + (isActive ? \"ACTIVE\" : \"INACTIVE\"));\n        \n        // Conditional logic based on parameters\n        if (batteryLevel < 25) {\n            System.out.println(\"⚠️ LOW BATTERY WARNING!\");\n        } else if (batteryLevel > 80) {\n            System.out.println(\"✅ Battery level excellent\");\n        }\n        \n        System.out.println(\"\");  // Empty line for spacing\n    }\n}\n\n/* Output:\n=== Robot Status Report ===\nRobot Name: Alpha\nBattery Level: 85.5%\nStatus: ACTIVE\n✅ Battery level excellent\n\n=== Robot Status Report ===\nRobot Name: Beta\nBattery Level: 23.2%\nStatus: INACTIVE\n⚠️ LOW BATTERY WARNING!\n\n=== Robot Status Report ===\nRobot Name: Gamma\nBattery Level: 67.8%\nStatus: ACTIVE\n\n*/"
        },
        {
          "task": "Write a method that returns a calculated value",
          "content": "public class CalculationMethods {\n    public static void main(String[] args) {\n        // Use methods that return values\n        double speed1 = calculateSpeed(100, 5);  // 100 inches in 5 seconds\n        double speed2 = calculateSpeed(50, 2.5); // 50 inches in 2.5 seconds\n        \n        System.out.println(\"Robot 1 speed: \" + speed1 + \" inches/second\");\n        System.out.println(\"Robot 2 speed: \" + speed2 + \" inches/second\");\n        \n        // Use the returned values in other calculations\n        double averageSpeed = (speed1 + speed2) / 2;\n        System.out.println(\"Average speed: \" + averageSpeed + \" inches/second\");\n        \n        // Multiple method calls in one expression\n        double totalDistance = calculateDistance(0, 0, 3, 4) + calculateDistance(3, 4, 6, 8);\n        System.out.println(\"Total distance traveled: \" + totalDistance + \" units\");\n    }\n    \n    // Method that returns a calculated value\n    public static double calculateSpeed(double distance, double time) {\n        if (time == 0) {\n            System.out.println(\"Error: Cannot divide by zero time!\");\n            return 0;\n        }\n        return distance / time;\n    }\n    \n    // Another method that returns a value\n    public static double calculateDistance(double x1, double y1, double x2, double y2) {\n        double deltaX = x2 - x1;\n        double deltaY = y2 - y1;\n        return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n    }\n}\n\n/* Output:\nRobot 1 speed: 20.0 inches/second\nRobot 2 speed: 20.0 inches/second\nAverage speed: 20.0 inches/second\nTotal distance traveled: 10.0 units\n*/"
        },
        {
          "task": "Create a complex method that calls other methods",
          "content": "public class ComplexRobotProgram {\n    public static void main(String[] args) {\n        System.out.println(\"Starting robot competition sequence...\");\n        runCompetitionSequence();\n        System.out.println(\"Competition sequence complete!\");\n    }\n    \n    // Main coordination method that calls other methods\n    public static void runCompetitionSequence() {\n        performSystemCheck();\n        \n        if (isRobotReady()) {\n            executeAutonomousPhase();\n            executeTeleopPhase();\n        } else {\n            System.out.println(\"❌ Robot not ready - aborting sequence\");\n        }\n        \n        performShutdown();\n    }\n    \n    public static void performSystemCheck() {\n        System.out.println(\"\\n🔍 Performing system check...\");\n        checkBattery();\n        checkMotors();\n        checkSensors();\n        System.out.println(\"✅ System check complete\");\n    }\n    \n    public static void checkBattery() {\n        System.out.println(\"  - Battery: OK (87%)\");\n    }\n    \n    public static void checkMotors() {\n        System.out.println(\"  - Motors: All operational\");\n    }\n    \n    public static void checkSensors() {\n        System.out.println(\"  - Sensors: All responding\");\n    }\n    \n    public static boolean isRobotReady() {\n        // In a real program, this would check actual robot status\n        System.out.println(\"\\n🤖 Robot status: READY\");\n        return true;\n    }\n    \n    public static void executeAutonomousPhase() {\n        System.out.println(\"\\n🚀 Starting autonomous phase...\");\n        moveToTarget(36, 24);  // Move to coordinates\n        deployMechanism();\n        returnToStart();\n        System.out.println(\"✅ Autonomous phase complete\");\n    }\n    \n    public static void executeTeleopPhase() {\n        System.out.println(\"\\n🎮 Starting teleop phase...\");\n        enableDriverControl();\n        System.out.println(\"✅ Teleop phase active\");\n    }\n    \n    public static void moveToTarget(double x, double y) {\n        double distance = calculateMovementDistance(0, 0, x, y);\n        System.out.println(\"  - Moving \" + String.format(\"%.1f\", distance) + \" inches to target\");\n    }\n    \n    public static void deployMechanism() {\n        System.out.println(\"  - Deploying scoring mechanism\");\n    }\n    \n    public static void returnToStart() {\n        System.out.println(\"  - Returning to starting position\");\n    }\n    \n    public static void enableDriverControl() {\n        System.out.println(\"  - Driver control enabled\");\n    }\n    \n    public static void performShutdown() {\n        System.out.println(\"\\n⏹️ Shutting down robot systems...\");\n        System.out.println(\"  - Motors stopped\");\n        System.out.println(\"  - Sensors disabled\");\n        System.out.println(\"✅ Shutdown complete\");\n    }\n    \n    public static double calculateMovementDistance(double x1, double y1, double x2, double y2) {\n        double deltaX = x2 - x1;\n        double deltaY = y2 - y1;\n        return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n    }\n}\n\n/* Output:\nStarting robot competition sequence...\n\n🔍 Performing system check...\n  - Battery: OK (87%)\n  - Motors: All operational\n  - Sensors: All responding\n✅ System check complete\n\n🤖 Robot status: READY\n\n🚀 Starting autonomous phase...\n  - Moving 43.3 inches to target\n  - Deploying scoring mechanism\n  - Returning to starting position\n✅ Autonomous phase complete\n\n🎮 Starting teleop phase...\n  - Driver control enabled\n✅ Teleop phase active\n\n⏹️ Shutting down robot systems...\n  - Motors stopped\n  - Sensors disabled\n✅ Shutdown complete\nCompetition sequence complete!\n*/"
        }
      ]
    }
  ]
} 
