{
  "id": "conditionals", 
  "title": "Conditional Statements",
  "sections": [
    {
      "type": "text",
      "title": "Introduction to Conditional Statements",
      "content": "Programs often need to make decisions based on conditions. Conditional statements allow your program to execute different code paths depending on whether certain conditions are true or false."
    },
    {
      "type": "code",
      "title": "Basic If Statement:",
      "content": "// Simple conditional statement\nSystem.out.println(\"Starting robot check...\");\n\nif (true) {\n    System.out.println(\"This code always runs!\");\n}\n\n// Conditional with comparison\nint batteryLevel = 85;\nif (batteryLevel > 50) {\n    System.out.println(\"Battery level is sufficient\");\n}"
    },
    {
      "type": "text",
      "title": "Code Blocks and Indentation",
      "content": "Conditional statements create <strong>code blocks</strong> enclosed by curly brackets <code>{}</code>. Code inside blocks should be indented 4 spaces or 1 tab to improve readability."
    },
    {
      "type": "code",
      "title": "Proper Indentation:",
      "content": "int motorSpeed = 75;\n\n// Correctly indented\nif (motorSpeed > 50) {\n    System.out.println(\"High speed mode\");\n    motorSpeed = 100;\n}\n\n// Incorrectly indented (avoid this)\nif (motorSpeed > 50) {\nmotorSpeed = 100;\n}"
    },
    {
      "type": "rules-box",
      "title": "Comparison Operators:",
      "subtitle": "Essential Operators for Conditions:",
      "items": [
        "<code>&gt;</code> - Greater than",
        "<code>&gt;=</code> - Greater than or equal to", 
        "<code>&lt;</code> - Less than",
        "<code>&lt;=</code> - Less than or equal to",
        "<code>==</code> - Equal to",
        "<code>!=</code> - Not equal to"
      ]
    },
    {
      "type": "code",
      "title": "Comparison Examples:",
      "content": "int sensorReading = 255;\n\nif (sensorReading != 0) {\n    System.out.println(\"Sensor detected something\");\n}\n\nif (sensorReading >= 200) {\n    System.out.println(\"Strong signal detected\");\n}\n\nif (sensorReading < 50) {\n    System.out.println(\"Weak signal\");\n}"
    },
    {
      "type": "text",
      "title": "Else Statements",
      "content": "The <code>else</code> statement provides an alternative code path when the if condition evaluates to false."
    },
    {
      "type": "code",
      "title": "If-Else Example:",
      "content": "int robotPosition = 45;\n\nif (robotPosition > 50) {\n    System.out.println(\"Robot is in the forward zone\");\n} else {\n    System.out.println(\"Robot is in the back zone\");\n}\n\n// Another example\ndouble batteryVoltage = 11.5;\n\nif (batteryVoltage >= 12.0) {\n    System.out.println(\"Battery voltage is good!\");\n} else {\n    System.out.println(\"Battery needs charging!\");\n}"
    },
    {
      "type": "text", 
      "title": "Multiple Conditions: else if",
      "content": "Use <code>else if</code> to check multiple conditions in sequence. The first condition that evaluates to true will execute, and the rest will be skipped."
    },
    {
      "type": "code",
      "title": "Multiple Conditions:",
      "content": "int gameScore = 85;\n\nif (gameScore == 100) {\n    System.out.println(\"Perfect score!\");\n} else if (gameScore >= 90) {\n    System.out.println(\"Excellent performance!\");\n} else if (gameScore >= 70) {\n    System.out.println(\"Good job!\");\n} else if (gameScore >= 50) {\n    System.out.println(\"Keep practicing!\");\n} else {\n    System.out.println(\"Need more work!\");\n}"
    },
    {
      "type": "rules-box",
      "title": "Order of Execution:",
      "subtitle": "Important Rules:",
      "items": [
        "Conditions are checked from <strong>top to bottom</strong>",
        "Only the <strong>first true condition</strong> executes",
        "Once a condition is true, <strong>remaining conditions are skipped</strong>",
        "Place <strong>most specific conditions first</strong>"
      ]
    },
    {
      "type": "code",
      "title": "Execution Order Example:",
      "content": "int number = 15;\n\n// This works correctly\nif (number % 3 == 0 && number % 5 == 0) {\n    System.out.println(\"FizzBuzz\");  // Divisible by both 3 and 5\n} else if (number % 3 == 0) {\n    System.out.println(\"Fizz\");     // Divisible by 3 only\n} else if (number % 5 == 0) {\n    System.out.println(\"Buzz\");     // Divisible by 5 only\n} else {\n    System.out.println(number);     // Not divisible by 3 or 5\n}\n\n// This would NOT work correctly:\n// if (number % 3 == 0) would catch 15 first!"
    },
    {
      "type": "text",
      "title": "Comparing Strings",
      "content": "Strings must be compared using the <code>.equals()</code> method, not the <code>==</code> operator. The <code>==</code> operator compares object references, not the actual text content."
    },
    {
      "type": "code",
      "title": "String Comparison:",
      "content": "String robotStatus = \"active\";\nString userInput = \"ACTIVE\";\n\n// Correct way to compare strings\nif (robotStatus.equals(\"active\")) {\n    System.out.println(\"Robot is running\");\n}\n\n// Case-insensitive comparison\nif (userInput.equalsIgnoreCase(\"active\")) {\n    System.out.println(\"User wants robot active\");\n}\n\n// Comparing two string variables\nString command1 = \"forward\";\nString command2 = \"backward\";\n\nif (command1.equals(command2)) {\n    System.out.println(\"Commands are the same\");\n} else {\n    System.out.println(\"Commands are different\");\n}\n\n// Wrong way (don't do this)\nif (robotStatus == \"active\") {\n    // This may not work as expected!\n}"
    },
    {
      "type": "text",
      "title": "Logical Operators",
      "content": "Combine multiple conditions using logical operators: <code>&&</code> (AND), <code>||</code> (OR), and <code>!</code> (NOT)."
    },
    {
      "type": "logical-operators",
      "title": "Logical Operators:",
      "subtitle": "Combining Conditions:",
      "operators": [
        "<code>&&</code> - AND (both conditions must be true)",
        "<code>||</code> - OR (at least one condition must be true)",
        "<code>!</code> - NOT (reverses the boolean value)"
      ],
      "examples": "// AND operator - both must be true\nint speed = 50;\nint temperature = 60;\n\nif (speed >= 30 && temperature < 80) {\n    System.out.println(\"Safe to operate\");\n}\n\n// OR operator - at least one must be true\nboolean buttonA = true;\nboolean buttonB = false;\n\nif (buttonA || buttonB) {\n    System.out.println(\"A button was pressed\");\n}\n\n// NOT operator - reverses the condition\nboolean emergencyStop = false;\n\nif (!emergencyStop) {\n    System.out.println(\"Normal operation\");\n}"
    },
    {
      "type": "code",
      "title": "Logical Operator Truth Table:",
      "content": "// Truth table examples\nboolean a = true;\nboolean b = false;\n\nSystem.out.println(\"=== AND (&&) Operation ===\");\nSystem.out.println(\"true && true = \" + (true && true));   // true\nSystem.out.println(\"true && false = \" + (true && false)); // false\nSystem.out.println(\"false && true = \" + (false && true)); // false\nSystem.out.println(\"false && false = \" + (false && false)); // false\n\nSystem.out.println(\"\\n=== OR (||) Operation ===\");\nSystem.out.println(\"true || true = \" + (true || true));   // true\nSystem.out.println(\"true || false = \" + (true || false)); // true\nSystem.out.println(\"false || true = \" + (false || true)); // true\nSystem.out.println(\"false || false = \" + (false || false)); // false\n\nSystem.out.println(\"\\n=== NOT (!) Operation ===\");\nSystem.out.println(\"!true = \" + (!true));   // false\nSystem.out.println(\"!false = \" + (!false)); // true"
    },
    {
      "type": "exercise-box",
      "title": "Try It Yourself:",
      "subtitle": "Exercise 1: Conditional Logic Practice",
      "content": "Practice writing conditional statements for various scenarios:",
      "tasks": [
        "Create a robot battery status checker with multiple levels",
        "Write a sensor range validator with proper error handling",
        "Implement a game mode selector using string comparisons",
        "Build a complex safety system using logical operators"
      ],
      "answers": [
        {
          "task": "Create a robot battery status checker with multiple levels",
          "content": "public class BatteryStatusChecker {\n    public static void main(String[] args) {\n        double batteryVoltage = 11.8;\n        int batteryPercentage = 72;\n        \n        System.out.println(\"=== Battery Status Check ===\");\n        System.out.println(\"Voltage: \" + batteryVoltage + \"V\");\n        System.out.println(\"Percentage: \" + batteryPercentage + \"%\");\n        \n        // Multiple condition checking\n        if (batteryVoltage >= 12.5 && batteryPercentage >= 90) {\n            System.out.println(\"üü¢ Battery Status: EXCELLENT\");\n            System.out.println(\"‚úÖ Ready for competition\");\n        } else if (batteryVoltage >= 12.0 && batteryPercentage >= 70) {\n            System.out.println(\"üü° Battery Status: GOOD\");\n            System.out.println(\"‚úÖ Safe for normal operation\");\n        } else if (batteryVoltage >= 11.5 && batteryPercentage >= 50) {\n            System.out.println(\"üü° Battery Status: MODERATE\");\n            System.out.println(\"‚ö†Ô∏è Consider charging soon\");\n        } else if (batteryVoltage >= 11.0 && batteryPercentage >= 25) {\n            System.out.println(\"üü† Battery Status: LOW\");\n            System.out.println(\"‚ö†Ô∏è Charge immediately after match\");\n        } else {\n            System.out.println(\"üî¥ Battery Status: CRITICAL\");\n            System.out.println(\"üõë DO NOT OPERATE - CHARGE NOW\");\n        }\n    }\n}"
        },
        {
          "task": "Write a sensor range validator with proper error handling",
          "content": "public class SensorValidator {\n    public static void main(String[] args) {\n        // Simulate different sensor readings\n        int colorSensorValue = 150;\n        double distanceSensorValue = 25.7;\n        int touchSensorValue = 1;\n        \n        System.out.println(\"=== Sensor Validation System ===\");\n        \n        // Color sensor validation (0-255 range)\n        if (colorSensorValue >= 0 && colorSensorValue <= 255) {\n            if (colorSensorValue > 200) {\n                System.out.println(\"üü¢ Color Sensor: Bright light detected\");\n            } else if (colorSensorValue > 100) {\n                System.out.println(\"üü° Color Sensor: Medium light detected\");\n            } else {\n                System.out.println(\"üü£ Color Sensor: Low light detected\");\n            }\n        } else {\n            System.out.println(\"‚ùå Color Sensor: Invalid reading (\" + colorSensorValue + \")\");\n        }\n        \n        // Distance sensor validation (0-100 cm range)\n        if (distanceSensorValue >= 0.0 && distanceSensorValue <= 100.0) {\n            if (distanceSensorValue <= 5.0) {\n                System.out.println(\"üî¥ Distance Sensor: OBSTACLE VERY CLOSE (\" + distanceSensorValue + \"cm)\");\n            } else if (distanceSensorValue <= 15.0) {\n                System.out.println(\"üü† Distance Sensor: Obstacle close (\" + distanceSensorValue + \"cm)\");\n            } else {\n                System.out.println(\"üü¢ Distance Sensor: Clear path (\" + distanceSensorValue + \"cm)\");\n            }\n        } else {\n            System.out.println(\"‚ùå Distance Sensor: Out of range (\" + distanceSensorValue + \"cm)\");\n        }\n        \n        // Touch sensor validation (0 or 1)\n        if (touchSensorValue == 0 || touchSensorValue == 1) {\n            if (touchSensorValue == 1) {\n                System.out.println(\"üî¥ Touch Sensor: PRESSED - Emergency stop!\");\n            } else {\n                System.out.println(\"üü¢ Touch Sensor: Not pressed - Normal operation\");\n            }\n        } else {\n            System.out.println(\"‚ùå Touch Sensor: Invalid state (\" + touchSensorValue + \")\");\n        }\n    }\n}"
        },
        {
          "task": "Implement a game mode selector using string comparisons",
          "content": "public class GameModeSelector {\n    public static void main(String[] args) {\n        String currentMode = \"autonomous\";\n        String allianceColor = \"blue\";\n        int matchTime = 125; // seconds remaining\n        \n        System.out.println(\"=== FRC Game Mode System ===\");\n        System.out.println(\"Current Mode: \" + currentMode);\n        System.out.println(\"Alliance: \" + allianceColor);\n        System.out.println(\"Time Remaining: \" + matchTime + \"s\");\n        \n        // Game mode logic with string comparison\n        if (currentMode.equals(\"autonomous\")) {\n            System.out.println(\"ü§ñ AUTONOMOUS PERIOD\");\n            \n            if (allianceColor.equalsIgnoreCase(\"red\")) {\n                System.out.println(\"üî¥ Red Alliance Strategy Active\");\n                System.out.println(\"   ‚Üí Target red alliance scoring positions\");\n            } else if (allianceColor.equalsIgnoreCase(\"blue\")) {\n                System.out.println(\"üîµ Blue Alliance Strategy Active\");\n                System.out.println(\"   ‚Üí Target blue alliance scoring positions\");\n            } else {\n                System.out.println(\"‚ùå Unknown alliance color: \" + allianceColor);\n            }\n            \n        } else if (currentMode.equals(\"teleop\")) {\n            System.out.println(\"üéÆ TELEOPERATED PERIOD\");\n            System.out.println(\"   ‚Üí Driver control enabled\");\n            System.out.println(\"   ‚Üí Manual scoring mode\");\n            \n            if (matchTime <= 30) {\n                System.out.println(\"‚è∞ ENDGAME PERIOD - Final scoring opportunities!\");\n            }\n            \n        } else if (currentMode.equals(\"endgame\")) {\n            System.out.println(\"üèÅ ENDGAME PERIOD\");\n            System.out.println(\"   ‚Üí Focus on hanging/parking\");\n            System.out.println(\"   ‚Üí Maximum point opportunities\");\n            \n        } else if (currentMode.equals(\"disabled\")) {\n            System.out.println(\"‚è∏Ô∏è ROBOT DISABLED\");\n            System.out.println(\"   ‚Üí All motors stopped\");\n            System.out.println(\"   ‚Üí Waiting for next period\");\n            \n        } else {\n            System.out.println(\"‚ùå UNKNOWN MODE: \" + currentMode);\n            System.out.println(\"   ‚Üí Defaulting to safe mode\");\n        }\n    }\n}"
        },
        {
          "task": "Build a complex safety system using logical operators",
          "content": "public class RobotSafetySystem {\n    public static void main(String[] args) {\n        // System status variables\n        boolean emergencyStopPressed = false;\n        double motorTemperature = 68.5;\n        int batteryLevel = 45;\n        boolean communicationActive = true;\n        boolean sensorsResponding = true;\n        double robotSpeed = 0.75; // 0.0 to 1.0 scale\n        String operatorPresent = \"yes\";\n        \n        System.out.println(\"=== Robot Safety System Check ===\");\n        \n        // Critical safety checks using logical operators\n        boolean criticalFailure = emergencyStopPressed || \n                                 motorTemperature > 85 || \n                                 batteryLevel < 10 || \n                                 !communicationActive;\n        \n        boolean warningCondition = (batteryLevel < 25 && robotSpeed > 0.5) ||\n                                  (motorTemperature > 75 && robotSpeed > 0.8) ||\n                                  !sensorsResponding;\n        \n        boolean safeToOperate = !emergencyStopPressed && \n                               motorTemperature < 80 && \n                               batteryLevel > 15 && \n                               communicationActive && \n                               sensorsResponding &&\n                               operatorPresent.equalsIgnoreCase(\"yes\");\n        \n        // Safety decision logic\n        if (criticalFailure) {\n            System.out.println(\"üö® CRITICAL FAILURE - IMMEDIATE SHUTDOWN\");\n            \n            if (emergencyStopPressed) {\n                System.out.println(\"   üõë Emergency stop activated\");\n            }\n            if (motorTemperature > 85) {\n                System.out.println(\"   üå°Ô∏è Motor overheating: \" + motorTemperature + \"¬∞C\");\n            }\n            if (batteryLevel < 10) {\n                System.out.println(\"   üîã Critical battery level: \" + batteryLevel + \"%\");\n            }\n            if (!communicationActive) {\n                System.out.println(\"   üì° Communication failure\");\n            }\n            \n        } else if (warningCondition) {\n            System.out.println(\"‚ö†Ô∏è WARNING CONDITIONS DETECTED\");\n            \n            if (batteryLevel < 25 && robotSpeed > 0.5) {\n                System.out.println(\"   üîã Low battery with high speed operation\");\n            }\n            if (motorTemperature > 75 && robotSpeed > 0.8) {\n                System.out.println(\"   üå°Ô∏è High temperature with maximum speed\");\n            }\n            if (!sensorsResponding) {\n                System.out.println(\"   üìä Sensor communication issues\");\n            }\n            \n            System.out.println(\"   ‚Üí Reducing robot performance for safety\");\n            \n        } else if (safeToOperate) {\n            System.out.println(\"‚úÖ ALL SYSTEMS NORMAL\");\n            System.out.println(\"   üü¢ Robot cleared for full operation\");\n            \n            // Additional operational checks\n            if (batteryLevel > 80 && motorTemperature < 60) {\n                System.out.println(\"   ‚≠ê Optimal operating conditions\");\n            }\n            \n        } else {\n            System.out.println(\"‚ùì UNKNOWN SAFETY STATE\");\n            System.out.println(\"   ‚Üí Defaulting to safe mode\");\n        }\n        \n        // Status summary\n        System.out.println(\"\\n=== System Status Summary ===\");\n        System.out.println(\"Emergency Stop: \" + (emergencyStopPressed ? \"PRESSED\" : \"Normal\"));\n        System.out.println(\"Motor Temp: \" + motorTemperature + \"¬∞C\");\n        System.out.println(\"Battery: \" + batteryLevel + \"%\");\n        System.out.println(\"Communication: \" + (communicationActive ? \"Active\" : \"Failed\"));\n        System.out.println(\"Sensors: \" + (sensorsResponding ? \"Responding\" : \"Error\"));\n        System.out.println(\"Operator Present: \" + operatorPresent);\n    }\n}"
        }
      ]
    }
  ]
} 
